
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000608 memsz 0x00000608 flags r-x
    LOAD off    0x00001628 vaddr 0x00010628 paddr 0x00010718 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001808 vaddr 0x00010808 paddr 0x00010808 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000005f0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00010610  00010610  00001610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f0  00010628  00010718  00001628  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00010808  00010808  00001808  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c8  00000000  00000000  00001740  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000029c  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002fe1  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b4d  00000000  00000000  00004b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000248b  00000000  00000000  000056d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000298  00000000  00000000  00007b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000077b  00000000  00000000  00007df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000004bd  00000000  00000000  00008573  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00008a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00008a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00009942  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  00009945  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000994f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00009950  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00009951  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  0000995a  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00009963  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  0000996c  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000042  00000000  00000000  00009977  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00025487  00000000  00000000  000099b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00010610 l    d  .rodata	00000000 .rodata
00010628 l    d  .rwdata	00000000 .rwdata
00010808 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010628 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00010308 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00010464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00010374 g     F .text	00000040 alt_main
00010090 g     F .text	00000090 _puts_r
00010718 g       *ABS*	00000000 __flash_rwdata_start
00010710 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010808 g     O .bss	00000004 errno
00010810 g     O .bss	00000004 alt_argv
00018708 g       *ABS*	00000000 _gp
00010120 g     F .text	00000014 puts
0001070c g     O .rwdata	00000004 _global_impure_ptr
00010818 g       *ABS*	00000000 __bss_end
000105b8 g     F .text	0000001c alt_dcache_flush_all
00010718 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000103b4 g     F .text	000000b0 write
00010628 g       *ABS*	00000000 __ram_rodata_end
00010818 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010514 g     F .text	000000a4 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
000104f8 g     F .text	0000001c alt_sys_init
00010628 g       *ABS*	00000000 __ram_rwdata_start
00010610 g       *ABS*	00000000 __ram_rodata_start
00010818 g       *ABS*	00000000 __alt_stack_base
00010154 g     F .text	000000bc __sfvwrite_small_dev
00010808 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000034 main
00010814 g     O .bss	00000004 alt_envp
00010714 g     O .rwdata	00000004 alt_errno
00010610 g       *ABS*	00000000 __flash_rodata_start
000104c4 g     F .text	00000034 alt_irq_init
00010210 g     F .text	00000078 _write_r
00010708 g     O .rwdata	00000004 _impure_ptr
0001080c g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010718 g       *ABS*	00000000 _edata
00010818 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000105f0 g     F .text	00000020 altera_nios2_qsys_irq_init
0001000c g       .entry	00000000 exit
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010134 g     F .text	00000020 strlen
000105d4 g     F .text	0000001c alt_icache_flush_all
00010288 g     F .text	00000080 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a1c214 	ori	gp,gp,34568
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10820214 	ori	r2,r2,2056

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c20614 	ori	r3,r3,2072

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00102880 	call	10288 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00103740 	call	10374 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:
 */

#include <stdio.h>

int main()
{
   1005c:	defffe04 	addi	sp,sp,-8
   10060:	dfc00115 	stw	ra,4(sp)
   10064:	df000015 	stw	fp,0(sp)
   10068:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   1006c:	01000074 	movhi	r4,1
   10070:	21018404 	addi	r4,r4,1552
   10074:	00101200 	call	10120 <puts>

  return 0;
   10078:	0005883a 	mov	r2,zero
}
   1007c:	e037883a 	mov	sp,fp
   10080:	dfc00117 	ldw	ra,4(sp)
   10084:	df000017 	ldw	fp,0(sp)
   10088:	dec00204 	addi	sp,sp,8
   1008c:	f800283a 	ret

00010090 <_puts_r>:
   10090:	defffd04 	addi	sp,sp,-12
   10094:	dc000015 	stw	r16,0(sp)
   10098:	2021883a 	mov	r16,r4
   1009c:	2809883a 	mov	r4,r5
   100a0:	dfc00215 	stw	ra,8(sp)
   100a4:	dc400115 	stw	r17,4(sp)
   100a8:	2823883a 	mov	r17,r5
   100ac:	00101340 	call	10134 <strlen>
   100b0:	80c00217 	ldw	r3,8(r16)
   100b4:	02000074 	movhi	r8,1
   100b8:	42005504 	addi	r8,r8,340
   100bc:	880d883a 	mov	r6,r17
   100c0:	100f883a 	mov	r7,r2
   100c4:	8009883a 	mov	r4,r16
   100c8:	180b883a 	mov	r5,r3
   100cc:	1a000115 	stw	r8,4(r3)
   100d0:	403ee83a 	callr	r8
   100d4:	047fffc4 	movi	r17,-1
   100d8:	8009883a 	mov	r4,r16
   100dc:	01800074 	movhi	r6,1
   100e0:	31818904 	addi	r6,r6,1572
   100e4:	01c00044 	movi	r7,1
   100e8:	1440071e 	bne	r2,r17,10108 <_puts_r+0x78>
   100ec:	00ffffc4 	movi	r3,-1
   100f0:	1805883a 	mov	r2,r3
   100f4:	dfc00217 	ldw	ra,8(sp)
   100f8:	dc400117 	ldw	r17,4(sp)
   100fc:	dc000017 	ldw	r16,0(sp)
   10100:	dec00304 	addi	sp,sp,12
   10104:	f800283a 	ret
   10108:	81400217 	ldw	r5,8(r16)
   1010c:	28c00117 	ldw	r3,4(r5)
   10110:	183ee83a 	callr	r3
   10114:	0007883a 	mov	r3,zero
   10118:	147ff51e 	bne	r2,r17,100f0 <_puts_r+0x60>
   1011c:	003ff306 	br	100ec <_puts_r+0x5c>

00010120 <puts>:
   10120:	00800074 	movhi	r2,1
   10124:	1081c204 	addi	r2,r2,1800
   10128:	200b883a 	mov	r5,r4
   1012c:	11000017 	ldw	r4,0(r2)
   10130:	00100901 	jmpi	10090 <_puts_r>

00010134 <strlen>:
   10134:	20800007 	ldb	r2,0(r4)
   10138:	10000526 	beq	r2,zero,10150 <strlen+0x1c>
   1013c:	2007883a 	mov	r3,r4
   10140:	18c00044 	addi	r3,r3,1
   10144:	18800007 	ldb	r2,0(r3)
   10148:	103ffd1e 	bne	r2,zero,10140 <strlen+0xc>
   1014c:	1905c83a 	sub	r2,r3,r4
   10150:	f800283a 	ret

00010154 <__sfvwrite_small_dev>:
   10154:	2880000b 	ldhu	r2,0(r5)
   10158:	defffa04 	addi	sp,sp,-24
   1015c:	dcc00315 	stw	r19,12(sp)
   10160:	1080020c 	andi	r2,r2,8
   10164:	dc800215 	stw	r18,8(sp)
   10168:	dc400115 	stw	r17,4(sp)
   1016c:	dfc00515 	stw	ra,20(sp)
   10170:	dd000415 	stw	r20,16(sp)
   10174:	dc000015 	stw	r16,0(sp)
   10178:	2825883a 	mov	r18,r5
   1017c:	2027883a 	mov	r19,r4
   10180:	3023883a 	mov	r17,r6
   10184:	10002026 	beq	r2,zero,10208 <__sfvwrite_small_dev+0xb4>
   10188:	2940008f 	ldh	r5,2(r5)
   1018c:	28000f16 	blt	r5,zero,101cc <__sfvwrite_small_dev+0x78>
   10190:	01c01b0e 	bge	zero,r7,10200 <__sfvwrite_small_dev+0xac>
   10194:	3821883a 	mov	r16,r7
   10198:	05010004 	movi	r20,1024
   1019c:	00000206 	br	101a8 <__sfvwrite_small_dev+0x54>
   101a0:	0400170e 	bge	zero,r16,10200 <__sfvwrite_small_dev+0xac>
   101a4:	9140008f 	ldh	r5,2(r18)
   101a8:	880d883a 	mov	r6,r17
   101ac:	9809883a 	mov	r4,r19
   101b0:	800f883a 	mov	r7,r16
   101b4:	a400010e 	bge	r20,r16,101bc <__sfvwrite_small_dev+0x68>
   101b8:	01c10004 	movi	r7,1024
   101bc:	00102100 	call	10210 <_write_r>
   101c0:	88a3883a 	add	r17,r17,r2
   101c4:	80a1c83a 	sub	r16,r16,r2
   101c8:	00bff516 	blt	zero,r2,101a0 <__sfvwrite_small_dev+0x4c>
   101cc:	9080000b 	ldhu	r2,0(r18)
   101d0:	00ffffc4 	movi	r3,-1
   101d4:	10801014 	ori	r2,r2,64
   101d8:	9080000d 	sth	r2,0(r18)
   101dc:	1805883a 	mov	r2,r3
   101e0:	dfc00517 	ldw	ra,20(sp)
   101e4:	dd000417 	ldw	r20,16(sp)
   101e8:	dcc00317 	ldw	r19,12(sp)
   101ec:	dc800217 	ldw	r18,8(sp)
   101f0:	dc400117 	ldw	r17,4(sp)
   101f4:	dc000017 	ldw	r16,0(sp)
   101f8:	dec00604 	addi	sp,sp,24
   101fc:	f800283a 	ret
   10200:	0007883a 	mov	r3,zero
   10204:	003ff506 	br	101dc <__sfvwrite_small_dev+0x88>
   10208:	00ffffc4 	movi	r3,-1
   1020c:	003ff306 	br	101dc <__sfvwrite_small_dev+0x88>

00010210 <_write_r>:
   10210:	defffd04 	addi	sp,sp,-12
   10214:	dc000015 	stw	r16,0(sp)
   10218:	04000074 	movhi	r16,1
   1021c:	84020204 	addi	r16,r16,2056
   10220:	dc400115 	stw	r17,4(sp)
   10224:	80000015 	stw	zero,0(r16)
   10228:	2023883a 	mov	r17,r4
   1022c:	2809883a 	mov	r4,r5
   10230:	300b883a 	mov	r5,r6
   10234:	380d883a 	mov	r6,r7
   10238:	dfc00215 	stw	ra,8(sp)
   1023c:	00103b40 	call	103b4 <write>
   10240:	1007883a 	mov	r3,r2
   10244:	00bfffc4 	movi	r2,-1
   10248:	18800626 	beq	r3,r2,10264 <_write_r+0x54>
   1024c:	1805883a 	mov	r2,r3
   10250:	dfc00217 	ldw	ra,8(sp)
   10254:	dc400117 	ldw	r17,4(sp)
   10258:	dc000017 	ldw	r16,0(sp)
   1025c:	dec00304 	addi	sp,sp,12
   10260:	f800283a 	ret
   10264:	80800017 	ldw	r2,0(r16)
   10268:	103ff826 	beq	r2,zero,1024c <_write_r+0x3c>
   1026c:	88800015 	stw	r2,0(r17)
   10270:	1805883a 	mov	r2,r3
   10274:	dfc00217 	ldw	ra,8(sp)
   10278:	dc400117 	ldw	r17,4(sp)
   1027c:	dc000017 	ldw	r16,0(sp)
   10280:	dec00304 	addi	sp,sp,12
   10284:	f800283a 	ret

00010288 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10288:	defffe04 	addi	sp,sp,-8
   1028c:	dfc00115 	stw	ra,4(sp)
   10290:	df000015 	stw	fp,0(sp)
   10294:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10298:	01000074 	movhi	r4,1
   1029c:	2101c604 	addi	r4,r4,1816
   102a0:	01400074 	movhi	r5,1
   102a4:	29418a04 	addi	r5,r5,1576
   102a8:	01800074 	movhi	r6,1
   102ac:	3181c604 	addi	r6,r6,1816
   102b0:	00103080 	call	10308 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   102b4:	01000074 	movhi	r4,1
   102b8:	21000804 	addi	r4,r4,32
   102bc:	01400074 	movhi	r5,1
   102c0:	29400804 	addi	r5,r5,32
   102c4:	01800074 	movhi	r6,1
   102c8:	31800804 	addi	r6,r6,32
   102cc:	00103080 	call	10308 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   102d0:	01000074 	movhi	r4,1
   102d4:	21018404 	addi	r4,r4,1552
   102d8:	01400074 	movhi	r5,1
   102dc:	29418404 	addi	r5,r5,1552
   102e0:	01800074 	movhi	r6,1
   102e4:	31818a04 	addi	r6,r6,1576
   102e8:	00103080 	call	10308 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   102ec:	00105b80 	call	105b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   102f0:	00105d40 	call	105d4 <alt_icache_flush_all>
}
   102f4:	e037883a 	mov	sp,fp
   102f8:	dfc00117 	ldw	ra,4(sp)
   102fc:	df000017 	ldw	fp,0(sp)
   10300:	dec00204 	addi	sp,sp,8
   10304:	f800283a 	ret

00010308 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10308:	defffc04 	addi	sp,sp,-16
   1030c:	df000315 	stw	fp,12(sp)
   10310:	df000304 	addi	fp,sp,12
   10314:	e13ffd15 	stw	r4,-12(fp)
   10318:	e17ffe15 	stw	r5,-8(fp)
   1031c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10320:	e0fffe17 	ldw	r3,-8(fp)
   10324:	e0bffd17 	ldw	r2,-12(fp)
   10328:	18800e26 	beq	r3,r2,10364 <alt_load_section+0x5c>
  {
    while( to != end )
   1032c:	00000a06 	br	10358 <alt_load_section+0x50>
    {
      *to++ = *from++;
   10330:	e0bffd17 	ldw	r2,-12(fp)
   10334:	10c00017 	ldw	r3,0(r2)
   10338:	e0bffe17 	ldw	r2,-8(fp)
   1033c:	10c00015 	stw	r3,0(r2)
   10340:	e0bffe17 	ldw	r2,-8(fp)
   10344:	10800104 	addi	r2,r2,4
   10348:	e0bffe15 	stw	r2,-8(fp)
   1034c:	e0bffd17 	ldw	r2,-12(fp)
   10350:	10800104 	addi	r2,r2,4
   10354:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10358:	e0fffe17 	ldw	r3,-8(fp)
   1035c:	e0bfff17 	ldw	r2,-4(fp)
   10360:	18bff31e 	bne	r3,r2,10330 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10364:	e037883a 	mov	sp,fp
   10368:	df000017 	ldw	fp,0(sp)
   1036c:	dec00104 	addi	sp,sp,4
   10370:	f800283a 	ret

00010374 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10374:	defffe04 	addi	sp,sp,-8
   10378:	dfc00115 	stw	ra,4(sp)
   1037c:	df000015 	stw	fp,0(sp)
   10380:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10384:	0009883a 	mov	r4,zero
   10388:	00104c40 	call	104c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1038c:	00104f80 	call	104f8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10390:	d1204117 	ldw	r4,-32508(gp)
   10394:	d1604217 	ldw	r5,-32504(gp)
   10398:	d1a04317 	ldw	r6,-32500(gp)
   1039c:	001005c0 	call	1005c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   103a0:	e037883a 	mov	sp,fp
   103a4:	dfc00117 	ldw	ra,4(sp)
   103a8:	df000017 	ldw	fp,0(sp)
   103ac:	dec00204 	addi	sp,sp,8
   103b0:	f800283a 	ret

000103b4 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   103b4:	defff904 	addi	sp,sp,-28
   103b8:	dfc00615 	stw	ra,24(sp)
   103bc:	df000515 	stw	fp,20(sp)
   103c0:	df000504 	addi	fp,sp,20
   103c4:	e13ffb15 	stw	r4,-20(fp)
   103c8:	e17ffc15 	stw	r5,-16(fp)
   103cc:	e1bffd15 	stw	r6,-12(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   103d0:	e0bffb17 	ldw	r2,-20(fp)
   103d4:	e0bfff15 	stw	r2,-4(fp)
   103d8:	e0ffff17 	ldw	r3,-4(fp)
   103dc:	18800060 	cmpeqi	r2,r3,1
   103e0:	1000041e 	bne	r2,zero,103f4 <write+0x40>
   103e4:	e0ffff17 	ldw	r3,-4(fp)
   103e8:	188000a0 	cmpeqi	r2,r3,2
   103ec:	1000091e 	bne	r2,zero,10414 <write+0x60>
   103f0:	00001006 	br	10434 <write+0x80>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   103f4:	e17ffc17 	ldw	r5,-16(fp)
   103f8:	e1bffd17 	ldw	r6,-12(fp)
   103fc:	01000074 	movhi	r4,1
   10400:	2101c404 	addi	r4,r4,1808
   10404:	000f883a 	mov	r7,zero
   10408:	00105140 	call	10514 <altera_avalon_jtag_uart_write>
   1040c:	e0bffe15 	stw	r2,-8(fp)
   10410:	00000e06 	br	1044c <write+0x98>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10414:	e17ffc17 	ldw	r5,-16(fp)
   10418:	e1bffd17 	ldw	r6,-12(fp)
   1041c:	01000074 	movhi	r4,1
   10420:	2101c404 	addi	r4,r4,1808
   10424:	000f883a 	mov	r7,zero
   10428:	00105140 	call	10514 <altera_avalon_jtag_uart_write>
   1042c:	e0bffe15 	stw	r2,-8(fp)
   10430:	00000606 	br	1044c <write+0x98>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10434:	00104640 	call	10464 <alt_get_errno>
   10438:	1007883a 	mov	r3,r2
   1043c:	00801444 	movi	r2,81
   10440:	18800015 	stw	r2,0(r3)
        return -1;
   10444:	00bfffc4 	movi	r2,-1
   10448:	e0bffe15 	stw	r2,-8(fp)
   1044c:	e0bffe17 	ldw	r2,-8(fp)
    }
}
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10464:	defffd04 	addi	sp,sp,-12
   10468:	dfc00215 	stw	ra,8(sp)
   1046c:	df000115 	stw	fp,4(sp)
   10470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10474:	00800074 	movhi	r2,1
   10478:	1081c504 	addi	r2,r2,1812
   1047c:	10800017 	ldw	r2,0(r2)
   10480:	1005003a 	cmpeq	r2,r2,zero
   10484:	1000061e 	bne	r2,zero,104a0 <alt_get_errno+0x3c>
   10488:	00800074 	movhi	r2,1
   1048c:	1081c504 	addi	r2,r2,1812
   10490:	10800017 	ldw	r2,0(r2)
   10494:	103ee83a 	callr	r2
   10498:	e0bfff15 	stw	r2,-4(fp)
   1049c:	00000306 	br	104ac <alt_get_errno+0x48>
   104a0:	00800074 	movhi	r2,1
   104a4:	10820204 	addi	r2,r2,2056
   104a8:	e0bfff15 	stw	r2,-4(fp)
   104ac:	e0bfff17 	ldw	r2,-4(fp)
}
   104b0:	e037883a 	mov	sp,fp
   104b4:	dfc00117 	ldw	ra,4(sp)
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00204 	addi	sp,sp,8
   104c0:	f800283a 	ret

000104c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   104c4:	defffd04 	addi	sp,sp,-12
   104c8:	dfc00215 	stw	ra,8(sp)
   104cc:	df000115 	stw	fp,4(sp)
   104d0:	df000104 	addi	fp,sp,4
   104d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   104d8:	00105f00 	call	105f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   104dc:	00800044 	movi	r2,1
   104e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   104e4:	e037883a 	mov	sp,fp
   104e8:	dfc00117 	ldw	ra,4(sp)
   104ec:	df000017 	ldw	fp,0(sp)
   104f0:	dec00204 	addi	sp,sp,8
   104f4:	f800283a 	ret

000104f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   104f8:	deffff04 	addi	sp,sp,-4
   104fc:	df000015 	stw	fp,0(sp)
   10500:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
   10504:	e037883a 	mov	sp,fp
   10508:	df000017 	ldw	fp,0(sp)
   1050c:	dec00104 	addi	sp,sp,4
   10510:	f800283a 	ret

00010514 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10514:	defff904 	addi	sp,sp,-28
   10518:	df000615 	stw	fp,24(sp)
   1051c:	df000604 	addi	fp,sp,24
   10520:	e13ffc15 	stw	r4,-16(fp)
   10524:	e17ffd15 	stw	r5,-12(fp)
   10528:	e1bffe15 	stw	r6,-8(fp)
   1052c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10530:	e0bffc17 	ldw	r2,-16(fp)
   10534:	10800017 	ldw	r2,0(r2)
   10538:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   1053c:	e0bffe17 	ldw	r2,-8(fp)
   10540:	1007883a 	mov	r3,r2
   10544:	e0bffd17 	ldw	r2,-12(fp)
   10548:	10c5883a 	add	r2,r2,r3
   1054c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   10550:	00001106 	br	10598 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10554:	e0bffb17 	ldw	r2,-20(fp)
   10558:	10800104 	addi	r2,r2,4
   1055c:	10800037 	ldwio	r2,0(r2)
   10560:	10bfffec 	andhi	r2,r2,65535
   10564:	1005003a 	cmpeq	r2,r2,zero
   10568:	10000b1e 	bne	r2,zero,10598 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1056c:	e13ffb17 	ldw	r4,-20(fp)
   10570:	e0bffd17 	ldw	r2,-12(fp)
   10574:	10800003 	ldbu	r2,0(r2)
   10578:	10c03fcc 	andi	r3,r2,255
   1057c:	18c0201c 	xori	r3,r3,128
   10580:	18ffe004 	addi	r3,r3,-128
   10584:	e0bffd17 	ldw	r2,-12(fp)
   10588:	10800044 	addi	r2,r2,1
   1058c:	e0bffd15 	stw	r2,-12(fp)
   10590:	2005883a 	mov	r2,r4
   10594:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10598:	e0fffd17 	ldw	r3,-12(fp)
   1059c:	e0bffa17 	ldw	r2,-24(fp)
   105a0:	18bfec36 	bltu	r3,r2,10554 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   105a4:	e0bffe17 	ldw	r2,-8(fp)
}
   105a8:	e037883a 	mov	sp,fp
   105ac:	df000017 	ldw	fp,0(sp)
   105b0:	dec00104 	addi	sp,sp,4
   105b4:	f800283a 	ret

000105b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   105b8:	deffff04 	addi	sp,sp,-4
   105bc:	df000015 	stw	fp,0(sp)
   105c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   105c4:	e037883a 	mov	sp,fp
   105c8:	df000017 	ldw	fp,0(sp)
   105cc:	dec00104 	addi	sp,sp,4
   105d0:	f800283a 	ret

000105d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   105d4:	deffff04 	addi	sp,sp,-4
   105d8:	df000015 	stw	fp,0(sp)
   105dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   105e0:	e037883a 	mov	sp,fp
   105e4:	df000017 	ldw	fp,0(sp)
   105e8:	dec00104 	addi	sp,sp,4
   105ec:	f800283a 	ret

000105f0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   105f0:	deffff04 	addi	sp,sp,-4
   105f4:	df000015 	stw	fp,0(sp)
   105f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   105fc:	000170fa 	wrctl	ienable,zero
}
   10600:	e037883a 	mov	sp,fp
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00104 	addi	sp,sp,4
   1060c:	f800283a 	ret
