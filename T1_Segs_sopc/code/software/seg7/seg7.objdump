
seg7.elf:     file format elf32-littlenios2
seg7.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000948 memsz 0x00000948 flags r-x
    LOAD off    0x00001968 vaddr 0x00001968 paddr 0x00001a64 align 2**12
         filesz 0x000000fc memsz 0x000000fc flags rw-
    LOAD off    0x00001b60 vaddr 0x00001b60 paddr 0x00001b60 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000093c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0000195c  0000195c  0000195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000fc  00001968  00001a64  00001968  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000014  00001b60  00001b60  00001b60  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000248  00000000  00000000  00001a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000345  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000035ef  00000000  00000000  00002015  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d94  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002cb0  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000380  00000000  00000000  00009048  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008de  00000000  00000000  000093c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000734  00000000  00000000  00009ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0000a3dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  0000a420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000b47b  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  0000b47e  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000b489  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  0000b48a  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  0000b493  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  0000b49c  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  0000b4a5  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000041  00000000  00000000  0000b4a9  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002b504  00000000  00000000  0000b4ea  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
0000195c l    d  .rodata	00000000 .rodata
00001968 l    d  .rwdata	00000000 .rwdata
00001b60 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 seg_pio.c
00001968 l     O .rwdata	00000010 azmap
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001978 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00001344 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000014d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000017d8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000013b0 g     F .text	00000040 alt_main
000010cc g     F .text	00000090 _puts_r
00001a64 g       *ABS*	00000000 __flash_rwdata_start
00001b70 g     O .bss	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001b60 g     O .bss	00000004 errno
00001b68 g     O .bss	00000004 alt_argv
00009a58 g       *ABS*	00000000 _gp
000013f0 g     F .text	00000030 usleep
0000115c g     F .text	00000014 puts
00001914 g     F .text	00000008 __udivsi3
00001a5c g     O .rwdata	00000004 _global_impure_ptr
00001b74 g       *ABS*	00000000 __bss_end
00001780 g     F .text	0000001c alt_dcache_flush_all
00001a64 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001420 g     F .text	000000b0 write
00001968 g       *ABS*	00000000 __ram_rodata_end
0000191c g     F .text	00000008 __umodsi3
00001b74 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001580 g     F .text	000000a4 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
00001564 g     F .text	0000001c alt_sys_init
00001924 g     F .text	00000038 __mulsi3
00001968 g       *ABS*	00000000 __ram_rwdata_start
0000195c g       *ABS*	00000000 __ram_rodata_start
00001624 g     F .text	0000015c alt_busy_sleep
00001b74 g       *ABS*	00000000 __alt_stack_base
00001190 g     F .text	000000bc __sfvwrite_small_dev
00001b60 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000070 main
00001b6c g     O .bss	00000004 alt_envp
00001a60 g     O .rwdata	00000004 alt_errno
00001854 g     F .text	00000060 __divsi3
0000195c g       *ABS*	00000000 __flash_rodata_start
00001530 g     F .text	00000034 alt_irq_init
0000124c g     F .text	00000078 _write_r
00001a58 g     O .rwdata	00000004 _impure_ptr
00001b64 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001a64 g       *ABS*	00000000 _edata
00001b74 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000017b8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000100c g       .entry	00000000 exit
000018b4 g     F .text	00000060 __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001170 g     F .text	00000020 strlen
0000179c g     F .text	0000001c alt_icache_flush_all
000012c4 g     F .text	00000080 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a69614 	ori	gp,gp,39512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1086d814 	ori	r2,r2,7008

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c6dd14 	ori	r3,r3,7028

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00012c40 	call	12c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00013b00 	call	13b0 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:
#include <io.h>

static unsigned char azmap[] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10,0x08,0x03,0x46,0x21,0x06,0x0E};

int main()
{
    105c:	defffd04 	addi	sp,sp,-12
    1060:	dfc00215 	stw	ra,8(sp)
    1064:	df000115 	stw	fp,4(sp)
    1068:	df000104 	addi	fp,sp,4
	printf("fpga\n");
    106c:	01000034 	movhi	r4,0
    1070:	21065704 	addi	r4,r4,6492
    1074:	000115c0 	call	115c <puts>
	unsigned char i=0;
    1078:	e03fff05 	stb	zero,-4(fp)
	while(1)
	{
		for(i=0;i<16;i++)
    107c:	e03fff05 	stb	zero,-4(fp)
    1080:	00000e06 	br	10bc <main+0x60>
		{
			IOWR(SEG7_BASE,0,azmap[i]);
    1084:	e0ffff03 	ldbu	r3,-4(fp)
    1088:	00800034 	movhi	r2,0
    108c:	10865a04 	addi	r2,r2,6504
    1090:	10c5883a 	add	r2,r2,r3
    1094:	10800003 	ldbu	r2,0(r2)
    1098:	10c03fcc 	andi	r3,r2,255
    109c:	008c0004 	movi	r2,12288
    10a0:	10c00035 	stwio	r3,0(r2)
			usleep(500*1000);
    10a4:	01000234 	movhi	r4,8
    10a8:	21284804 	addi	r4,r4,-24288
    10ac:	00013f00 	call	13f0 <usleep>
{
	printf("fpga\n");
	unsigned char i=0;
	while(1)
	{
		for(i=0;i<16;i++)
    10b0:	e0bfff03 	ldbu	r2,-4(fp)
    10b4:	10800044 	addi	r2,r2,1
    10b8:	e0bfff05 	stb	r2,-4(fp)
    10bc:	e0bfff03 	ldbu	r2,-4(fp)
    10c0:	10800430 	cmpltui	r2,r2,16
    10c4:	103fef1e 	bne	r2,zero,1084 <main+0x28>
		{
			IOWR(SEG7_BASE,0,azmap[i]);
			usleep(500*1000);
		}
	}
    10c8:	003fec06 	br	107c <main+0x20>

000010cc <_puts_r>:
    10cc:	defffd04 	addi	sp,sp,-12
    10d0:	dc000015 	stw	r16,0(sp)
    10d4:	2021883a 	mov	r16,r4
    10d8:	2809883a 	mov	r4,r5
    10dc:	dfc00215 	stw	ra,8(sp)
    10e0:	dc400115 	stw	r17,4(sp)
    10e4:	2823883a 	mov	r17,r5
    10e8:	00011700 	call	1170 <strlen>
    10ec:	80c00217 	ldw	r3,8(r16)
    10f0:	02000034 	movhi	r8,0
    10f4:	42046404 	addi	r8,r8,4496
    10f8:	880d883a 	mov	r6,r17
    10fc:	100f883a 	mov	r7,r2
    1100:	8009883a 	mov	r4,r16
    1104:	180b883a 	mov	r5,r3
    1108:	1a000115 	stw	r8,4(r3)
    110c:	403ee83a 	callr	r8
    1110:	047fffc4 	movi	r17,-1
    1114:	8009883a 	mov	r4,r16
    1118:	01800034 	movhi	r6,0
    111c:	31865904 	addi	r6,r6,6500
    1120:	01c00044 	movi	r7,1
    1124:	1440071e 	bne	r2,r17,1144 <_puts_r+0x78>
    1128:	00ffffc4 	movi	r3,-1
    112c:	1805883a 	mov	r2,r3
    1130:	dfc00217 	ldw	ra,8(sp)
    1134:	dc400117 	ldw	r17,4(sp)
    1138:	dc000017 	ldw	r16,0(sp)
    113c:	dec00304 	addi	sp,sp,12
    1140:	f800283a 	ret
    1144:	81400217 	ldw	r5,8(r16)
    1148:	28c00117 	ldw	r3,4(r5)
    114c:	183ee83a 	callr	r3
    1150:	0007883a 	mov	r3,zero
    1154:	147ff51e 	bne	r2,r17,112c <_puts_r+0x60>
    1158:	003ff306 	br	1128 <_puts_r+0x5c>

0000115c <puts>:
    115c:	00800034 	movhi	r2,0
    1160:	10869604 	addi	r2,r2,6744
    1164:	200b883a 	mov	r5,r4
    1168:	11000017 	ldw	r4,0(r2)
    116c:	00010cc1 	jmpi	10cc <_puts_r>

00001170 <strlen>:
    1170:	20800007 	ldb	r2,0(r4)
    1174:	10000526 	beq	r2,zero,118c <strlen+0x1c>
    1178:	2007883a 	mov	r3,r4
    117c:	18c00044 	addi	r3,r3,1
    1180:	18800007 	ldb	r2,0(r3)
    1184:	103ffd1e 	bne	r2,zero,117c <strlen+0xc>
    1188:	1905c83a 	sub	r2,r3,r4
    118c:	f800283a 	ret

00001190 <__sfvwrite_small_dev>:
    1190:	2880000b 	ldhu	r2,0(r5)
    1194:	defffa04 	addi	sp,sp,-24
    1198:	dcc00315 	stw	r19,12(sp)
    119c:	1080020c 	andi	r2,r2,8
    11a0:	dc800215 	stw	r18,8(sp)
    11a4:	dc400115 	stw	r17,4(sp)
    11a8:	dfc00515 	stw	ra,20(sp)
    11ac:	dd000415 	stw	r20,16(sp)
    11b0:	dc000015 	stw	r16,0(sp)
    11b4:	2825883a 	mov	r18,r5
    11b8:	2027883a 	mov	r19,r4
    11bc:	3023883a 	mov	r17,r6
    11c0:	10002026 	beq	r2,zero,1244 <__sfvwrite_small_dev+0xb4>
    11c4:	2940008f 	ldh	r5,2(r5)
    11c8:	28000f16 	blt	r5,zero,1208 <__sfvwrite_small_dev+0x78>
    11cc:	01c01b0e 	bge	zero,r7,123c <__sfvwrite_small_dev+0xac>
    11d0:	3821883a 	mov	r16,r7
    11d4:	05010004 	movi	r20,1024
    11d8:	00000206 	br	11e4 <__sfvwrite_small_dev+0x54>
    11dc:	0400170e 	bge	zero,r16,123c <__sfvwrite_small_dev+0xac>
    11e0:	9140008f 	ldh	r5,2(r18)
    11e4:	880d883a 	mov	r6,r17
    11e8:	9809883a 	mov	r4,r19
    11ec:	800f883a 	mov	r7,r16
    11f0:	a400010e 	bge	r20,r16,11f8 <__sfvwrite_small_dev+0x68>
    11f4:	01c10004 	movi	r7,1024
    11f8:	000124c0 	call	124c <_write_r>
    11fc:	88a3883a 	add	r17,r17,r2
    1200:	80a1c83a 	sub	r16,r16,r2
    1204:	00bff516 	blt	zero,r2,11dc <__sfvwrite_small_dev+0x4c>
    1208:	9080000b 	ldhu	r2,0(r18)
    120c:	00ffffc4 	movi	r3,-1
    1210:	10801014 	ori	r2,r2,64
    1214:	9080000d 	sth	r2,0(r18)
    1218:	1805883a 	mov	r2,r3
    121c:	dfc00517 	ldw	ra,20(sp)
    1220:	dd000417 	ldw	r20,16(sp)
    1224:	dcc00317 	ldw	r19,12(sp)
    1228:	dc800217 	ldw	r18,8(sp)
    122c:	dc400117 	ldw	r17,4(sp)
    1230:	dc000017 	ldw	r16,0(sp)
    1234:	dec00604 	addi	sp,sp,24
    1238:	f800283a 	ret
    123c:	0007883a 	mov	r3,zero
    1240:	003ff506 	br	1218 <__sfvwrite_small_dev+0x88>
    1244:	00ffffc4 	movi	r3,-1
    1248:	003ff306 	br	1218 <__sfvwrite_small_dev+0x88>

0000124c <_write_r>:
    124c:	defffd04 	addi	sp,sp,-12
    1250:	dc000015 	stw	r16,0(sp)
    1254:	04000034 	movhi	r16,0
    1258:	8406d804 	addi	r16,r16,7008
    125c:	dc400115 	stw	r17,4(sp)
    1260:	80000015 	stw	zero,0(r16)
    1264:	2023883a 	mov	r17,r4
    1268:	2809883a 	mov	r4,r5
    126c:	300b883a 	mov	r5,r6
    1270:	380d883a 	mov	r6,r7
    1274:	dfc00215 	stw	ra,8(sp)
    1278:	00014200 	call	1420 <write>
    127c:	1007883a 	mov	r3,r2
    1280:	00bfffc4 	movi	r2,-1
    1284:	18800626 	beq	r3,r2,12a0 <_write_r+0x54>
    1288:	1805883a 	mov	r2,r3
    128c:	dfc00217 	ldw	ra,8(sp)
    1290:	dc400117 	ldw	r17,4(sp)
    1294:	dc000017 	ldw	r16,0(sp)
    1298:	dec00304 	addi	sp,sp,12
    129c:	f800283a 	ret
    12a0:	80800017 	ldw	r2,0(r16)
    12a4:	103ff826 	beq	r2,zero,1288 <_write_r+0x3c>
    12a8:	88800015 	stw	r2,0(r17)
    12ac:	1805883a 	mov	r2,r3
    12b0:	dfc00217 	ldw	ra,8(sp)
    12b4:	dc400117 	ldw	r17,4(sp)
    12b8:	dc000017 	ldw	r16,0(sp)
    12bc:	dec00304 	addi	sp,sp,12
    12c0:	f800283a 	ret

000012c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    12c4:	defffe04 	addi	sp,sp,-8
    12c8:	dfc00115 	stw	ra,4(sp)
    12cc:	df000015 	stw	fp,0(sp)
    12d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    12d4:	01000034 	movhi	r4,0
    12d8:	21069904 	addi	r4,r4,6756
    12dc:	01400034 	movhi	r5,0
    12e0:	29465a04 	addi	r5,r5,6504
    12e4:	01800034 	movhi	r6,0
    12e8:	31869904 	addi	r6,r6,6756
    12ec:	00013440 	call	1344 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    12f0:	01000034 	movhi	r4,0
    12f4:	21040804 	addi	r4,r4,4128
    12f8:	01400034 	movhi	r5,0
    12fc:	29440804 	addi	r5,r5,4128
    1300:	01800034 	movhi	r6,0
    1304:	31840804 	addi	r6,r6,4128
    1308:	00013440 	call	1344 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    130c:	01000034 	movhi	r4,0
    1310:	21065704 	addi	r4,r4,6492
    1314:	01400034 	movhi	r5,0
    1318:	29465704 	addi	r5,r5,6492
    131c:	01800034 	movhi	r6,0
    1320:	31865a04 	addi	r6,r6,6504
    1324:	00013440 	call	1344 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1328:	00017800 	call	1780 <alt_dcache_flush_all>
  alt_icache_flush_all();
    132c:	000179c0 	call	179c <alt_icache_flush_all>
}
    1330:	e037883a 	mov	sp,fp
    1334:	dfc00117 	ldw	ra,4(sp)
    1338:	df000017 	ldw	fp,0(sp)
    133c:	dec00204 	addi	sp,sp,8
    1340:	f800283a 	ret

00001344 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1344:	defffc04 	addi	sp,sp,-16
    1348:	df000315 	stw	fp,12(sp)
    134c:	df000304 	addi	fp,sp,12
    1350:	e13ffd15 	stw	r4,-12(fp)
    1354:	e17ffe15 	stw	r5,-8(fp)
    1358:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    135c:	e0fffe17 	ldw	r3,-8(fp)
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	18800e26 	beq	r3,r2,13a0 <alt_load_section+0x5c>
  {
    while( to != end )
    1368:	00000a06 	br	1394 <alt_load_section+0x50>
    {
      *to++ = *from++;
    136c:	e0bffd17 	ldw	r2,-12(fp)
    1370:	10c00017 	ldw	r3,0(r2)
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	10c00015 	stw	r3,0(r2)
    137c:	e0bffe17 	ldw	r2,-8(fp)
    1380:	10800104 	addi	r2,r2,4
    1384:	e0bffe15 	stw	r2,-8(fp)
    1388:	e0bffd17 	ldw	r2,-12(fp)
    138c:	10800104 	addi	r2,r2,4
    1390:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1394:	e0fffe17 	ldw	r3,-8(fp)
    1398:	e0bfff17 	ldw	r2,-4(fp)
    139c:	18bff31e 	bne	r3,r2,136c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    13a0:	e037883a 	mov	sp,fp
    13a4:	df000017 	ldw	fp,0(sp)
    13a8:	dec00104 	addi	sp,sp,4
    13ac:	f800283a 	ret

000013b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    13b0:	defffe04 	addi	sp,sp,-8
    13b4:	dfc00115 	stw	ra,4(sp)
    13b8:	df000015 	stw	fp,0(sp)
    13bc:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    13c0:	0009883a 	mov	r4,zero
    13c4:	00015300 	call	1530 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    13c8:	00015640 	call	1564 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    13cc:	d1204317 	ldw	r4,-32500(gp)
    13d0:	d1604417 	ldw	r5,-32496(gp)
    13d4:	d1a04517 	ldw	r6,-32492(gp)
    13d8:	000105c0 	call	105c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    13dc:	e037883a 	mov	sp,fp
    13e0:	dfc00117 	ldw	ra,4(sp)
    13e4:	df000017 	ldw	fp,0(sp)
    13e8:	dec00204 	addi	sp,sp,8
    13ec:	f800283a 	ret

000013f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    13f0:	defffd04 	addi	sp,sp,-12
    13f4:	dfc00215 	stw	ra,8(sp)
    13f8:	df000115 	stw	fp,4(sp)
    13fc:	df000104 	addi	fp,sp,4
    1400:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    1404:	e13fff17 	ldw	r4,-4(fp)
    1408:	00016240 	call	1624 <alt_busy_sleep>
}
    140c:	e037883a 	mov	sp,fp
    1410:	dfc00117 	ldw	ra,4(sp)
    1414:	df000017 	ldw	fp,0(sp)
    1418:	dec00204 	addi	sp,sp,8
    141c:	f800283a 	ret

00001420 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1420:	defff904 	addi	sp,sp,-28
    1424:	dfc00615 	stw	ra,24(sp)
    1428:	df000515 	stw	fp,20(sp)
    142c:	df000504 	addi	fp,sp,20
    1430:	e13ffb15 	stw	r4,-20(fp)
    1434:	e17ffc15 	stw	r5,-16(fp)
    1438:	e1bffd15 	stw	r6,-12(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    143c:	e0bffb17 	ldw	r2,-20(fp)
    1440:	e0bfff15 	stw	r2,-4(fp)
    1444:	e0ffff17 	ldw	r3,-4(fp)
    1448:	18800060 	cmpeqi	r2,r3,1
    144c:	1000041e 	bne	r2,zero,1460 <write+0x40>
    1450:	e0ffff17 	ldw	r3,-4(fp)
    1454:	188000a0 	cmpeqi	r2,r3,2
    1458:	1000091e 	bne	r2,zero,1480 <write+0x60>
    145c:	00001006 	br	14a0 <write+0x80>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    1460:	e17ffc17 	ldw	r5,-16(fp)
    1464:	e1bffd17 	ldw	r6,-12(fp)
    1468:	01000034 	movhi	r4,0
    146c:	2106dc04 	addi	r4,r4,7024
    1470:	000f883a 	mov	r7,zero
    1474:	00015800 	call	1580 <altera_avalon_jtag_uart_write>
    1478:	e0bffe15 	stw	r2,-8(fp)
    147c:	00000e06 	br	14b8 <write+0x98>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1480:	e17ffc17 	ldw	r5,-16(fp)
    1484:	e1bffd17 	ldw	r6,-12(fp)
    1488:	01000034 	movhi	r4,0
    148c:	2106dc04 	addi	r4,r4,7024
    1490:	000f883a 	mov	r7,zero
    1494:	00015800 	call	1580 <altera_avalon_jtag_uart_write>
    1498:	e0bffe15 	stw	r2,-8(fp)
    149c:	00000606 	br	14b8 <write+0x98>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    14a0:	00014d00 	call	14d0 <alt_get_errno>
    14a4:	1007883a 	mov	r3,r2
    14a8:	00801444 	movi	r2,81
    14ac:	18800015 	stw	r2,0(r3)
        return -1;
    14b0:	00bfffc4 	movi	r2,-1
    14b4:	e0bffe15 	stw	r2,-8(fp)
    14b8:	e0bffe17 	ldw	r2,-8(fp)
    }
}
    14bc:	e037883a 	mov	sp,fp
    14c0:	dfc00117 	ldw	ra,4(sp)
    14c4:	df000017 	ldw	fp,0(sp)
    14c8:	dec00204 	addi	sp,sp,8
    14cc:	f800283a 	ret

000014d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    14d0:	defffd04 	addi	sp,sp,-12
    14d4:	dfc00215 	stw	ra,8(sp)
    14d8:	df000115 	stw	fp,4(sp)
    14dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    14e0:	00800034 	movhi	r2,0
    14e4:	10869804 	addi	r2,r2,6752
    14e8:	10800017 	ldw	r2,0(r2)
    14ec:	1005003a 	cmpeq	r2,r2,zero
    14f0:	1000061e 	bne	r2,zero,150c <alt_get_errno+0x3c>
    14f4:	00800034 	movhi	r2,0
    14f8:	10869804 	addi	r2,r2,6752
    14fc:	10800017 	ldw	r2,0(r2)
    1500:	103ee83a 	callr	r2
    1504:	e0bfff15 	stw	r2,-4(fp)
    1508:	00000306 	br	1518 <alt_get_errno+0x48>
    150c:	00800034 	movhi	r2,0
    1510:	1086d804 	addi	r2,r2,7008
    1514:	e0bfff15 	stw	r2,-4(fp)
    1518:	e0bfff17 	ldw	r2,-4(fp)
}
    151c:	e037883a 	mov	sp,fp
    1520:	dfc00117 	ldw	ra,4(sp)
    1524:	df000017 	ldw	fp,0(sp)
    1528:	dec00204 	addi	sp,sp,8
    152c:	f800283a 	ret

00001530 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1530:	defffd04 	addi	sp,sp,-12
    1534:	dfc00215 	stw	ra,8(sp)
    1538:	df000115 	stw	fp,4(sp)
    153c:	df000104 	addi	fp,sp,4
    1540:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    1544:	00017b80 	call	17b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1548:	00800044 	movi	r2,1
    154c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1550:	e037883a 	mov	sp,fp
    1554:	dfc00117 	ldw	ra,4(sp)
    1558:	df000017 	ldw	fp,0(sp)
    155c:	dec00204 	addi	sp,sp,8
    1560:	f800283a 	ret

00001564 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1564:	deffff04 	addi	sp,sp,-4
    1568:	df000015 	stw	fp,0(sp)
    156c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    1570:	e037883a 	mov	sp,fp
    1574:	df000017 	ldw	fp,0(sp)
    1578:	dec00104 	addi	sp,sp,4
    157c:	f800283a 	ret

00001580 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1580:	defff904 	addi	sp,sp,-28
    1584:	df000615 	stw	fp,24(sp)
    1588:	df000604 	addi	fp,sp,24
    158c:	e13ffc15 	stw	r4,-16(fp)
    1590:	e17ffd15 	stw	r5,-12(fp)
    1594:	e1bffe15 	stw	r6,-8(fp)
    1598:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    159c:	e0bffc17 	ldw	r2,-16(fp)
    15a0:	10800017 	ldw	r2,0(r2)
    15a4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    15a8:	e0bffe17 	ldw	r2,-8(fp)
    15ac:	1007883a 	mov	r3,r2
    15b0:	e0bffd17 	ldw	r2,-12(fp)
    15b4:	10c5883a 	add	r2,r2,r3
    15b8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    15bc:	00001106 	br	1604 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    15c0:	e0bffb17 	ldw	r2,-20(fp)
    15c4:	10800104 	addi	r2,r2,4
    15c8:	10800037 	ldwio	r2,0(r2)
    15cc:	10bfffec 	andhi	r2,r2,65535
    15d0:	1005003a 	cmpeq	r2,r2,zero
    15d4:	10000b1e 	bne	r2,zero,1604 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    15d8:	e13ffb17 	ldw	r4,-20(fp)
    15dc:	e0bffd17 	ldw	r2,-12(fp)
    15e0:	10800003 	ldbu	r2,0(r2)
    15e4:	10c03fcc 	andi	r3,r2,255
    15e8:	18c0201c 	xori	r3,r3,128
    15ec:	18ffe004 	addi	r3,r3,-128
    15f0:	e0bffd17 	ldw	r2,-12(fp)
    15f4:	10800044 	addi	r2,r2,1
    15f8:	e0bffd15 	stw	r2,-12(fp)
    15fc:	2005883a 	mov	r2,r4
    1600:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1604:	e0fffd17 	ldw	r3,-12(fp)
    1608:	e0bffa17 	ldw	r2,-24(fp)
    160c:	18bfec36 	bltu	r3,r2,15c0 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    1610:	e0bffe17 	ldw	r2,-8(fp)
}
    1614:	e037883a 	mov	sp,fp
    1618:	df000017 	ldw	fp,0(sp)
    161c:	dec00104 	addi	sp,sp,4
    1620:	f800283a 	ret

00001624 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1624:	defffa04 	addi	sp,sp,-24
    1628:	dfc00515 	stw	ra,20(sp)
    162c:	df000415 	stw	fp,16(sp)
    1630:	df000404 	addi	fp,sp,16
    1634:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    1638:	00800244 	movi	r2,9
    163c:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	014003f4 	movhi	r5,15
    1648:	29509004 	addi	r5,r5,16960
    164c:	00019240 	call	1924 <__mulsi3>
    1650:	100b883a 	mov	r5,r2
    1654:	0100bef4 	movhi	r4,763
    1658:	213c2004 	addi	r4,r4,-3968
    165c:	00019140 	call	1914 <__udivsi3>
    1660:	100b883a 	mov	r5,r2
    1664:	01200034 	movhi	r4,32768
    1668:	213fffc4 	addi	r4,r4,-1
    166c:	00019140 	call	1914 <__udivsi3>
    1670:	100b883a 	mov	r5,r2
    1674:	e13fff17 	ldw	r4,-4(fp)
    1678:	00019140 	call	1914 <__udivsi3>
    167c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1680:	e0bffd17 	ldw	r2,-12(fp)
    1684:	1005003a 	cmpeq	r2,r2,zero
    1688:	10002a1e 	bne	r2,zero,1734 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
    168c:	e03ffe15 	stw	zero,-8(fp)
    1690:	00001706 	br	16f0 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1694:	00a00034 	movhi	r2,32768
    1698:	10bfffc4 	addi	r2,r2,-1
    169c:	10bfffc4 	addi	r2,r2,-1
    16a0:	103ffe1e 	bne	r2,zero,169c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    16a4:	e13ffc17 	ldw	r4,-16(fp)
    16a8:	014003f4 	movhi	r5,15
    16ac:	29509004 	addi	r5,r5,16960
    16b0:	00019240 	call	1924 <__mulsi3>
    16b4:	100b883a 	mov	r5,r2
    16b8:	0100bef4 	movhi	r4,763
    16bc:	213c2004 	addi	r4,r4,-3968
    16c0:	00019140 	call	1914 <__udivsi3>
    16c4:	100b883a 	mov	r5,r2
    16c8:	01200034 	movhi	r4,32768
    16cc:	213fffc4 	addi	r4,r4,-1
    16d0:	00019140 	call	1914 <__udivsi3>
    16d4:	1007883a 	mov	r3,r2
    16d8:	e0bfff17 	ldw	r2,-4(fp)
    16dc:	10c5c83a 	sub	r2,r2,r3
    16e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    16e4:	e0bffe17 	ldw	r2,-8(fp)
    16e8:	10800044 	addi	r2,r2,1
    16ec:	e0bffe15 	stw	r2,-8(fp)
    16f0:	e0fffe17 	ldw	r3,-8(fp)
    16f4:	e0bffd17 	ldw	r2,-12(fp)
    16f8:	18bfe616 	blt	r3,r2,1694 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    16fc:	e13ffc17 	ldw	r4,-16(fp)
    1700:	014003f4 	movhi	r5,15
    1704:	29509004 	addi	r5,r5,16960
    1708:	00019240 	call	1924 <__mulsi3>
    170c:	100b883a 	mov	r5,r2
    1710:	0100bef4 	movhi	r4,763
    1714:	213c2004 	addi	r4,r4,-3968
    1718:	00019140 	call	1914 <__udivsi3>
    171c:	1009883a 	mov	r4,r2
    1720:	e17fff17 	ldw	r5,-4(fp)
    1724:	00019240 	call	1924 <__mulsi3>
    1728:	10bfffc4 	addi	r2,r2,-1
    172c:	103ffe1e 	bne	r2,zero,1728 <alt_busy_sleep+0x104>
    1730:	00000d06 	br	1768 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1734:	e13ffc17 	ldw	r4,-16(fp)
    1738:	014003f4 	movhi	r5,15
    173c:	29509004 	addi	r5,r5,16960
    1740:	00019240 	call	1924 <__mulsi3>
    1744:	100b883a 	mov	r5,r2
    1748:	0100bef4 	movhi	r4,763
    174c:	213c2004 	addi	r4,r4,-3968
    1750:	00019140 	call	1914 <__udivsi3>
    1754:	1009883a 	mov	r4,r2
    1758:	e17fff17 	ldw	r5,-4(fp)
    175c:	00019240 	call	1924 <__mulsi3>
    1760:	10bfffc4 	addi	r2,r2,-1
    1764:	00bffe16 	blt	zero,r2,1760 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1768:	0005883a 	mov	r2,zero
}
    176c:	e037883a 	mov	sp,fp
    1770:	dfc00117 	ldw	ra,4(sp)
    1774:	df000017 	ldw	fp,0(sp)
    1778:	dec00204 	addi	sp,sp,8
    177c:	f800283a 	ret

00001780 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1780:	deffff04 	addi	sp,sp,-4
    1784:	df000015 	stw	fp,0(sp)
    1788:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    178c:	e037883a 	mov	sp,fp
    1790:	df000017 	ldw	fp,0(sp)
    1794:	dec00104 	addi	sp,sp,4
    1798:	f800283a 	ret

0000179c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    179c:	deffff04 	addi	sp,sp,-4
    17a0:	df000015 	stw	fp,0(sp)
    17a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    17a8:	e037883a 	mov	sp,fp
    17ac:	df000017 	ldw	fp,0(sp)
    17b0:	dec00104 	addi	sp,sp,4
    17b4:	f800283a 	ret

000017b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    17b8:	deffff04 	addi	sp,sp,-4
    17bc:	df000015 	stw	fp,0(sp)
    17c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    17c4:	000170fa 	wrctl	ienable,zero
}
    17c8:	e037883a 	mov	sp,fp
    17cc:	df000017 	ldw	fp,0(sp)
    17d0:	dec00104 	addi	sp,sp,4
    17d4:	f800283a 	ret

000017d8 <udivmodsi4>:
    17d8:	29001b2e 	bgeu	r5,r4,1848 <udivmodsi4+0x70>
    17dc:	28001a16 	blt	r5,zero,1848 <udivmodsi4+0x70>
    17e0:	00800044 	movi	r2,1
    17e4:	0007883a 	mov	r3,zero
    17e8:	01c007c4 	movi	r7,31
    17ec:	00000306 	br	17fc <udivmodsi4+0x24>
    17f0:	19c01326 	beq	r3,r7,1840 <udivmodsi4+0x68>
    17f4:	18c00044 	addi	r3,r3,1
    17f8:	28000416 	blt	r5,zero,180c <udivmodsi4+0x34>
    17fc:	294b883a 	add	r5,r5,r5
    1800:	1085883a 	add	r2,r2,r2
    1804:	293ffa36 	bltu	r5,r4,17f0 <udivmodsi4+0x18>
    1808:	10000d26 	beq	r2,zero,1840 <udivmodsi4+0x68>
    180c:	0007883a 	mov	r3,zero
    1810:	21400236 	bltu	r4,r5,181c <udivmodsi4+0x44>
    1814:	2149c83a 	sub	r4,r4,r5
    1818:	1886b03a 	or	r3,r3,r2
    181c:	1004d07a 	srli	r2,r2,1
    1820:	280ad07a 	srli	r5,r5,1
    1824:	103ffa1e 	bne	r2,zero,1810 <udivmodsi4+0x38>
    1828:	30000226 	beq	r6,zero,1834 <udivmodsi4+0x5c>
    182c:	2005883a 	mov	r2,r4
    1830:	f800283a 	ret
    1834:	1809883a 	mov	r4,r3
    1838:	2005883a 	mov	r2,r4
    183c:	f800283a 	ret
    1840:	0007883a 	mov	r3,zero
    1844:	003ff806 	br	1828 <udivmodsi4+0x50>
    1848:	00800044 	movi	r2,1
    184c:	0007883a 	mov	r3,zero
    1850:	003fef06 	br	1810 <udivmodsi4+0x38>

00001854 <__divsi3>:
    1854:	defffe04 	addi	sp,sp,-8
    1858:	dc000015 	stw	r16,0(sp)
    185c:	dfc00115 	stw	ra,4(sp)
    1860:	0021883a 	mov	r16,zero
    1864:	20000c16 	blt	r4,zero,1898 <__divsi3+0x44>
    1868:	000d883a 	mov	r6,zero
    186c:	28000e16 	blt	r5,zero,18a8 <__divsi3+0x54>
    1870:	00017d80 	call	17d8 <udivmodsi4>
    1874:	1007883a 	mov	r3,r2
    1878:	8005003a 	cmpeq	r2,r16,zero
    187c:	1000011e 	bne	r2,zero,1884 <__divsi3+0x30>
    1880:	00c7c83a 	sub	r3,zero,r3
    1884:	1805883a 	mov	r2,r3
    1888:	dfc00117 	ldw	ra,4(sp)
    188c:	dc000017 	ldw	r16,0(sp)
    1890:	dec00204 	addi	sp,sp,8
    1894:	f800283a 	ret
    1898:	0109c83a 	sub	r4,zero,r4
    189c:	04000044 	movi	r16,1
    18a0:	000d883a 	mov	r6,zero
    18a4:	283ff20e 	bge	r5,zero,1870 <__divsi3+0x1c>
    18a8:	014bc83a 	sub	r5,zero,r5
    18ac:	8021003a 	cmpeq	r16,r16,zero
    18b0:	003fef06 	br	1870 <__divsi3+0x1c>

000018b4 <__modsi3>:
    18b4:	deffff04 	addi	sp,sp,-4
    18b8:	dfc00015 	stw	ra,0(sp)
    18bc:	01800044 	movi	r6,1
    18c0:	2807883a 	mov	r3,r5
    18c4:	20000416 	blt	r4,zero,18d8 <__modsi3+0x24>
    18c8:	28000c16 	blt	r5,zero,18fc <__modsi3+0x48>
    18cc:	dfc00017 	ldw	ra,0(sp)
    18d0:	dec00104 	addi	sp,sp,4
    18d4:	00017d81 	jmpi	17d8 <udivmodsi4>
    18d8:	0109c83a 	sub	r4,zero,r4
    18dc:	28000b16 	blt	r5,zero,190c <__modsi3+0x58>
    18e0:	180b883a 	mov	r5,r3
    18e4:	01800044 	movi	r6,1
    18e8:	00017d80 	call	17d8 <udivmodsi4>
    18ec:	0085c83a 	sub	r2,zero,r2
    18f0:	dfc00017 	ldw	ra,0(sp)
    18f4:	dec00104 	addi	sp,sp,4
    18f8:	f800283a 	ret
    18fc:	014bc83a 	sub	r5,zero,r5
    1900:	dfc00017 	ldw	ra,0(sp)
    1904:	dec00104 	addi	sp,sp,4
    1908:	00017d81 	jmpi	17d8 <udivmodsi4>
    190c:	0147c83a 	sub	r3,zero,r5
    1910:	003ff306 	br	18e0 <__modsi3+0x2c>

00001914 <__udivsi3>:
    1914:	000d883a 	mov	r6,zero
    1918:	00017d81 	jmpi	17d8 <udivmodsi4>

0000191c <__umodsi3>:
    191c:	01800044 	movi	r6,1
    1920:	00017d81 	jmpi	17d8 <udivmodsi4>

00001924 <__mulsi3>:
    1924:	20000a26 	beq	r4,zero,1950 <__mulsi3+0x2c>
    1928:	0007883a 	mov	r3,zero
    192c:	2080004c 	andi	r2,r4,1
    1930:	1005003a 	cmpeq	r2,r2,zero
    1934:	2008d07a 	srli	r4,r4,1
    1938:	1000011e 	bne	r2,zero,1940 <__mulsi3+0x1c>
    193c:	1947883a 	add	r3,r3,r5
    1940:	294b883a 	add	r5,r5,r5
    1944:	203ff91e 	bne	r4,zero,192c <__mulsi3+0x8>
    1948:	1805883a 	mov	r2,r3
    194c:	f800283a 	ret
    1950:	0007883a 	mov	r3,zero
    1954:	1805883a 	mov	r2,r3
    1958:	f800283a 	ret
