
flash.elf:     file format elf32-littlenios2
flash.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000e0cc memsz 0x0000e3b0 flags rwx
    LOAD off    0x00010000 vaddr 0x01001000 paddr 0x01001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01001000  01001000  00010000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d044  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000036c  0000d1f8  0000d1f8  0000e1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b88  0000d564  0000d564  0000e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e4  0000e0ec  0000e0ec  0000f0ec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bf0  00000000  00000000  00010028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013a8  00000000  00000000  00010c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000233a2  00000000  00000000  00011fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000776e  00000000  00000000  00035362  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012ef4  00000000  00000000  0003cad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000198c  00000000  00000000  0004f9c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021da  00000000  00000000  00051350  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bff2  00000000  00000000  0005352a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005f51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000970  00000000  00000000  0005f540  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062cd3  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00062cd6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062cdb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00062cdc  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  00062cdd  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  00062ce3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  00062ce9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00062cef  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00062cf7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007028d  00000000  00000000  00062d30  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01001000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000d1f8 l    d  .rodata	00000000 .rodata
0000d564 l    d  .rwdata	00000000 .rwdata
0000e0ec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000058c l     F .text	00000058 __sprint_r
0000d298 l     O .rodata	00000010 blanks.3452
0000d288 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000025f0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003fec l     F .text	00000058 std
000040f8 l     F .text	00000008 __fp_lock
00004100 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000d564 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000e0b8 l     O .rwdata	00000004 charset
0000d2cc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0000d414 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000081f4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009320 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009b94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009bf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009dc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00009ee4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a034 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a260 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000e0e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a4fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000df20 l     O .rwdata	000000c8 epcs
0000dfe8 l     O .rwdata	000000c4 uart_0
0000a5e0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000a6a4 l     F .text	00000288 alt_epcs_flash_query
0000a66c l     F .text	00000038 alt_flash_device_register
0000a92c l     F .text	00000108 alt_epcs_flash_memcmp
0000adb4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000b1bc l     F .text	0000009c altera_avalon_uart_irq
0000b258 l     F .text	000000e0 altera_avalon_uart_rxirq
0000b338 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000b724 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000b94c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0000bb04 l     F .text	00000038 epcs_await_wip_released
0000bb3c l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c134 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c5bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c6f8 l     F .text	000000dc alt_file_locked
0000c95c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cfe0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000d194 l     F .text	00000040 alt_sim_halt
00005d10 g     F .text	00000094 _mprec_log10
0000acb4 g     F .text	00000090 alt_epcs_flash_get_info
00005dfc g     F .text	00000088 __any_on
00007508 g     F .text	00000070 _isatty_r
0000d3ec g     O .rodata	00000028 __mprec_tinytens
0000a094 g     F .text	0000006c alt_main
00000464 g     F .text	000000a0 _puts_r
0000e140 g     O .bss	00000100 alt_irq
00007578 g     F .text	00000078 _lseek_r
00008d14 g     F .text	00000088 __eqdf2
0000e3d0 g       *ABS*	00000000 __alt_heap_start
000003ec g     F .text	00000044 printf
00006fd4 g     F .text	00000068 __sseek
00004054 g     F .text	000000a4 __sinit
00004d2c g     F .text	00000084 _setlocale_r
00004154 g     F .text	00000068 __sfmoreglue
0000a120 g     F .text	00000020 __malloc_unlock
00005824 g     F .text	000000e0 memmove
00004144 g     F .text	00000010 _cleanup
00005e84 g     F .text	000000bc _Balloc
00008e24 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000ba0c g     F .text	000000f8 epcs_sector_erase
01001000 g     F .entry	00000000 __reset
00007494 g     F .text	00000074 _fstat_r
0000e104 g     O .bss	00000004 errno
0000e10c g     O .bss	00000004 alt_argv
000160ac g       *ABS*	00000000 _gp
0000dda0 g     O .rwdata	00000180 alt_fd_list
0000bd10 g     F .text	00000064 epcs_write_status_register
0000c25c g     F .text	00000094 alt_find_dev
00005784 g     F .text	000000a0 memcpy
00004138 g     F .text	0000000c _cleanup_r
00008fbc g     F .text	000000f8 __floatsidf
0000c680 g     F .text	00000078 alt_io_redirect
00008f34 g     F .text	00000088 __ltdf2
0000d1f8 g       *ABS*	00000000 __DTOR_END__
00000504 g     F .text	00000014 puts
0000ae48 g     F .text	0000011c alt_epcs_flash_write_block
00005c60 g     F .text	000000b0 __ratio
00000000  w      *UND*	00000000 malloc
00000430 g     F .text	00000034 _printf_r
0000945c g     F .text	00000008 __udivsi3
00009e24 g     F .text	000000c0 isatty
0000d2fc g     O .rodata	000000c8 __mprec_tens
00004d08 g     F .text	00000008 __locale_charset
0000e0f8 g     O .bss	00000004 __malloc_top_pad
0000e0b4 g     O .rwdata	00000004 __mb_cur_max
00004d10 g     F .text	0000000c _localeconv_r
0000657c g     F .text	0000003c __i2b
000046ec g     F .text	0000049c __sfvwrite_r
00006f5c g     F .text	00000070 _sbrk_r
000075f0 g     F .text	00000078 _read_r
0000d964 g     O .rwdata	0000000c __lc_ctype
0000e0d4 g     O .rwdata	00000004 alt_max_fd
00009898 g     F .text	00000138 __unpack_d
00007370 g     F .text	00000110 _fclose_r
00003fb8 g     F .text	00000034 fflush
0000e0fc g     O .bss	00000004 __malloc_max_sbrked_mem
00008684 g     F .text	00000074 __adddf3
0000ad44 g     F .text	00000070 alt_epcs_flash_erase_block
00005b40 g     F .text	00000120 __b2d
00007c44 g     F .text	000005b0 __umoddi3
00009f44 g     F .text	000000f0 lseek
0000e0b0 g     O .rwdata	00000004 _global_impure_ptr
0000c028 g     F .text	00000058 epcs_exit_4_bytes_mode
000068f8 g     F .text	000005f4 _realloc_r
0000e3d0 g       *ABS*	00000000 __bss_end
0000c4c4 g     F .text	000000f8 alt_iic_isr_register
00007668 g     F .text	000005dc __udivdi3
0000d3c4 g     O .rodata	00000028 __mprec_bigtens
000067d8 g     F .text	00000120 __s2b
0000918c g     F .text	00000194 __floatunsidf
00005a60 g     F .text	00000060 __mcmp
0000b0f4 g     F .text	000000c8 altera_avalon_uart_init
00004120 g     F .text	00000018 __fp_lock_all
0000c47c g     F .text	00000048 alt_ic_irq_enabled
0000e114 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000dd78 g     O .rwdata	00000028 alt_dev_null
0000592c g     F .text	00000070 __hi0bits
000090b4 g     F .text	000000d8 __fixdfsi
0000e0cc g     O .rwdata	00000008 alt_dev_list
0000a3dc g     F .text	00000120 write
00009cf0 g     F .text	000000d4 fstat
000066b8 g     F .text	00000120 __pow5mult
0000e0ec g     O .bss	00000004 __nlocale_changed
00009464 g     F .text	00000008 __umodsi3
0000bee4 g     F .text	0000006c epcs_read_electronic_signature
0000e3d0 g       *ABS*	00000000 end
0000b784 g     F .text	000001c8 altera_avalon_uart_write
0000d1f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000b054 g     F .text	00000058 altera_avalon_uart_write_fd
00009504 g     F .text	00000080 __clzsi2
0000b0ac g     F .text	00000048 altera_avalon_uart_close_fd
00004044 g     F .text	00000004 __sfp_lock_acquire
000056a0 g     F .text	000000e4 memchr
000005e4 g     F .text	00001eac ___vfprintf_internal_r
000043d8 g     F .text	00000314 _free_r
0000cfe4 g     F .text	000001b0 __call_exitprocs
0000e0f0 g     O .bss	00000004 __mlocale_changed
0000e0c0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	00000048 _start
00006248 g     F .text	0000014c __lshift
0000c9dc g     F .text	00000238 alt_avalon_spi_command
0000a140 g     F .text	00000120 read
0000a590 g     F .text	00000050 alt_sys_init
0000ceac g     F .text	00000134 __register_exitproc
00006394 g     F .text	000001e8 __multiply
0000e118 g     O .bss	00000028 __malloc_current_mallinfo
00005f40 g     F .text	0000017c __d2b
0000b9ac g     F .text	00000060 epcs_read_status_register
0000cd34 g     F .text	000000b8 alt_get_fd
000099d0 g     F .text	000000c8 __fpcmp_parts_d
00007300 g     F .text	00000070 _close_r
0000bf50 g     F .text	00000080 epcs_read_device_id
0000ce38 g     F .text	00000074 memcmp
0000e3d0 g       *ABS*	00000000 __alt_stack_base
000024b4 g     F .text	0000013c __swsetup_r
00008abc g     F .text	00000258 __divdf3
000041bc g     F .text	000000f0 __sfp
00005da4 g     F .text	00000058 __copybits
0000d970 g     O .rwdata	00000408 __malloc_av_
00004050 g     F .text	00000004 __sinit_lock_release
000086f8 g     F .text	000003c4 __muldf3
000070b8 g     F .text	00000060 __sread
0000cc14 g     F .text	00000120 alt_find_file
0000c080 g     F .text	000000b4 alt_dev_llist_insert
0000a100 g     F .text	00000020 __malloc_lock
0000a320 g     F .text	000000bc sbrk
00003dbc g     F .text	000001fc _fflush_r
0000724c g     F .text	000000b4 _calloc_r
0000e0dc g     O .rwdata	00000008 alt_flash_dev_list
0000e0ec g       *ABS*	00000000 __bss_start
00000354 g     F .text	00000098 memset
000001fc g     F .text	00000158 main
0000e110 g     O .bss	00000004 alt_envp
0000e100 g     O .bss	00000004 __malloc_max_total_mem
00006fcc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00007480 g     F .text	00000014 fclose
0000e240 g     O .bss	00000190 _atexit0
00002808 g     F .text	000015b4 _dtoa_r
00004f60 g     F .text	00000740 _malloc_r
0000e0d8 g     O .rwdata	00000004 alt_errno
00004c50 g     F .text	000000b8 _fwalk
0000939c g     F .text	00000060 __divsi3
0000d420 g     O .rodata	00000014 __thenan_df
000042ac g     F .text	0000012c _malloc_trim_r
0000d1f8 g       *ABS*	00000000 __CTOR_END__
0000aa34 g     F .text	00000280 alt_epcs_flash_write
00007118 g     F .text	000000bc strcmp
0000d1f8 g       *ABS*	00000000 __DTOR_LIST__
00008d9c g     F .text	00000088 __nedf2
0000a55c g     F .text	00000034 alt_irq_init
0000a2c0 g     F .text	00000060 alt_release_fd
0000d434 g     O .rodata	00000100 __clz_tab
0000e0f4 g     O .bss	00000004 _PathLocale
0000cdec g     F .text	00000014 atexit
000071d4 g     F .text	00000078 _write_r
00004db0 g     F .text	0000001c setlocale
0000e0ac g     O .rwdata	00000004 _impure_ptr
0000e108 g     O .bss	00000004 alt_argc
0000c1f8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005ac0 g     F .text	00000080 __ulp
00006eec g     F .text	00000040 __isinfd
00004108 g     F .text	00000018 __fp_unlock_all
0000e0c4 g     O .rwdata	00000008 alt_fs_list
00004d1c g     F .text	00000010 localeconv
0000bb74 g     F .text	0000014c epcs_read_buffer
0000a618 g     F .text	00000054 alt_epcs_flash_init
0000c2f0 g     F .text	00000050 alt_ic_isr_register
0000e0ec g       *ABS*	00000000 _edata
0000affc g     F .text	00000058 altera_avalon_uart_read_fd
0000e3d0 g       *ABS*	00000000 _end
00009c20 g     F .text	0000007c alt_flash_open_dev
0000c3dc g     F .text	000000a0 alt_ic_irq_disable
0000bfd0 g     F .text	00000058 epcs_enter_4_bytes_mode
0000703c g     F .text	0000007c __swrite
0000e0bc g     O .rwdata	00000004 __malloc_trim_threshold
0000c9bc g     F .text	00000020 altera_nios2_qsys_irq_init
0000ce00 g     F .text	00000038 exit
00004b88 g     F .text	000000c8 _fwalk_reent
000060bc g     F .text	0000018c __mdiff
00009c9c g     F .text	00000054 alt_flash_close_dev
000093fc g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004048 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b494 g     F .text	00000060 altera_avalon_uart_close
0000d1d4 g     F .text	00000020 _exit
00006f2c g     F .text	00000030 __isnand
0000946c g     F .text	00000098 __muldi3
00004dcc g     F .text	00000194 __smakebuf_r
00000518 g     F .text	00000074 strlen
0000bcc0 g     F .text	00000050 epcs_write_enable
0000c7d4 g     F .text	00000188 open
00008eac g     F .text	00000088 __gedf2
0000e0e8 g     O .rwdata	00000004 alt_priority_mask
0000c340 g     F .text	0000009c alt_ic_irq_enable
00002490 g     F .text	00000024 __vfprintf_internal
01001000 g       *ABS*	00000000 __alt_mem_epcs
0000b4f4 g     F .text	00000230 altera_avalon_uart_read
00008604 g     F .text	00000080 __subdf3
0000af64 g     F .text	00000098 alt_epcs_flash_read
0000599c g     F .text	000000c4 __lo0bits
0000c194 g     F .text	00000064 _do_ctors
00009a98 g     F .text	000000fc close
00009584 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0000404c g     F .text	00000004 __sinit_lock_acquire
0000bd74 g     F .text	00000170 epcs_write_buffer
000065b8 g     F .text	00000100 __multadd
00005904 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18f85004 	addi	r3,r3,-7872
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18f85004 	addi	r3,r3,-7872
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6982b14 	ori	gp,gp,24748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d8:	10b83b14 	ori	r2,r2,57580

    movhi r3, %hi(__bss_end)
     1dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1e0:	18f8f414 	ori	r3,r3,58320

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	000a0940 	call	a094 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <alt_after_alt_main>

000001fc <main>:
#include <string.h>
#include "sys/alt_flash.h"
#include "alt_types.h"
#define BUF_SIZE 1024

int main() {
     1fc:	defdf304 	addi	sp,sp,-2100
     200:	dfc20c15 	stw	ra,2096(sp)
     204:	df020b15 	stw	fp,2092(sp)
     208:	df020b04 	addi	fp,sp,2092

	int ret_code,i;
	char source[BUF_SIZE];
	char dest[BUF_SIZE];
	/* Initialize the source buffer to all 0xAA */
	memset(source, 0xAA, BUF_SIZE);
     20c:	e13e0004 	addi	r4,fp,-2048
     210:	01402a84 	movi	r5,170
     214:	01810004 	movi	r6,1024
     218:	00003540 	call	354 <memset>
	fd = alt_flash_open_dev("/dev/epcs");
     21c:	01000074 	movhi	r4,1
     220:	21347e04 	addi	r4,r4,-11784
     224:	0009c200 	call	9c20 <alt_flash_open_dev>
     228:	e0bdff15 	stw	r2,-2052(fp)
	if (fd != NULL) {
     22c:	e0bdff17 	ldw	r2,-2052(fp)
     230:	1005003a 	cmpeq	r2,r2,zero
     234:	10003e1e 	bne	r2,zero,330 <main+0x134>
		alt_epcs_flash_erase_block(fd, 0x1e0000);
     238:	e13dff17 	ldw	r4,-2052(fp)
     23c:	014007b4 	movhi	r5,30
     240:	000ad440 	call	ad44 <alt_epcs_flash_erase_block>
     244:	e0bdff17 	ldw	r2,-2052(fp)
     248:	e0bdf915 	stw	r2,-2076(fp)
     24c:	008007b4 	movhi	r2,30
     250:	e0bdfa15 	stw	r2,-2072(fp)
     254:	e0be0004 	addi	r2,fp,-2048
     258:	e0bdfb15 	stw	r2,-2068(fp)
     25c:	00810004 	movi	r2,1024
     260:	e0bdfc15 	stw	r2,-2064(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
     264:	e0bdf917 	ldw	r2,-2076(fp)
     268:	10800517 	ldw	r2,20(r2)
     26c:	e13df917 	ldw	r4,-2076(fp)
     270:	e17dfa17 	ldw	r5,-2072(fp)
     274:	e1bdfb17 	ldw	r6,-2068(fp)
     278:	e1fdfc17 	ldw	r7,-2064(fp)
     27c:	103ee83a 	callr	r2
		ret_code = alt_write_flash(fd, 0x1e0000, source, BUF_SIZE);
     280:	e0bdfe15 	stw	r2,-2056(fp)
		if (ret_code == 0) {
     284:	e0bdfe17 	ldw	r2,-2056(fp)
     288:	1004c03a 	cmpne	r2,r2,zero
     28c:	1000251e 	bne	r2,zero,324 <main+0x128>
     290:	e0bdff17 	ldw	r2,-2052(fp)
     294:	e0bdf515 	stw	r2,-2092(fp)
     298:	008007b4 	movhi	r2,30
     29c:	e0bdf615 	stw	r2,-2088(fp)
     2a0:	e0bf0004 	addi	r2,fp,-1024
     2a4:	e0bdf715 	stw	r2,-2084(fp)
     2a8:	00810004 	movi	r2,1024
     2ac:	e0bdf815 	stw	r2,-2080(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
     2b0:	e0bdf517 	ldw	r2,-2092(fp)
     2b4:	10800617 	ldw	r2,24(r2)
     2b8:	e13df517 	ldw	r4,-2092(fp)
     2bc:	e17df617 	ldw	r5,-2088(fp)
     2c0:	e1bdf717 	ldw	r6,-2084(fp)
     2c4:	e1fdf817 	ldw	r7,-2080(fp)
     2c8:	103ee83a 	callr	r2
			ret_code = alt_read_flash(fd, 0x1e0000, dest, BUF_SIZE);
     2cc:	e0bdfe15 	stw	r2,-2056(fp)
			if (ret_code == 0) {
     2d0:	e0bdfe17 	ldw	r2,-2056(fp)
     2d4:	1004c03a 	cmpne	r2,r2,zero
     2d8:	1000121e 	bne	r2,zero,324 <main+0x128>
				/*
				 * Success.
				 * At this point, the flash is all 0xAA and we
				 * have read that all back to dest
				 */
				for(i=0;i<BUF_SIZE;i++)
     2dc:	e03dfd15 	stw	zero,-2060(fp)
     2e0:	00000d06 	br	318 <main+0x11c>
				{
					printf("%X\n",dest[i]);
     2e4:	e0fdfd17 	ldw	r3,-2060(fp)
     2e8:	e0bf0004 	addi	r2,fp,-1024
     2ec:	10c5883a 	add	r2,r2,r3
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	11403fcc 	andi	r5,r2,255
     2f8:	2940201c 	xori	r5,r5,128
     2fc:	297fe004 	addi	r5,r5,-128
     300:	01000074 	movhi	r4,1
     304:	21348104 	addi	r4,r4,-11772
     308:	00003ec0 	call	3ec <printf>
				/*
				 * Success.
				 * At this point, the flash is all 0xAA and we
				 * have read that all back to dest
				 */
				for(i=0;i<BUF_SIZE;i++)
     30c:	e0bdfd17 	ldw	r2,-2060(fp)
     310:	10800044 	addi	r2,r2,1
     314:	e0bdfd15 	stw	r2,-2060(fp)
     318:	e0bdfd17 	ldw	r2,-2060(fp)
     31c:	10810010 	cmplti	r2,r2,1024
     320:	103ff01e 	bne	r2,zero,2e4 <main+0xe8>
				{
					printf("%X\n",dest[i]);
				}
			}
		}
		alt_flash_close_dev(fd);
     324:	e13dff17 	ldw	r4,-2052(fp)
     328:	0009c9c0 	call	9c9c <alt_flash_close_dev>
     32c:	00000306 	br	33c <main+0x140>
	} else {
		printf("Cannot open flash device\n");
     330:	01000074 	movhi	r4,1
     334:	21348204 	addi	r4,r4,-11768
     338:	00005040 	call	504 <puts>
	}
	return 0;
     33c:	0005883a 	mov	r2,zero
}
     340:	e037883a 	mov	sp,fp
     344:	dfc00117 	ldw	ra,4(sp)
     348:	df000017 	ldw	fp,0(sp)
     34c:	dec00204 	addi	sp,sp,8
     350:	f800283a 	ret

00000354 <memset>:
     354:	008000c4 	movi	r2,3
     358:	29403fcc 	andi	r5,r5,255
     35c:	2007883a 	mov	r3,r4
     360:	1180022e 	bgeu	r2,r6,36c <memset+0x18>
     364:	2084703a 	and	r2,r4,r2
     368:	10000826 	beq	r2,zero,38c <memset+0x38>
     36c:	30000526 	beq	r6,zero,384 <memset+0x30>
     370:	2805883a 	mov	r2,r5
     374:	30cd883a 	add	r6,r6,r3
     378:	18800005 	stb	r2,0(r3)
     37c:	18c00044 	addi	r3,r3,1
     380:	19bffd1e 	bne	r3,r6,378 <memset+0x24>
     384:	2005883a 	mov	r2,r4
     388:	f800283a 	ret
     38c:	2804923a 	slli	r2,r5,8
     390:	020003c4 	movi	r8,15
     394:	200f883a 	mov	r7,r4
     398:	2884b03a 	or	r2,r5,r2
     39c:	1006943a 	slli	r3,r2,16
     3a0:	10c6b03a 	or	r3,r2,r3
     3a4:	41800a2e 	bgeu	r8,r6,3d0 <memset+0x7c>
     3a8:	4005883a 	mov	r2,r8
     3ac:	31bffc04 	addi	r6,r6,-16
     3b0:	38c00015 	stw	r3,0(r7)
     3b4:	38c00115 	stw	r3,4(r7)
     3b8:	38c00215 	stw	r3,8(r7)
     3bc:	38c00315 	stw	r3,12(r7)
     3c0:	39c00404 	addi	r7,r7,16
     3c4:	11bff936 	bltu	r2,r6,3ac <memset+0x58>
     3c8:	008000c4 	movi	r2,3
     3cc:	1180052e 	bgeu	r2,r6,3e4 <memset+0x90>
     3d0:	31bfff04 	addi	r6,r6,-4
     3d4:	008000c4 	movi	r2,3
     3d8:	38c00015 	stw	r3,0(r7)
     3dc:	39c00104 	addi	r7,r7,4
     3e0:	11bffb36 	bltu	r2,r6,3d0 <memset+0x7c>
     3e4:	3807883a 	mov	r3,r7
     3e8:	003fe006 	br	36c <memset+0x18>

000003ec <printf>:
     3ec:	defffb04 	addi	sp,sp,-20
     3f0:	dfc00115 	stw	ra,4(sp)
     3f4:	d9400215 	stw	r5,8(sp)
     3f8:	d9800315 	stw	r6,12(sp)
     3fc:	d9c00415 	stw	r7,16(sp)
     400:	00800074 	movhi	r2,1
     404:	10b82b04 	addi	r2,r2,-8020
     408:	10c00017 	ldw	r3,0(r2)
     40c:	200b883a 	mov	r5,r4
     410:	d8800204 	addi	r2,sp,8
     414:	19000217 	ldw	r4,8(r3)
     418:	100d883a 	mov	r6,r2
     41c:	d8800015 	stw	r2,0(sp)
     420:	00024900 	call	2490 <__vfprintf_internal>
     424:	dfc00117 	ldw	ra,4(sp)
     428:	dec00504 	addi	sp,sp,20
     42c:	f800283a 	ret

00000430 <_printf_r>:
     430:	defffc04 	addi	sp,sp,-16
     434:	dfc00115 	stw	ra,4(sp)
     438:	d9800215 	stw	r6,8(sp)
     43c:	d9c00315 	stw	r7,12(sp)
     440:	280d883a 	mov	r6,r5
     444:	21400217 	ldw	r5,8(r4)
     448:	d8c00204 	addi	r3,sp,8
     44c:	180f883a 	mov	r7,r3
     450:	d8c00015 	stw	r3,0(sp)
     454:	00005e40 	call	5e4 <___vfprintf_internal_r>
     458:	dfc00117 	ldw	ra,4(sp)
     45c:	dec00404 	addi	sp,sp,16
     460:	f800283a 	ret

00000464 <_puts_r>:
     464:	defff604 	addi	sp,sp,-40
     468:	dc400715 	stw	r17,28(sp)
     46c:	2023883a 	mov	r17,r4
     470:	2809883a 	mov	r4,r5
     474:	dfc00915 	stw	ra,36(sp)
     478:	dcc00815 	stw	r19,32(sp)
     47c:	2827883a 	mov	r19,r5
     480:	00005180 	call	518 <strlen>
     484:	89400217 	ldw	r5,8(r17)
     488:	00c00074 	movhi	r3,1
     48c:	18f48904 	addi	r3,r3,-11740
     490:	01c00044 	movi	r7,1
     494:	12000044 	addi	r8,r2,1
     498:	d8c00515 	stw	r3,20(sp)
     49c:	d9c00615 	stw	r7,24(sp)
     4a0:	d8c00304 	addi	r3,sp,12
     4a4:	01c00084 	movi	r7,2
     4a8:	8809883a 	mov	r4,r17
     4ac:	d80d883a 	mov	r6,sp
     4b0:	d8c00015 	stw	r3,0(sp)
     4b4:	dcc00315 	stw	r19,12(sp)
     4b8:	da000215 	stw	r8,8(sp)
     4bc:	d9c00115 	stw	r7,4(sp)
     4c0:	d8800415 	stw	r2,16(sp)
     4c4:	00046ec0 	call	46ec <__sfvwrite_r>
     4c8:	00ffffc4 	movi	r3,-1
     4cc:	10000626 	beq	r2,zero,4e8 <_puts_r+0x84>
     4d0:	1805883a 	mov	r2,r3
     4d4:	dfc00917 	ldw	ra,36(sp)
     4d8:	dcc00817 	ldw	r19,32(sp)
     4dc:	dc400717 	ldw	r17,28(sp)
     4e0:	dec00a04 	addi	sp,sp,40
     4e4:	f800283a 	ret
     4e8:	00c00284 	movi	r3,10
     4ec:	1805883a 	mov	r2,r3
     4f0:	dfc00917 	ldw	ra,36(sp)
     4f4:	dcc00817 	ldw	r19,32(sp)
     4f8:	dc400717 	ldw	r17,28(sp)
     4fc:	dec00a04 	addi	sp,sp,40
     500:	f800283a 	ret

00000504 <puts>:
     504:	00800074 	movhi	r2,1
     508:	10b82b04 	addi	r2,r2,-8020
     50c:	200b883a 	mov	r5,r4
     510:	11000017 	ldw	r4,0(r2)
     514:	00004641 	jmpi	464 <_puts_r>

00000518 <strlen>:
     518:	208000cc 	andi	r2,r4,3
     51c:	2011883a 	mov	r8,r4
     520:	1000161e 	bne	r2,zero,57c <strlen+0x64>
     524:	20c00017 	ldw	r3,0(r4)
     528:	017fbff4 	movhi	r5,65279
     52c:	297fbfc4 	addi	r5,r5,-257
     530:	01e02074 	movhi	r7,32897
     534:	39e02004 	addi	r7,r7,-32640
     538:	1945883a 	add	r2,r3,r5
     53c:	11c4703a 	and	r2,r2,r7
     540:	00c6303a 	nor	r3,zero,r3
     544:	1886703a 	and	r3,r3,r2
     548:	18000c1e 	bne	r3,zero,57c <strlen+0x64>
     54c:	280d883a 	mov	r6,r5
     550:	380b883a 	mov	r5,r7
     554:	21000104 	addi	r4,r4,4
     558:	20800017 	ldw	r2,0(r4)
     55c:	1187883a 	add	r3,r2,r6
     560:	1946703a 	and	r3,r3,r5
     564:	0084303a 	nor	r2,zero,r2
     568:	10c4703a 	and	r2,r2,r3
     56c:	103ff926 	beq	r2,zero,554 <strlen+0x3c>
     570:	20800007 	ldb	r2,0(r4)
     574:	10000326 	beq	r2,zero,584 <strlen+0x6c>
     578:	21000044 	addi	r4,r4,1
     57c:	20800007 	ldb	r2,0(r4)
     580:	103ffd1e 	bne	r2,zero,578 <strlen+0x60>
     584:	2205c83a 	sub	r2,r4,r8
     588:	f800283a 	ret

0000058c <__sprint_r>:
     58c:	30800217 	ldw	r2,8(r6)
     590:	defffe04 	addi	sp,sp,-8
     594:	dc000015 	stw	r16,0(sp)
     598:	dfc00115 	stw	ra,4(sp)
     59c:	3021883a 	mov	r16,r6
     5a0:	0007883a 	mov	r3,zero
     5a4:	1000061e 	bne	r2,zero,5c0 <__sprint_r+0x34>
     5a8:	1805883a 	mov	r2,r3
     5ac:	30000115 	stw	zero,4(r6)
     5b0:	dfc00117 	ldw	ra,4(sp)
     5b4:	dc000017 	ldw	r16,0(sp)
     5b8:	dec00204 	addi	sp,sp,8
     5bc:	f800283a 	ret
     5c0:	00046ec0 	call	46ec <__sfvwrite_r>
     5c4:	1007883a 	mov	r3,r2
     5c8:	1805883a 	mov	r2,r3
     5cc:	80000115 	stw	zero,4(r16)
     5d0:	80000215 	stw	zero,8(r16)
     5d4:	dfc00117 	ldw	ra,4(sp)
     5d8:	dc000017 	ldw	r16,0(sp)
     5dc:	dec00204 	addi	sp,sp,8
     5e0:	f800283a 	ret

000005e4 <___vfprintf_internal_r>:
     5e4:	defea304 	addi	sp,sp,-1396
     5e8:	dd815915 	stw	r22,1380(sp)
     5ec:	dc015315 	stw	r16,1356(sp)
     5f0:	d9c15215 	stw	r7,1352(sp)
     5f4:	dfc15c15 	stw	ra,1392(sp)
     5f8:	df015b15 	stw	fp,1388(sp)
     5fc:	ddc15a15 	stw	r23,1384(sp)
     600:	dd415815 	stw	r21,1376(sp)
     604:	dd015715 	stw	r20,1372(sp)
     608:	dcc15615 	stw	r19,1368(sp)
     60c:	dc815515 	stw	r18,1364(sp)
     610:	dc415415 	stw	r17,1360(sp)
     614:	282d883a 	mov	r22,r5
     618:	3021883a 	mov	r16,r6
     61c:	d9015015 	stw	r4,1344(sp)
     620:	0004d100 	call	4d10 <_localeconv_r>
     624:	10800017 	ldw	r2,0(r2)
     628:	d9c15217 	ldw	r7,1352(sp)
     62c:	d8814a15 	stw	r2,1320(sp)
     630:	d8815017 	ldw	r2,1344(sp)
     634:	10000226 	beq	r2,zero,640 <___vfprintf_internal_r+0x5c>
     638:	10800e17 	ldw	r2,56(r2)
     63c:	10020d26 	beq	r2,zero,e74 <___vfprintf_internal_r+0x890>
     640:	b080030b 	ldhu	r2,12(r22)
     644:	1080020c 	andi	r2,r2,8
     648:	10020e26 	beq	r2,zero,e84 <___vfprintf_internal_r+0x8a0>
     64c:	b0800417 	ldw	r2,16(r22)
     650:	10020c26 	beq	r2,zero,e84 <___vfprintf_internal_r+0x8a0>
     654:	b200030b 	ldhu	r8,12(r22)
     658:	00800284 	movi	r2,10
     65c:	40c0068c 	andi	r3,r8,26
     660:	18802f1e 	bne	r3,r2,720 <___vfprintf_internal_r+0x13c>
     664:	b080038f 	ldh	r2,14(r22)
     668:	10002d16 	blt	r2,zero,720 <___vfprintf_internal_r+0x13c>
     66c:	b240038b 	ldhu	r9,14(r22)
     670:	b2800717 	ldw	r10,28(r22)
     674:	b2c00917 	ldw	r11,36(r22)
     678:	d9015017 	ldw	r4,1344(sp)
     67c:	dc402a04 	addi	r17,sp,168
     680:	d8804104 	addi	r2,sp,260
     684:	00c10004 	movi	r3,1024
     688:	423fff4c 	andi	r8,r8,65533
     68c:	800d883a 	mov	r6,r16
     690:	880b883a 	mov	r5,r17
     694:	da002d0d 	sth	r8,180(sp)
     698:	da402d8d 	sth	r9,182(sp)
     69c:	da803115 	stw	r10,196(sp)
     6a0:	dac03315 	stw	r11,204(sp)
     6a4:	d8802e15 	stw	r2,184(sp)
     6a8:	d8c02f15 	stw	r3,188(sp)
     6ac:	d8802a15 	stw	r2,168(sp)
     6b0:	d8c02c15 	stw	r3,176(sp)
     6b4:	d8003015 	stw	zero,192(sp)
     6b8:	00005e40 	call	5e4 <___vfprintf_internal_r>
     6bc:	d8814c15 	stw	r2,1328(sp)
     6c0:	10000416 	blt	r2,zero,6d4 <___vfprintf_internal_r+0xf0>
     6c4:	d9015017 	ldw	r4,1344(sp)
     6c8:	880b883a 	mov	r5,r17
     6cc:	0003dbc0 	call	3dbc <_fflush_r>
     6d0:	1002321e 	bne	r2,zero,f9c <___vfprintf_internal_r+0x9b8>
     6d4:	d8802d0b 	ldhu	r2,180(sp)
     6d8:	1080100c 	andi	r2,r2,64
     6dc:	10000326 	beq	r2,zero,6ec <___vfprintf_internal_r+0x108>
     6e0:	b080030b 	ldhu	r2,12(r22)
     6e4:	10801014 	ori	r2,r2,64
     6e8:	b080030d 	sth	r2,12(r22)
     6ec:	d8814c17 	ldw	r2,1328(sp)
     6f0:	dfc15c17 	ldw	ra,1392(sp)
     6f4:	df015b17 	ldw	fp,1388(sp)
     6f8:	ddc15a17 	ldw	r23,1384(sp)
     6fc:	dd815917 	ldw	r22,1380(sp)
     700:	dd415817 	ldw	r21,1376(sp)
     704:	dd015717 	ldw	r20,1372(sp)
     708:	dcc15617 	ldw	r19,1368(sp)
     70c:	dc815517 	ldw	r18,1364(sp)
     710:	dc415417 	ldw	r17,1360(sp)
     714:	dc015317 	ldw	r16,1356(sp)
     718:	dec15d04 	addi	sp,sp,1396
     71c:	f800283a 	ret
     720:	0005883a 	mov	r2,zero
     724:	0007883a 	mov	r3,zero
     728:	dd401a04 	addi	r21,sp,104
     72c:	d8814315 	stw	r2,1292(sp)
     730:	802f883a 	mov	r23,r16
     734:	d8c14415 	stw	r3,1296(sp)
     738:	d8014c15 	stw	zero,1328(sp)
     73c:	d8014915 	stw	zero,1316(sp)
     740:	d8014515 	stw	zero,1300(sp)
     744:	d8014815 	stw	zero,1312(sp)
     748:	dd400d15 	stw	r21,52(sp)
     74c:	d8000f15 	stw	zero,60(sp)
     750:	d8000e15 	stw	zero,56(sp)
     754:	b8800007 	ldb	r2,0(r23)
     758:	10001926 	beq	r2,zero,7c0 <___vfprintf_internal_r+0x1dc>
     75c:	00c00944 	movi	r3,37
     760:	10c01726 	beq	r2,r3,7c0 <___vfprintf_internal_r+0x1dc>
     764:	b821883a 	mov	r16,r23
     768:	00000106 	br	770 <___vfprintf_internal_r+0x18c>
     76c:	10c00326 	beq	r2,r3,77c <___vfprintf_internal_r+0x198>
     770:	84000044 	addi	r16,r16,1
     774:	80800007 	ldb	r2,0(r16)
     778:	103ffc1e 	bne	r2,zero,76c <___vfprintf_internal_r+0x188>
     77c:	85e7c83a 	sub	r19,r16,r23
     780:	98000e26 	beq	r19,zero,7bc <___vfprintf_internal_r+0x1d8>
     784:	dc800f17 	ldw	r18,60(sp)
     788:	dc400e17 	ldw	r17,56(sp)
     78c:	008001c4 	movi	r2,7
     790:	94e5883a 	add	r18,r18,r19
     794:	8c400044 	addi	r17,r17,1
     798:	adc00015 	stw	r23,0(r21)
     79c:	dc800f15 	stw	r18,60(sp)
     7a0:	acc00115 	stw	r19,4(r21)
     7a4:	dc400e15 	stw	r17,56(sp)
     7a8:	14428b16 	blt	r2,r17,11d8 <___vfprintf_internal_r+0xbf4>
     7ac:	ad400204 	addi	r21,r21,8
     7b0:	d9014c17 	ldw	r4,1328(sp)
     7b4:	24c9883a 	add	r4,r4,r19
     7b8:	d9014c15 	stw	r4,1328(sp)
     7bc:	802f883a 	mov	r23,r16
     7c0:	b8800007 	ldb	r2,0(r23)
     7c4:	10013c26 	beq	r2,zero,cb8 <___vfprintf_internal_r+0x6d4>
     7c8:	bdc00044 	addi	r23,r23,1
     7cc:	d8000405 	stb	zero,16(sp)
     7d0:	b8c00007 	ldb	r3,0(r23)
     7d4:	04ffffc4 	movi	r19,-1
     7d8:	d8014d15 	stw	zero,1332(sp)
     7dc:	d8014b15 	stw	zero,1324(sp)
     7e0:	d8c14e15 	stw	r3,1336(sp)
     7e4:	bdc00044 	addi	r23,r23,1
     7e8:	d9414e17 	ldw	r5,1336(sp)
     7ec:	00801604 	movi	r2,88
     7f0:	28fff804 	addi	r3,r5,-32
     7f4:	10c06036 	bltu	r2,r3,978 <___vfprintf_internal_r+0x394>
     7f8:	18c5883a 	add	r2,r3,r3
     7fc:	1085883a 	add	r2,r2,r2
     800:	00c00034 	movhi	r3,0
     804:	18c20504 	addi	r3,r3,2068
     808:	10c5883a 	add	r2,r2,r3
     80c:	11000017 	ldw	r4,0(r2)
     810:	2000683a 	jmp	r4
     814:	00001788 	cmpgei	zero,zero,94
     818:	00000978 	rdprs	zero,zero,37
     81c:	00000978 	rdprs	zero,zero,37
     820:	00001774 	movhi	zero,93
     824:	00000978 	rdprs	zero,zero,37
     828:	00000978 	rdprs	zero,zero,37
     82c:	00000978 	rdprs	zero,zero,37
     830:	00000978 	rdprs	zero,zero,37
     834:	00000978 	rdprs	zero,zero,37
     838:	00000978 	rdprs	zero,zero,37
     83c:	00001554 	movui	zero,85
     840:	00001764 	muli	zero,zero,93
     844:	00000978 	rdprs	zero,zero,37
     848:	0000156c 	andhi	zero,zero,85
     84c:	00001800 	call	180 <alt_irq_handler+0x94>
     850:	00000978 	rdprs	zero,zero,37
     854:	000017ec 	andhi	zero,zero,95
     858:	000017b4 	movhi	zero,94
     85c:	000017b4 	movhi	zero,94
     860:	000017b4 	movhi	zero,94
     864:	000017b4 	movhi	zero,94
     868:	000017b4 	movhi	zero,94
     86c:	000017b4 	movhi	zero,94
     870:	000017b4 	movhi	zero,94
     874:	000017b4 	movhi	zero,94
     878:	000017b4 	movhi	zero,94
     87c:	00000978 	rdprs	zero,zero,37
     880:	00000978 	rdprs	zero,zero,37
     884:	00000978 	rdprs	zero,zero,37
     888:	00000978 	rdprs	zero,zero,37
     88c:	00000978 	rdprs	zero,zero,37
     890:	00000978 	rdprs	zero,zero,37
     894:	00000978 	rdprs	zero,zero,37
     898:	00000978 	rdprs	zero,zero,37
     89c:	00000978 	rdprs	zero,zero,37
     8a0:	00000978 	rdprs	zero,zero,37
     8a4:	00000fd0 	cmplti	zero,zero,63
     8a8:	0000163c 	xorhi	zero,zero,88
     8ac:	00000978 	rdprs	zero,zero,37
     8b0:	0000163c 	xorhi	zero,zero,88
     8b4:	00000978 	rdprs	zero,zero,37
     8b8:	00000978 	rdprs	zero,zero,37
     8bc:	00000978 	rdprs	zero,zero,37
     8c0:	00000978 	rdprs	zero,zero,37
     8c4:	000017a0 	cmpeqi	zero,zero,94
     8c8:	00000978 	rdprs	zero,zero,37
     8cc:	00000978 	rdprs	zero,zero,37
     8d0:	00001084 	movi	zero,66
     8d4:	00000978 	rdprs	zero,zero,37
     8d8:	00000978 	rdprs	zero,zero,37
     8dc:	00000978 	rdprs	zero,zero,37
     8e0:	00000978 	rdprs	zero,zero,37
     8e4:	00000978 	rdprs	zero,zero,37
     8e8:	000010d0 	cmplti	zero,zero,67
     8ec:	00000978 	rdprs	zero,zero,37
     8f0:	00000978 	rdprs	zero,zero,37
     8f4:	000016f0 	cmpltui	zero,zero,91
     8f8:	00000978 	rdprs	zero,zero,37
     8fc:	00000978 	rdprs	zero,zero,37
     900:	00000978 	rdprs	zero,zero,37
     904:	00000978 	rdprs	zero,zero,37
     908:	00000978 	rdprs	zero,zero,37
     90c:	00000978 	rdprs	zero,zero,37
     910:	00000978 	rdprs	zero,zero,37
     914:	00000978 	rdprs	zero,zero,37
     918:	00000978 	rdprs	zero,zero,37
     91c:	00000978 	rdprs	zero,zero,37
     920:	000016c4 	movi	zero,91
     924:	00000fdc 	xori	zero,zero,63
     928:	0000163c 	xorhi	zero,zero,88
     92c:	0000163c 	xorhi	zero,zero,88
     930:	0000163c 	xorhi	zero,zero,88
     934:	00001628 	cmpgeui	zero,zero,88
     938:	00000fdc 	xori	zero,zero,63
     93c:	00000978 	rdprs	zero,zero,37
     940:	00000978 	rdprs	zero,zero,37
     944:	000015b0 	cmpltui	zero,zero,86
     948:	00000978 	rdprs	zero,zero,37
     94c:	00001580 	call	158 <alt_irq_handler+0x6c>
     950:	00001090 	cmplti	zero,zero,66
     954:	000015e0 	cmpeqi	zero,zero,87
     958:	000015cc 	andi	zero,zero,87
     95c:	00000978 	rdprs	zero,zero,37
     960:	0000185c 	xori	zero,zero,97
     964:	00000978 	rdprs	zero,zero,37
     968:	000010dc 	xori	zero,zero,67
     96c:	00000978 	rdprs	zero,zero,37
     970:	00000978 	rdprs	zero,zero,37
     974:	00001754 	movui	zero,93
     978:	d9014e17 	ldw	r4,1336(sp)
     97c:	2000ce26 	beq	r4,zero,cb8 <___vfprintf_internal_r+0x6d4>
     980:	01400044 	movi	r5,1
     984:	d9801004 	addi	r6,sp,64
     988:	d9c14115 	stw	r7,1284(sp)
     98c:	d9414615 	stw	r5,1304(sp)
     990:	d9814215 	stw	r6,1288(sp)
     994:	280f883a 	mov	r7,r5
     998:	d9001005 	stb	r4,64(sp)
     99c:	d8000405 	stb	zero,16(sp)
     9a0:	d8014715 	stw	zero,1308(sp)
     9a4:	d8c14d17 	ldw	r3,1332(sp)
     9a8:	1880008c 	andi	r2,r3,2
     9ac:	1005003a 	cmpeq	r2,r2,zero
     9b0:	d8815115 	stw	r2,1348(sp)
     9b4:	1000031e 	bne	r2,zero,9c4 <___vfprintf_internal_r+0x3e0>
     9b8:	d9014617 	ldw	r4,1304(sp)
     9bc:	21000084 	addi	r4,r4,2
     9c0:	d9014615 	stw	r4,1304(sp)
     9c4:	d9414d17 	ldw	r5,1332(sp)
     9c8:	2940210c 	andi	r5,r5,132
     9cc:	d9414f15 	stw	r5,1340(sp)
     9d0:	28002d1e 	bne	r5,zero,a88 <___vfprintf_internal_r+0x4a4>
     9d4:	d9814b17 	ldw	r6,1324(sp)
     9d8:	d8814617 	ldw	r2,1304(sp)
     9dc:	30a1c83a 	sub	r16,r6,r2
     9e0:	0400290e 	bge	zero,r16,a88 <___vfprintf_internal_r+0x4a4>
     9e4:	00800404 	movi	r2,16
     9e8:	1404580e 	bge	r2,r16,1b4c <___vfprintf_internal_r+0x1568>
     9ec:	dc800f17 	ldw	r18,60(sp)
     9f0:	dc400e17 	ldw	r17,56(sp)
     9f4:	1027883a 	mov	r19,r2
     9f8:	07000074 	movhi	fp,1
     9fc:	e734a604 	addi	fp,fp,-11624
     a00:	050001c4 	movi	r20,7
     a04:	00000306 	br	a14 <___vfprintf_internal_r+0x430>
     a08:	843ffc04 	addi	r16,r16,-16
     a0c:	ad400204 	addi	r21,r21,8
     a10:	9c00130e 	bge	r19,r16,a60 <___vfprintf_internal_r+0x47c>
     a14:	94800404 	addi	r18,r18,16
     a18:	8c400044 	addi	r17,r17,1
     a1c:	af000015 	stw	fp,0(r21)
     a20:	acc00115 	stw	r19,4(r21)
     a24:	dc800f15 	stw	r18,60(sp)
     a28:	dc400e15 	stw	r17,56(sp)
     a2c:	a47ff60e 	bge	r20,r17,a08 <___vfprintf_internal_r+0x424>
     a30:	d9015017 	ldw	r4,1344(sp)
     a34:	b00b883a 	mov	r5,r22
     a38:	d9800d04 	addi	r6,sp,52
     a3c:	d9c15215 	stw	r7,1352(sp)
     a40:	000058c0 	call	58c <__sprint_r>
     a44:	d9c15217 	ldw	r7,1352(sp)
     a48:	10009e1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
     a4c:	843ffc04 	addi	r16,r16,-16
     a50:	dc800f17 	ldw	r18,60(sp)
     a54:	dc400e17 	ldw	r17,56(sp)
     a58:	dd401a04 	addi	r21,sp,104
     a5c:	9c3fed16 	blt	r19,r16,a14 <___vfprintf_internal_r+0x430>
     a60:	9425883a 	add	r18,r18,r16
     a64:	8c400044 	addi	r17,r17,1
     a68:	008001c4 	movi	r2,7
     a6c:	af000015 	stw	fp,0(r21)
     a70:	ac000115 	stw	r16,4(r21)
     a74:	dc800f15 	stw	r18,60(sp)
     a78:	dc400e15 	stw	r17,56(sp)
     a7c:	1441f516 	blt	r2,r17,1254 <___vfprintf_internal_r+0xc70>
     a80:	ad400204 	addi	r21,r21,8
     a84:	00000206 	br	a90 <___vfprintf_internal_r+0x4ac>
     a88:	dc800f17 	ldw	r18,60(sp)
     a8c:	dc400e17 	ldw	r17,56(sp)
     a90:	d8800407 	ldb	r2,16(sp)
     a94:	10000b26 	beq	r2,zero,ac4 <___vfprintf_internal_r+0x4e0>
     a98:	00800044 	movi	r2,1
     a9c:	94800044 	addi	r18,r18,1
     aa0:	8c400044 	addi	r17,r17,1
     aa4:	a8800115 	stw	r2,4(r21)
     aa8:	d8c00404 	addi	r3,sp,16
     aac:	008001c4 	movi	r2,7
     ab0:	a8c00015 	stw	r3,0(r21)
     ab4:	dc800f15 	stw	r18,60(sp)
     ab8:	dc400e15 	stw	r17,56(sp)
     abc:	1441da16 	blt	r2,r17,1228 <___vfprintf_internal_r+0xc44>
     ac0:	ad400204 	addi	r21,r21,8
     ac4:	d9015117 	ldw	r4,1348(sp)
     ac8:	20000b1e 	bne	r4,zero,af8 <___vfprintf_internal_r+0x514>
     acc:	d8800504 	addi	r2,sp,20
     ad0:	94800084 	addi	r18,r18,2
     ad4:	8c400044 	addi	r17,r17,1
     ad8:	a8800015 	stw	r2,0(r21)
     adc:	00c00084 	movi	r3,2
     ae0:	008001c4 	movi	r2,7
     ae4:	a8c00115 	stw	r3,4(r21)
     ae8:	dc800f15 	stw	r18,60(sp)
     aec:	dc400e15 	stw	r17,56(sp)
     af0:	1441c216 	blt	r2,r17,11fc <___vfprintf_internal_r+0xc18>
     af4:	ad400204 	addi	r21,r21,8
     af8:	d9414f17 	ldw	r5,1340(sp)
     afc:	00802004 	movi	r2,128
     b00:	2880b126 	beq	r5,r2,dc8 <___vfprintf_internal_r+0x7e4>
     b04:	d8c14717 	ldw	r3,1308(sp)
     b08:	19e1c83a 	sub	r16,r3,r7
     b0c:	0400260e 	bge	zero,r16,ba8 <___vfprintf_internal_r+0x5c4>
     b10:	00800404 	movi	r2,16
     b14:	1403c90e 	bge	r2,r16,1a3c <___vfprintf_internal_r+0x1458>
     b18:	1027883a 	mov	r19,r2
     b1c:	07000074 	movhi	fp,1
     b20:	e734a204 	addi	fp,fp,-11640
     b24:	050001c4 	movi	r20,7
     b28:	00000306 	br	b38 <___vfprintf_internal_r+0x554>
     b2c:	843ffc04 	addi	r16,r16,-16
     b30:	ad400204 	addi	r21,r21,8
     b34:	9c00130e 	bge	r19,r16,b84 <___vfprintf_internal_r+0x5a0>
     b38:	94800404 	addi	r18,r18,16
     b3c:	8c400044 	addi	r17,r17,1
     b40:	af000015 	stw	fp,0(r21)
     b44:	acc00115 	stw	r19,4(r21)
     b48:	dc800f15 	stw	r18,60(sp)
     b4c:	dc400e15 	stw	r17,56(sp)
     b50:	a47ff60e 	bge	r20,r17,b2c <___vfprintf_internal_r+0x548>
     b54:	d9015017 	ldw	r4,1344(sp)
     b58:	b00b883a 	mov	r5,r22
     b5c:	d9800d04 	addi	r6,sp,52
     b60:	d9c15215 	stw	r7,1352(sp)
     b64:	000058c0 	call	58c <__sprint_r>
     b68:	d9c15217 	ldw	r7,1352(sp)
     b6c:	1000551e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
     b70:	843ffc04 	addi	r16,r16,-16
     b74:	dc800f17 	ldw	r18,60(sp)
     b78:	dc400e17 	ldw	r17,56(sp)
     b7c:	dd401a04 	addi	r21,sp,104
     b80:	9c3fed16 	blt	r19,r16,b38 <___vfprintf_internal_r+0x554>
     b84:	9425883a 	add	r18,r18,r16
     b88:	8c400044 	addi	r17,r17,1
     b8c:	008001c4 	movi	r2,7
     b90:	af000015 	stw	fp,0(r21)
     b94:	ac000115 	stw	r16,4(r21)
     b98:	dc800f15 	stw	r18,60(sp)
     b9c:	dc400e15 	stw	r17,56(sp)
     ba0:	14418216 	blt	r2,r17,11ac <___vfprintf_internal_r+0xbc8>
     ba4:	ad400204 	addi	r21,r21,8
     ba8:	d9014d17 	ldw	r4,1332(sp)
     bac:	2080400c 	andi	r2,r4,256
     bb0:	10004a1e 	bne	r2,zero,cdc <___vfprintf_internal_r+0x6f8>
     bb4:	d9414217 	ldw	r5,1288(sp)
     bb8:	91e5883a 	add	r18,r18,r7
     bbc:	8c400044 	addi	r17,r17,1
     bc0:	008001c4 	movi	r2,7
     bc4:	a9400015 	stw	r5,0(r21)
     bc8:	a9c00115 	stw	r7,4(r21)
     bcc:	dc800f15 	stw	r18,60(sp)
     bd0:	dc400e15 	stw	r17,56(sp)
     bd4:	14416716 	blt	r2,r17,1174 <___vfprintf_internal_r+0xb90>
     bd8:	a8c00204 	addi	r3,r21,8
     bdc:	d9814d17 	ldw	r6,1332(sp)
     be0:	3080010c 	andi	r2,r6,4
     be4:	10002826 	beq	r2,zero,c88 <___vfprintf_internal_r+0x6a4>
     be8:	d8814b17 	ldw	r2,1324(sp)
     bec:	d9014617 	ldw	r4,1304(sp)
     bf0:	1121c83a 	sub	r16,r2,r4
     bf4:	0400240e 	bge	zero,r16,c88 <___vfprintf_internal_r+0x6a4>
     bf8:	00800404 	movi	r2,16
     bfc:	14044f0e 	bge	r2,r16,1d3c <___vfprintf_internal_r+0x1758>
     c00:	dc400e17 	ldw	r17,56(sp)
     c04:	1027883a 	mov	r19,r2
     c08:	07000074 	movhi	fp,1
     c0c:	e734a604 	addi	fp,fp,-11624
     c10:	050001c4 	movi	r20,7
     c14:	00000306 	br	c24 <___vfprintf_internal_r+0x640>
     c18:	843ffc04 	addi	r16,r16,-16
     c1c:	18c00204 	addi	r3,r3,8
     c20:	9c00110e 	bge	r19,r16,c68 <___vfprintf_internal_r+0x684>
     c24:	94800404 	addi	r18,r18,16
     c28:	8c400044 	addi	r17,r17,1
     c2c:	1f000015 	stw	fp,0(r3)
     c30:	1cc00115 	stw	r19,4(r3)
     c34:	dc800f15 	stw	r18,60(sp)
     c38:	dc400e15 	stw	r17,56(sp)
     c3c:	a47ff60e 	bge	r20,r17,c18 <___vfprintf_internal_r+0x634>
     c40:	d9015017 	ldw	r4,1344(sp)
     c44:	b00b883a 	mov	r5,r22
     c48:	d9800d04 	addi	r6,sp,52
     c4c:	000058c0 	call	58c <__sprint_r>
     c50:	10001c1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
     c54:	843ffc04 	addi	r16,r16,-16
     c58:	dc800f17 	ldw	r18,60(sp)
     c5c:	dc400e17 	ldw	r17,56(sp)
     c60:	d8c01a04 	addi	r3,sp,104
     c64:	9c3fef16 	blt	r19,r16,c24 <___vfprintf_internal_r+0x640>
     c68:	9425883a 	add	r18,r18,r16
     c6c:	8c400044 	addi	r17,r17,1
     c70:	008001c4 	movi	r2,7
     c74:	1f000015 	stw	fp,0(r3)
     c78:	1c000115 	stw	r16,4(r3)
     c7c:	dc800f15 	stw	r18,60(sp)
     c80:	dc400e15 	stw	r17,56(sp)
     c84:	1440cb16 	blt	r2,r17,fb4 <___vfprintf_internal_r+0x9d0>
     c88:	d8814b17 	ldw	r2,1324(sp)
     c8c:	d9414617 	ldw	r5,1304(sp)
     c90:	1140010e 	bge	r2,r5,c98 <___vfprintf_internal_r+0x6b4>
     c94:	2805883a 	mov	r2,r5
     c98:	d9814c17 	ldw	r6,1328(sp)
     c9c:	308d883a 	add	r6,r6,r2
     ca0:	d9814c15 	stw	r6,1328(sp)
     ca4:	90013b1e 	bne	r18,zero,1194 <___vfprintf_internal_r+0xbb0>
     ca8:	d9c14117 	ldw	r7,1284(sp)
     cac:	dd401a04 	addi	r21,sp,104
     cb0:	d8000e15 	stw	zero,56(sp)
     cb4:	003ea706 	br	754 <___vfprintf_internal_r+0x170>
     cb8:	d8800f17 	ldw	r2,60(sp)
     cbc:	10053f1e 	bne	r2,zero,21bc <___vfprintf_internal_r+0x1bd8>
     cc0:	d8000e15 	stw	zero,56(sp)
     cc4:	b080030b 	ldhu	r2,12(r22)
     cc8:	1080100c 	andi	r2,r2,64
     ccc:	103e8726 	beq	r2,zero,6ec <___vfprintf_internal_r+0x108>
     cd0:	00bfffc4 	movi	r2,-1
     cd4:	d8814c15 	stw	r2,1328(sp)
     cd8:	003e8406 	br	6ec <___vfprintf_internal_r+0x108>
     cdc:	d9814e17 	ldw	r6,1336(sp)
     ce0:	00801944 	movi	r2,101
     ce4:	11806e16 	blt	r2,r6,ea0 <___vfprintf_internal_r+0x8bc>
     ce8:	d9414817 	ldw	r5,1312(sp)
     cec:	00c00044 	movi	r3,1
     cf0:	1943430e 	bge	r3,r5,1a00 <___vfprintf_internal_r+0x141c>
     cf4:	d8814217 	ldw	r2,1288(sp)
     cf8:	94800044 	addi	r18,r18,1
     cfc:	8c400044 	addi	r17,r17,1
     d00:	a8800015 	stw	r2,0(r21)
     d04:	008001c4 	movi	r2,7
     d08:	a8c00115 	stw	r3,4(r21)
     d0c:	dc800f15 	stw	r18,60(sp)
     d10:	dc400e15 	stw	r17,56(sp)
     d14:	1441ca16 	blt	r2,r17,1440 <___vfprintf_internal_r+0xe5c>
     d18:	a8c00204 	addi	r3,r21,8
     d1c:	d9014a17 	ldw	r4,1320(sp)
     d20:	00800044 	movi	r2,1
     d24:	94800044 	addi	r18,r18,1
     d28:	8c400044 	addi	r17,r17,1
     d2c:	18800115 	stw	r2,4(r3)
     d30:	008001c4 	movi	r2,7
     d34:	19000015 	stw	r4,0(r3)
     d38:	dc800f15 	stw	r18,60(sp)
     d3c:	dc400e15 	stw	r17,56(sp)
     d40:	1441b616 	blt	r2,r17,141c <___vfprintf_internal_r+0xe38>
     d44:	1cc00204 	addi	r19,r3,8
     d48:	d9014317 	ldw	r4,1292(sp)
     d4c:	d9414417 	ldw	r5,1296(sp)
     d50:	000d883a 	mov	r6,zero
     d54:	000f883a 	mov	r7,zero
     d58:	0008d9c0 	call	8d9c <__nedf2>
     d5c:	10017426 	beq	r2,zero,1330 <___vfprintf_internal_r+0xd4c>
     d60:	d9414817 	ldw	r5,1312(sp)
     d64:	d9814217 	ldw	r6,1288(sp)
     d68:	8c400044 	addi	r17,r17,1
     d6c:	2c85883a 	add	r2,r5,r18
     d70:	14bfffc4 	addi	r18,r2,-1
     d74:	28bfffc4 	addi	r2,r5,-1
     d78:	30c00044 	addi	r3,r6,1
     d7c:	98800115 	stw	r2,4(r19)
     d80:	008001c4 	movi	r2,7
     d84:	98c00015 	stw	r3,0(r19)
     d88:	dc800f15 	stw	r18,60(sp)
     d8c:	dc400e15 	stw	r17,56(sp)
     d90:	14418e16 	blt	r2,r17,13cc <___vfprintf_internal_r+0xde8>
     d94:	9cc00204 	addi	r19,r19,8
     d98:	d9414917 	ldw	r5,1316(sp)
     d9c:	d8800904 	addi	r2,sp,36
     da0:	8c400044 	addi	r17,r17,1
     da4:	9165883a 	add	r18,r18,r5
     da8:	98800015 	stw	r2,0(r19)
     dac:	008001c4 	movi	r2,7
     db0:	99400115 	stw	r5,4(r19)
     db4:	dc800f15 	stw	r18,60(sp)
     db8:	dc400e15 	stw	r17,56(sp)
     dbc:	1440ed16 	blt	r2,r17,1174 <___vfprintf_internal_r+0xb90>
     dc0:	98c00204 	addi	r3,r19,8
     dc4:	003f8506 	br	bdc <___vfprintf_internal_r+0x5f8>
     dc8:	d9814b17 	ldw	r6,1324(sp)
     dcc:	d8814617 	ldw	r2,1304(sp)
     dd0:	30a1c83a 	sub	r16,r6,r2
     dd4:	043f4b0e 	bge	zero,r16,b04 <___vfprintf_internal_r+0x520>
     dd8:	00800404 	movi	r2,16
     ddc:	1404340e 	bge	r2,r16,1eb0 <___vfprintf_internal_r+0x18cc>
     de0:	1027883a 	mov	r19,r2
     de4:	07000074 	movhi	fp,1
     de8:	e734a204 	addi	fp,fp,-11640
     dec:	050001c4 	movi	r20,7
     df0:	00000306 	br	e00 <___vfprintf_internal_r+0x81c>
     df4:	843ffc04 	addi	r16,r16,-16
     df8:	ad400204 	addi	r21,r21,8
     dfc:	9c00130e 	bge	r19,r16,e4c <___vfprintf_internal_r+0x868>
     e00:	94800404 	addi	r18,r18,16
     e04:	8c400044 	addi	r17,r17,1
     e08:	af000015 	stw	fp,0(r21)
     e0c:	acc00115 	stw	r19,4(r21)
     e10:	dc800f15 	stw	r18,60(sp)
     e14:	dc400e15 	stw	r17,56(sp)
     e18:	a47ff60e 	bge	r20,r17,df4 <___vfprintf_internal_r+0x810>
     e1c:	d9015017 	ldw	r4,1344(sp)
     e20:	b00b883a 	mov	r5,r22
     e24:	d9800d04 	addi	r6,sp,52
     e28:	d9c15215 	stw	r7,1352(sp)
     e2c:	000058c0 	call	58c <__sprint_r>
     e30:	d9c15217 	ldw	r7,1352(sp)
     e34:	103fa31e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
     e38:	843ffc04 	addi	r16,r16,-16
     e3c:	dc800f17 	ldw	r18,60(sp)
     e40:	dc400e17 	ldw	r17,56(sp)
     e44:	dd401a04 	addi	r21,sp,104
     e48:	9c3fed16 	blt	r19,r16,e00 <___vfprintf_internal_r+0x81c>
     e4c:	9425883a 	add	r18,r18,r16
     e50:	8c400044 	addi	r17,r17,1
     e54:	008001c4 	movi	r2,7
     e58:	af000015 	stw	fp,0(r21)
     e5c:	ac000115 	stw	r16,4(r21)
     e60:	dc800f15 	stw	r18,60(sp)
     e64:	dc400e15 	stw	r17,56(sp)
     e68:	14416116 	blt	r2,r17,13f0 <___vfprintf_internal_r+0xe0c>
     e6c:	ad400204 	addi	r21,r21,8
     e70:	003f2406 	br	b04 <___vfprintf_internal_r+0x520>
     e74:	d9015017 	ldw	r4,1344(sp)
     e78:	00040540 	call	4054 <__sinit>
     e7c:	d9c15217 	ldw	r7,1352(sp)
     e80:	003def06 	br	640 <___vfprintf_internal_r+0x5c>
     e84:	d9015017 	ldw	r4,1344(sp)
     e88:	b00b883a 	mov	r5,r22
     e8c:	d9c15215 	stw	r7,1352(sp)
     e90:	00024b40 	call	24b4 <__swsetup_r>
     e94:	d9c15217 	ldw	r7,1352(sp)
     e98:	103dee26 	beq	r2,zero,654 <___vfprintf_internal_r+0x70>
     e9c:	003f8c06 	br	cd0 <___vfprintf_internal_r+0x6ec>
     ea0:	d9014317 	ldw	r4,1292(sp)
     ea4:	d9414417 	ldw	r5,1296(sp)
     ea8:	000d883a 	mov	r6,zero
     eac:	000f883a 	mov	r7,zero
     eb0:	0008d140 	call	8d14 <__eqdf2>
     eb4:	1000f21e 	bne	r2,zero,1280 <___vfprintf_internal_r+0xc9c>
     eb8:	00800074 	movhi	r2,1
     ebc:	10b4a104 	addi	r2,r2,-11644
     ec0:	94800044 	addi	r18,r18,1
     ec4:	8c400044 	addi	r17,r17,1
     ec8:	a8800015 	stw	r2,0(r21)
     ecc:	00c00044 	movi	r3,1
     ed0:	008001c4 	movi	r2,7
     ed4:	a8c00115 	stw	r3,4(r21)
     ed8:	dc800f15 	stw	r18,60(sp)
     edc:	dc400e15 	stw	r17,56(sp)
     ee0:	1442fa16 	blt	r2,r17,1acc <___vfprintf_internal_r+0x14e8>
     ee4:	a8c00204 	addi	r3,r21,8
     ee8:	d8800617 	ldw	r2,24(sp)
     eec:	d9014817 	ldw	r4,1312(sp)
     ef0:	11015c0e 	bge	r2,r4,1464 <___vfprintf_internal_r+0xe80>
     ef4:	dc400e17 	ldw	r17,56(sp)
     ef8:	d9814a17 	ldw	r6,1320(sp)
     efc:	00800044 	movi	r2,1
     f00:	94800044 	addi	r18,r18,1
     f04:	8c400044 	addi	r17,r17,1
     f08:	18800115 	stw	r2,4(r3)
     f0c:	008001c4 	movi	r2,7
     f10:	19800015 	stw	r6,0(r3)
     f14:	dc800f15 	stw	r18,60(sp)
     f18:	dc400e15 	stw	r17,56(sp)
     f1c:	14431016 	blt	r2,r17,1b60 <___vfprintf_internal_r+0x157c>
     f20:	18c00204 	addi	r3,r3,8
     f24:	d8814817 	ldw	r2,1312(sp)
     f28:	143fffc4 	addi	r16,r2,-1
     f2c:	043f2b0e 	bge	zero,r16,bdc <___vfprintf_internal_r+0x5f8>
     f30:	00800404 	movi	r2,16
     f34:	1402a20e 	bge	r2,r16,19c0 <___vfprintf_internal_r+0x13dc>
     f38:	dc400e17 	ldw	r17,56(sp)
     f3c:	1027883a 	mov	r19,r2
     f40:	07000074 	movhi	fp,1
     f44:	e734a204 	addi	fp,fp,-11640
     f48:	050001c4 	movi	r20,7
     f4c:	00000306 	br	f5c <___vfprintf_internal_r+0x978>
     f50:	18c00204 	addi	r3,r3,8
     f54:	843ffc04 	addi	r16,r16,-16
     f58:	9c029c0e 	bge	r19,r16,19cc <___vfprintf_internal_r+0x13e8>
     f5c:	94800404 	addi	r18,r18,16
     f60:	8c400044 	addi	r17,r17,1
     f64:	1f000015 	stw	fp,0(r3)
     f68:	1cc00115 	stw	r19,4(r3)
     f6c:	dc800f15 	stw	r18,60(sp)
     f70:	dc400e15 	stw	r17,56(sp)
     f74:	a47ff60e 	bge	r20,r17,f50 <___vfprintf_internal_r+0x96c>
     f78:	d9015017 	ldw	r4,1344(sp)
     f7c:	b00b883a 	mov	r5,r22
     f80:	d9800d04 	addi	r6,sp,52
     f84:	000058c0 	call	58c <__sprint_r>
     f88:	103f4e1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
     f8c:	dc800f17 	ldw	r18,60(sp)
     f90:	dc400e17 	ldw	r17,56(sp)
     f94:	d8c01a04 	addi	r3,sp,104
     f98:	003fee06 	br	f54 <___vfprintf_internal_r+0x970>
     f9c:	d8802d0b 	ldhu	r2,180(sp)
     fa0:	00ffffc4 	movi	r3,-1
     fa4:	d8c14c15 	stw	r3,1328(sp)
     fa8:	1080100c 	andi	r2,r2,64
     fac:	103dcc1e 	bne	r2,zero,6e0 <___vfprintf_internal_r+0xfc>
     fb0:	003dce06 	br	6ec <___vfprintf_internal_r+0x108>
     fb4:	d9015017 	ldw	r4,1344(sp)
     fb8:	b00b883a 	mov	r5,r22
     fbc:	d9800d04 	addi	r6,sp,52
     fc0:	000058c0 	call	58c <__sprint_r>
     fc4:	103f3f1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
     fc8:	dc800f17 	ldw	r18,60(sp)
     fcc:	003f2e06 	br	c88 <___vfprintf_internal_r+0x6a4>
     fd0:	d9414d17 	ldw	r5,1332(sp)
     fd4:	29400414 	ori	r5,r5,16
     fd8:	d9414d15 	stw	r5,1332(sp)
     fdc:	d9814d17 	ldw	r6,1332(sp)
     fe0:	3080080c 	andi	r2,r6,32
     fe4:	10014f1e 	bne	r2,zero,1524 <___vfprintf_internal_r+0xf40>
     fe8:	d8c14d17 	ldw	r3,1332(sp)
     fec:	1880040c 	andi	r2,r3,16
     ff0:	1002ea1e 	bne	r2,zero,1b9c <___vfprintf_internal_r+0x15b8>
     ff4:	d9014d17 	ldw	r4,1332(sp)
     ff8:	2080100c 	andi	r2,r4,64
     ffc:	1002e726 	beq	r2,zero,1b9c <___vfprintf_internal_r+0x15b8>
    1000:	3880000f 	ldh	r2,0(r7)
    1004:	39c00104 	addi	r7,r7,4
    1008:	d9c14115 	stw	r7,1284(sp)
    100c:	1023d7fa 	srai	r17,r2,31
    1010:	1021883a 	mov	r16,r2
    1014:	88037216 	blt	r17,zero,1de0 <___vfprintf_internal_r+0x17fc>
    1018:	01000044 	movi	r4,1
    101c:	98000416 	blt	r19,zero,1030 <___vfprintf_internal_r+0xa4c>
    1020:	d8c14d17 	ldw	r3,1332(sp)
    1024:	00bfdfc4 	movi	r2,-129
    1028:	1886703a 	and	r3,r3,r2
    102c:	d8c14d15 	stw	r3,1332(sp)
    1030:	8444b03a 	or	r2,r16,r17
    1034:	1002261e 	bne	r2,zero,18d0 <___vfprintf_internal_r+0x12ec>
    1038:	9802251e 	bne	r19,zero,18d0 <___vfprintf_internal_r+0x12ec>
    103c:	20803fcc 	andi	r2,r4,255
    1040:	10029b26 	beq	r2,zero,1ab0 <___vfprintf_internal_r+0x14cc>
    1044:	d8c01a04 	addi	r3,sp,104
    1048:	dd001004 	addi	r20,sp,64
    104c:	d8c14215 	stw	r3,1288(sp)
    1050:	d8c14217 	ldw	r3,1288(sp)
    1054:	dcc14615 	stw	r19,1304(sp)
    1058:	a0c5c83a 	sub	r2,r20,r3
    105c:	11c00a04 	addi	r7,r2,40
    1060:	99c0010e 	bge	r19,r7,1068 <___vfprintf_internal_r+0xa84>
    1064:	d9c14615 	stw	r7,1304(sp)
    1068:	dcc14715 	stw	r19,1308(sp)
    106c:	d8800407 	ldb	r2,16(sp)
    1070:	103e4c26 	beq	r2,zero,9a4 <___vfprintf_internal_r+0x3c0>
    1074:	d8814617 	ldw	r2,1304(sp)
    1078:	10800044 	addi	r2,r2,1
    107c:	d8814615 	stw	r2,1304(sp)
    1080:	003e4806 	br	9a4 <___vfprintf_internal_r+0x3c0>
    1084:	d9814d17 	ldw	r6,1332(sp)
    1088:	31800414 	ori	r6,r6,16
    108c:	d9814d15 	stw	r6,1332(sp)
    1090:	d8c14d17 	ldw	r3,1332(sp)
    1094:	1880080c 	andi	r2,r3,32
    1098:	1001271e 	bne	r2,zero,1538 <___vfprintf_internal_r+0xf54>
    109c:	d9414d17 	ldw	r5,1332(sp)
    10a0:	2880040c 	andi	r2,r5,16
    10a4:	1002b61e 	bne	r2,zero,1b80 <___vfprintf_internal_r+0x159c>
    10a8:	d9814d17 	ldw	r6,1332(sp)
    10ac:	3080100c 	andi	r2,r6,64
    10b0:	1002b326 	beq	r2,zero,1b80 <___vfprintf_internal_r+0x159c>
    10b4:	3c00000b 	ldhu	r16,0(r7)
    10b8:	0009883a 	mov	r4,zero
    10bc:	39c00104 	addi	r7,r7,4
    10c0:	0023883a 	mov	r17,zero
    10c4:	d9c14115 	stw	r7,1284(sp)
    10c8:	d8000405 	stb	zero,16(sp)
    10cc:	003fd306 	br	101c <___vfprintf_internal_r+0xa38>
    10d0:	d9014d17 	ldw	r4,1332(sp)
    10d4:	21000414 	ori	r4,r4,16
    10d8:	d9014d15 	stw	r4,1332(sp)
    10dc:	d9414d17 	ldw	r5,1332(sp)
    10e0:	2880080c 	andi	r2,r5,32
    10e4:	1001081e 	bne	r2,zero,1508 <___vfprintf_internal_r+0xf24>
    10e8:	d8c14d17 	ldw	r3,1332(sp)
    10ec:	1880040c 	andi	r2,r3,16
    10f0:	1002b01e 	bne	r2,zero,1bb4 <___vfprintf_internal_r+0x15d0>
    10f4:	d9014d17 	ldw	r4,1332(sp)
    10f8:	2080100c 	andi	r2,r4,64
    10fc:	1002ad26 	beq	r2,zero,1bb4 <___vfprintf_internal_r+0x15d0>
    1100:	3c00000b 	ldhu	r16,0(r7)
    1104:	01000044 	movi	r4,1
    1108:	39c00104 	addi	r7,r7,4
    110c:	0023883a 	mov	r17,zero
    1110:	d9c14115 	stw	r7,1284(sp)
    1114:	d8000405 	stb	zero,16(sp)
    1118:	003fc006 	br	101c <___vfprintf_internal_r+0xa38>
    111c:	d9015017 	ldw	r4,1344(sp)
    1120:	b00b883a 	mov	r5,r22
    1124:	d9800d04 	addi	r6,sp,52
    1128:	000058c0 	call	58c <__sprint_r>
    112c:	103ee51e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1130:	dc800f17 	ldw	r18,60(sp)
    1134:	d8c01a04 	addi	r3,sp,104
    1138:	d9814d17 	ldw	r6,1332(sp)
    113c:	3080004c 	andi	r2,r6,1
    1140:	1005003a 	cmpeq	r2,r2,zero
    1144:	103ea51e 	bne	r2,zero,bdc <___vfprintf_internal_r+0x5f8>
    1148:	00800044 	movi	r2,1
    114c:	dc400e17 	ldw	r17,56(sp)
    1150:	18800115 	stw	r2,4(r3)
    1154:	d8814a17 	ldw	r2,1320(sp)
    1158:	94800044 	addi	r18,r18,1
    115c:	8c400044 	addi	r17,r17,1
    1160:	18800015 	stw	r2,0(r3)
    1164:	008001c4 	movi	r2,7
    1168:	dc800f15 	stw	r18,60(sp)
    116c:	dc400e15 	stw	r17,56(sp)
    1170:	14421e0e 	bge	r2,r17,19ec <___vfprintf_internal_r+0x1408>
    1174:	d9015017 	ldw	r4,1344(sp)
    1178:	b00b883a 	mov	r5,r22
    117c:	d9800d04 	addi	r6,sp,52
    1180:	000058c0 	call	58c <__sprint_r>
    1184:	103ecf1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1188:	dc800f17 	ldw	r18,60(sp)
    118c:	d8c01a04 	addi	r3,sp,104
    1190:	003e9206 	br	bdc <___vfprintf_internal_r+0x5f8>
    1194:	d9015017 	ldw	r4,1344(sp)
    1198:	b00b883a 	mov	r5,r22
    119c:	d9800d04 	addi	r6,sp,52
    11a0:	000058c0 	call	58c <__sprint_r>
    11a4:	103ec026 	beq	r2,zero,ca8 <___vfprintf_internal_r+0x6c4>
    11a8:	003ec606 	br	cc4 <___vfprintf_internal_r+0x6e0>
    11ac:	d9015017 	ldw	r4,1344(sp)
    11b0:	b00b883a 	mov	r5,r22
    11b4:	d9800d04 	addi	r6,sp,52
    11b8:	d9c15215 	stw	r7,1352(sp)
    11bc:	000058c0 	call	58c <__sprint_r>
    11c0:	d9c15217 	ldw	r7,1352(sp)
    11c4:	103ebf1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    11c8:	dc800f17 	ldw	r18,60(sp)
    11cc:	dc400e17 	ldw	r17,56(sp)
    11d0:	dd401a04 	addi	r21,sp,104
    11d4:	003e7406 	br	ba8 <___vfprintf_internal_r+0x5c4>
    11d8:	d9015017 	ldw	r4,1344(sp)
    11dc:	b00b883a 	mov	r5,r22
    11e0:	d9800d04 	addi	r6,sp,52
    11e4:	d9c15215 	stw	r7,1352(sp)
    11e8:	000058c0 	call	58c <__sprint_r>
    11ec:	d9c15217 	ldw	r7,1352(sp)
    11f0:	103eb41e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    11f4:	dd401a04 	addi	r21,sp,104
    11f8:	003d6d06 	br	7b0 <___vfprintf_internal_r+0x1cc>
    11fc:	d9015017 	ldw	r4,1344(sp)
    1200:	b00b883a 	mov	r5,r22
    1204:	d9800d04 	addi	r6,sp,52
    1208:	d9c15215 	stw	r7,1352(sp)
    120c:	000058c0 	call	58c <__sprint_r>
    1210:	d9c15217 	ldw	r7,1352(sp)
    1214:	103eab1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1218:	dc800f17 	ldw	r18,60(sp)
    121c:	dc400e17 	ldw	r17,56(sp)
    1220:	dd401a04 	addi	r21,sp,104
    1224:	003e3406 	br	af8 <___vfprintf_internal_r+0x514>
    1228:	d9015017 	ldw	r4,1344(sp)
    122c:	b00b883a 	mov	r5,r22
    1230:	d9800d04 	addi	r6,sp,52
    1234:	d9c15215 	stw	r7,1352(sp)
    1238:	000058c0 	call	58c <__sprint_r>
    123c:	d9c15217 	ldw	r7,1352(sp)
    1240:	103ea01e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1244:	dc800f17 	ldw	r18,60(sp)
    1248:	dc400e17 	ldw	r17,56(sp)
    124c:	dd401a04 	addi	r21,sp,104
    1250:	003e1c06 	br	ac4 <___vfprintf_internal_r+0x4e0>
    1254:	d9015017 	ldw	r4,1344(sp)
    1258:	b00b883a 	mov	r5,r22
    125c:	d9800d04 	addi	r6,sp,52
    1260:	d9c15215 	stw	r7,1352(sp)
    1264:	000058c0 	call	58c <__sprint_r>
    1268:	d9c15217 	ldw	r7,1352(sp)
    126c:	103e951e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1270:	dc800f17 	ldw	r18,60(sp)
    1274:	dc400e17 	ldw	r17,56(sp)
    1278:	dd401a04 	addi	r21,sp,104
    127c:	003e0406 	br	a90 <___vfprintf_internal_r+0x4ac>
    1280:	d9000617 	ldw	r4,24(sp)
    1284:	0102520e 	bge	zero,r4,1bd0 <___vfprintf_internal_r+0x15ec>
    1288:	d9814817 	ldw	r6,1312(sp)
    128c:	21807a16 	blt	r4,r6,1478 <___vfprintf_internal_r+0xe94>
    1290:	d8814217 	ldw	r2,1288(sp)
    1294:	91a5883a 	add	r18,r18,r6
    1298:	8c400044 	addi	r17,r17,1
    129c:	a8800015 	stw	r2,0(r21)
    12a0:	008001c4 	movi	r2,7
    12a4:	a9800115 	stw	r6,4(r21)
    12a8:	dc800f15 	stw	r18,60(sp)
    12ac:	dc400e15 	stw	r17,56(sp)
    12b0:	1442f616 	blt	r2,r17,1e8c <___vfprintf_internal_r+0x18a8>
    12b4:	a8c00204 	addi	r3,r21,8
    12b8:	d9414817 	ldw	r5,1312(sp)
    12bc:	2161c83a 	sub	r16,r4,r5
    12c0:	043f9d0e 	bge	zero,r16,1138 <___vfprintf_internal_r+0xb54>
    12c4:	00800404 	movi	r2,16
    12c8:	1402130e 	bge	r2,r16,1b18 <___vfprintf_internal_r+0x1534>
    12cc:	dc400e17 	ldw	r17,56(sp)
    12d0:	1027883a 	mov	r19,r2
    12d4:	07000074 	movhi	fp,1
    12d8:	e734a204 	addi	fp,fp,-11640
    12dc:	050001c4 	movi	r20,7
    12e0:	00000306 	br	12f0 <___vfprintf_internal_r+0xd0c>
    12e4:	18c00204 	addi	r3,r3,8
    12e8:	843ffc04 	addi	r16,r16,-16
    12ec:	9c020d0e 	bge	r19,r16,1b24 <___vfprintf_internal_r+0x1540>
    12f0:	94800404 	addi	r18,r18,16
    12f4:	8c400044 	addi	r17,r17,1
    12f8:	1f000015 	stw	fp,0(r3)
    12fc:	1cc00115 	stw	r19,4(r3)
    1300:	dc800f15 	stw	r18,60(sp)
    1304:	dc400e15 	stw	r17,56(sp)
    1308:	a47ff60e 	bge	r20,r17,12e4 <___vfprintf_internal_r+0xd00>
    130c:	d9015017 	ldw	r4,1344(sp)
    1310:	b00b883a 	mov	r5,r22
    1314:	d9800d04 	addi	r6,sp,52
    1318:	000058c0 	call	58c <__sprint_r>
    131c:	103e691e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1320:	dc800f17 	ldw	r18,60(sp)
    1324:	dc400e17 	ldw	r17,56(sp)
    1328:	d8c01a04 	addi	r3,sp,104
    132c:	003fee06 	br	12e8 <___vfprintf_internal_r+0xd04>
    1330:	d8814817 	ldw	r2,1312(sp)
    1334:	143fffc4 	addi	r16,r2,-1
    1338:	043e970e 	bge	zero,r16,d98 <___vfprintf_internal_r+0x7b4>
    133c:	00800404 	movi	r2,16
    1340:	1400180e 	bge	r2,r16,13a4 <___vfprintf_internal_r+0xdc0>
    1344:	1029883a 	mov	r20,r2
    1348:	07000074 	movhi	fp,1
    134c:	e734a204 	addi	fp,fp,-11640
    1350:	054001c4 	movi	r21,7
    1354:	00000306 	br	1364 <___vfprintf_internal_r+0xd80>
    1358:	9cc00204 	addi	r19,r19,8
    135c:	843ffc04 	addi	r16,r16,-16
    1360:	a400120e 	bge	r20,r16,13ac <___vfprintf_internal_r+0xdc8>
    1364:	94800404 	addi	r18,r18,16
    1368:	8c400044 	addi	r17,r17,1
    136c:	9f000015 	stw	fp,0(r19)
    1370:	9d000115 	stw	r20,4(r19)
    1374:	dc800f15 	stw	r18,60(sp)
    1378:	dc400e15 	stw	r17,56(sp)
    137c:	ac7ff60e 	bge	r21,r17,1358 <___vfprintf_internal_r+0xd74>
    1380:	d9015017 	ldw	r4,1344(sp)
    1384:	b00b883a 	mov	r5,r22
    1388:	d9800d04 	addi	r6,sp,52
    138c:	000058c0 	call	58c <__sprint_r>
    1390:	103e4c1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1394:	dc800f17 	ldw	r18,60(sp)
    1398:	dc400e17 	ldw	r17,56(sp)
    139c:	dcc01a04 	addi	r19,sp,104
    13a0:	003fee06 	br	135c <___vfprintf_internal_r+0xd78>
    13a4:	07000074 	movhi	fp,1
    13a8:	e734a204 	addi	fp,fp,-11640
    13ac:	9425883a 	add	r18,r18,r16
    13b0:	8c400044 	addi	r17,r17,1
    13b4:	008001c4 	movi	r2,7
    13b8:	9f000015 	stw	fp,0(r19)
    13bc:	9c000115 	stw	r16,4(r19)
    13c0:	dc800f15 	stw	r18,60(sp)
    13c4:	dc400e15 	stw	r17,56(sp)
    13c8:	147e720e 	bge	r2,r17,d94 <___vfprintf_internal_r+0x7b0>
    13cc:	d9015017 	ldw	r4,1344(sp)
    13d0:	b00b883a 	mov	r5,r22
    13d4:	d9800d04 	addi	r6,sp,52
    13d8:	000058c0 	call	58c <__sprint_r>
    13dc:	103e391e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    13e0:	dc800f17 	ldw	r18,60(sp)
    13e4:	dc400e17 	ldw	r17,56(sp)
    13e8:	dcc01a04 	addi	r19,sp,104
    13ec:	003e6a06 	br	d98 <___vfprintf_internal_r+0x7b4>
    13f0:	d9015017 	ldw	r4,1344(sp)
    13f4:	b00b883a 	mov	r5,r22
    13f8:	d9800d04 	addi	r6,sp,52
    13fc:	d9c15215 	stw	r7,1352(sp)
    1400:	000058c0 	call	58c <__sprint_r>
    1404:	d9c15217 	ldw	r7,1352(sp)
    1408:	103e2e1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    140c:	dc800f17 	ldw	r18,60(sp)
    1410:	dc400e17 	ldw	r17,56(sp)
    1414:	dd401a04 	addi	r21,sp,104
    1418:	003dba06 	br	b04 <___vfprintf_internal_r+0x520>
    141c:	d9015017 	ldw	r4,1344(sp)
    1420:	b00b883a 	mov	r5,r22
    1424:	d9800d04 	addi	r6,sp,52
    1428:	000058c0 	call	58c <__sprint_r>
    142c:	103e251e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1430:	dc800f17 	ldw	r18,60(sp)
    1434:	dc400e17 	ldw	r17,56(sp)
    1438:	dcc01a04 	addi	r19,sp,104
    143c:	003e4206 	br	d48 <___vfprintf_internal_r+0x764>
    1440:	d9015017 	ldw	r4,1344(sp)
    1444:	b00b883a 	mov	r5,r22
    1448:	d9800d04 	addi	r6,sp,52
    144c:	000058c0 	call	58c <__sprint_r>
    1450:	103e1c1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1454:	dc800f17 	ldw	r18,60(sp)
    1458:	dc400e17 	ldw	r17,56(sp)
    145c:	d8c01a04 	addi	r3,sp,104
    1460:	003e2e06 	br	d1c <___vfprintf_internal_r+0x738>
    1464:	d9414d17 	ldw	r5,1332(sp)
    1468:	2880004c 	andi	r2,r5,1
    146c:	1005003a 	cmpeq	r2,r2,zero
    1470:	103dda1e 	bne	r2,zero,bdc <___vfprintf_internal_r+0x5f8>
    1474:	003e9f06 	br	ef4 <___vfprintf_internal_r+0x910>
    1478:	d8c14217 	ldw	r3,1288(sp)
    147c:	9125883a 	add	r18,r18,r4
    1480:	8c400044 	addi	r17,r17,1
    1484:	008001c4 	movi	r2,7
    1488:	a8c00015 	stw	r3,0(r21)
    148c:	a9000115 	stw	r4,4(r21)
    1490:	dc800f15 	stw	r18,60(sp)
    1494:	dc400e15 	stw	r17,56(sp)
    1498:	14426616 	blt	r2,r17,1e34 <___vfprintf_internal_r+0x1850>
    149c:	a8c00204 	addi	r3,r21,8
    14a0:	d9414a17 	ldw	r5,1320(sp)
    14a4:	00800044 	movi	r2,1
    14a8:	94800044 	addi	r18,r18,1
    14ac:	8c400044 	addi	r17,r17,1
    14b0:	18800115 	stw	r2,4(r3)
    14b4:	008001c4 	movi	r2,7
    14b8:	19400015 	stw	r5,0(r3)
    14bc:	dc800f15 	stw	r18,60(sp)
    14c0:	dc400e15 	stw	r17,56(sp)
    14c4:	2021883a 	mov	r16,r4
    14c8:	14425016 	blt	r2,r17,1e0c <___vfprintf_internal_r+0x1828>
    14cc:	19400204 	addi	r5,r3,8
    14d0:	d9814817 	ldw	r6,1312(sp)
    14d4:	8c400044 	addi	r17,r17,1
    14d8:	dc400e15 	stw	r17,56(sp)
    14dc:	3107c83a 	sub	r3,r6,r4
    14e0:	d9014217 	ldw	r4,1288(sp)
    14e4:	90e5883a 	add	r18,r18,r3
    14e8:	28c00115 	stw	r3,4(r5)
    14ec:	8105883a 	add	r2,r16,r4
    14f0:	28800015 	stw	r2,0(r5)
    14f4:	008001c4 	movi	r2,7
    14f8:	dc800f15 	stw	r18,60(sp)
    14fc:	147f1d16 	blt	r2,r17,1174 <___vfprintf_internal_r+0xb90>
    1500:	28c00204 	addi	r3,r5,8
    1504:	003db506 	br	bdc <___vfprintf_internal_r+0x5f8>
    1508:	3c000017 	ldw	r16,0(r7)
    150c:	3c400117 	ldw	r17,4(r7)
    1510:	39800204 	addi	r6,r7,8
    1514:	01000044 	movi	r4,1
    1518:	d9814115 	stw	r6,1284(sp)
    151c:	d8000405 	stb	zero,16(sp)
    1520:	003ebe06 	br	101c <___vfprintf_internal_r+0xa38>
    1524:	3c000017 	ldw	r16,0(r7)
    1528:	3c400117 	ldw	r17,4(r7)
    152c:	38800204 	addi	r2,r7,8
    1530:	d8814115 	stw	r2,1284(sp)
    1534:	003eb706 	br	1014 <___vfprintf_internal_r+0xa30>
    1538:	3c000017 	ldw	r16,0(r7)
    153c:	3c400117 	ldw	r17,4(r7)
    1540:	39000204 	addi	r4,r7,8
    1544:	d9014115 	stw	r4,1284(sp)
    1548:	0009883a 	mov	r4,zero
    154c:	d8000405 	stb	zero,16(sp)
    1550:	003eb206 	br	101c <___vfprintf_internal_r+0xa38>
    1554:	38c00017 	ldw	r3,0(r7)
    1558:	39c00104 	addi	r7,r7,4
    155c:	d8c14b15 	stw	r3,1324(sp)
    1560:	1800d10e 	bge	r3,zero,18a8 <___vfprintf_internal_r+0x12c4>
    1564:	00c7c83a 	sub	r3,zero,r3
    1568:	d8c14b15 	stw	r3,1324(sp)
    156c:	d9014d17 	ldw	r4,1332(sp)
    1570:	b8c00007 	ldb	r3,0(r23)
    1574:	21000114 	ori	r4,r4,4
    1578:	d9014d15 	stw	r4,1332(sp)
    157c:	003c9806 	br	7e0 <___vfprintf_internal_r+0x1fc>
    1580:	d9814d17 	ldw	r6,1332(sp)
    1584:	3080080c 	andi	r2,r6,32
    1588:	1001f026 	beq	r2,zero,1d4c <___vfprintf_internal_r+0x1768>
    158c:	d9014c17 	ldw	r4,1328(sp)
    1590:	38800017 	ldw	r2,0(r7)
    1594:	39c00104 	addi	r7,r7,4
    1598:	d9c14115 	stw	r7,1284(sp)
    159c:	2007d7fa 	srai	r3,r4,31
    15a0:	d9c14117 	ldw	r7,1284(sp)
    15a4:	11000015 	stw	r4,0(r2)
    15a8:	10c00115 	stw	r3,4(r2)
    15ac:	003c6906 	br	754 <___vfprintf_internal_r+0x170>
    15b0:	b8c00007 	ldb	r3,0(r23)
    15b4:	00801b04 	movi	r2,108
    15b8:	18824f26 	beq	r3,r2,1ef8 <___vfprintf_internal_r+0x1914>
    15bc:	d9414d17 	ldw	r5,1332(sp)
    15c0:	29400414 	ori	r5,r5,16
    15c4:	d9414d15 	stw	r5,1332(sp)
    15c8:	003c8506 	br	7e0 <___vfprintf_internal_r+0x1fc>
    15cc:	d9814d17 	ldw	r6,1332(sp)
    15d0:	b8c00007 	ldb	r3,0(r23)
    15d4:	31800814 	ori	r6,r6,32
    15d8:	d9814d15 	stw	r6,1332(sp)
    15dc:	003c8006 	br	7e0 <___vfprintf_internal_r+0x1fc>
    15e0:	d8814d17 	ldw	r2,1332(sp)
    15e4:	3c000017 	ldw	r16,0(r7)
    15e8:	00c01e04 	movi	r3,120
    15ec:	10800094 	ori	r2,r2,2
    15f0:	d8814d15 	stw	r2,1332(sp)
    15f4:	39c00104 	addi	r7,r7,4
    15f8:	01400074 	movhi	r5,1
    15fc:	29748a04 	addi	r5,r5,-11736
    1600:	00800c04 	movi	r2,48
    1604:	0023883a 	mov	r17,zero
    1608:	01000084 	movi	r4,2
    160c:	d9c14115 	stw	r7,1284(sp)
    1610:	d8c14e15 	stw	r3,1336(sp)
    1614:	d9414515 	stw	r5,1300(sp)
    1618:	d8800505 	stb	r2,20(sp)
    161c:	d8c00545 	stb	r3,21(sp)
    1620:	d8000405 	stb	zero,16(sp)
    1624:	003e7d06 	br	101c <___vfprintf_internal_r+0xa38>
    1628:	d8814d17 	ldw	r2,1332(sp)
    162c:	b8c00007 	ldb	r3,0(r23)
    1630:	10801014 	ori	r2,r2,64
    1634:	d8814d15 	stw	r2,1332(sp)
    1638:	003c6906 	br	7e0 <___vfprintf_internal_r+0x1fc>
    163c:	d9414d17 	ldw	r5,1332(sp)
    1640:	2880020c 	andi	r2,r5,8
    1644:	1001df26 	beq	r2,zero,1dc4 <___vfprintf_internal_r+0x17e0>
    1648:	39800017 	ldw	r6,0(r7)
    164c:	38800204 	addi	r2,r7,8
    1650:	d8814115 	stw	r2,1284(sp)
    1654:	d9814315 	stw	r6,1292(sp)
    1658:	39c00117 	ldw	r7,4(r7)
    165c:	d9c14415 	stw	r7,1296(sp)
    1660:	d9014317 	ldw	r4,1292(sp)
    1664:	d9414417 	ldw	r5,1296(sp)
    1668:	0006eec0 	call	6eec <__isinfd>
    166c:	10021726 	beq	r2,zero,1ecc <___vfprintf_internal_r+0x18e8>
    1670:	d9014317 	ldw	r4,1292(sp)
    1674:	d9414417 	ldw	r5,1296(sp)
    1678:	000d883a 	mov	r6,zero
    167c:	000f883a 	mov	r7,zero
    1680:	0008f340 	call	8f34 <__ltdf2>
    1684:	1002ca16 	blt	r2,zero,21b0 <___vfprintf_internal_r+0x1bcc>
    1688:	d9414e17 	ldw	r5,1336(sp)
    168c:	008011c4 	movi	r2,71
    1690:	11420a16 	blt	r2,r5,1ebc <___vfprintf_internal_r+0x18d8>
    1694:	01800074 	movhi	r6,1
    1698:	31b48f04 	addi	r6,r6,-11716
    169c:	d9814215 	stw	r6,1288(sp)
    16a0:	d9014d17 	ldw	r4,1332(sp)
    16a4:	00c000c4 	movi	r3,3
    16a8:	00bfdfc4 	movi	r2,-129
    16ac:	2088703a 	and	r4,r4,r2
    16b0:	180f883a 	mov	r7,r3
    16b4:	d8c14615 	stw	r3,1304(sp)
    16b8:	d9014d15 	stw	r4,1332(sp)
    16bc:	d8014715 	stw	zero,1308(sp)
    16c0:	003e6a06 	br	106c <___vfprintf_internal_r+0xa88>
    16c4:	38800017 	ldw	r2,0(r7)
    16c8:	00c00044 	movi	r3,1
    16cc:	39c00104 	addi	r7,r7,4
    16d0:	d9c14115 	stw	r7,1284(sp)
    16d4:	d9001004 	addi	r4,sp,64
    16d8:	180f883a 	mov	r7,r3
    16dc:	d8c14615 	stw	r3,1304(sp)
    16e0:	d9014215 	stw	r4,1288(sp)
    16e4:	d8801005 	stb	r2,64(sp)
    16e8:	d8000405 	stb	zero,16(sp)
    16ec:	003cac06 	br	9a0 <___vfprintf_internal_r+0x3bc>
    16f0:	01400074 	movhi	r5,1
    16f4:	29749504 	addi	r5,r5,-11692
    16f8:	d9414515 	stw	r5,1300(sp)
    16fc:	d9814d17 	ldw	r6,1332(sp)
    1700:	3080080c 	andi	r2,r6,32
    1704:	1000f926 	beq	r2,zero,1aec <___vfprintf_internal_r+0x1508>
    1708:	3c000017 	ldw	r16,0(r7)
    170c:	3c400117 	ldw	r17,4(r7)
    1710:	38800204 	addi	r2,r7,8
    1714:	d8814115 	stw	r2,1284(sp)
    1718:	d9414d17 	ldw	r5,1332(sp)
    171c:	2880004c 	andi	r2,r5,1
    1720:	1005003a 	cmpeq	r2,r2,zero
    1724:	1000b31e 	bne	r2,zero,19f4 <___vfprintf_internal_r+0x1410>
    1728:	8444b03a 	or	r2,r16,r17
    172c:	1000b126 	beq	r2,zero,19f4 <___vfprintf_internal_r+0x1410>
    1730:	d9814e17 	ldw	r6,1336(sp)
    1734:	29400094 	ori	r5,r5,2
    1738:	00800c04 	movi	r2,48
    173c:	01000084 	movi	r4,2
    1740:	d9414d15 	stw	r5,1332(sp)
    1744:	d8800505 	stb	r2,20(sp)
    1748:	d9800545 	stb	r6,21(sp)
    174c:	d8000405 	stb	zero,16(sp)
    1750:	003e3206 	br	101c <___vfprintf_internal_r+0xa38>
    1754:	01800074 	movhi	r6,1
    1758:	31b48a04 	addi	r6,r6,-11736
    175c:	d9814515 	stw	r6,1300(sp)
    1760:	003fe606 	br	16fc <___vfprintf_internal_r+0x1118>
    1764:	00800ac4 	movi	r2,43
    1768:	d8800405 	stb	r2,16(sp)
    176c:	b8c00007 	ldb	r3,0(r23)
    1770:	003c1b06 	br	7e0 <___vfprintf_internal_r+0x1fc>
    1774:	d8814d17 	ldw	r2,1332(sp)
    1778:	b8c00007 	ldb	r3,0(r23)
    177c:	10800054 	ori	r2,r2,1
    1780:	d8814d15 	stw	r2,1332(sp)
    1784:	003c1606 	br	7e0 <___vfprintf_internal_r+0x1fc>
    1788:	d8800407 	ldb	r2,16(sp)
    178c:	1000461e 	bne	r2,zero,18a8 <___vfprintf_internal_r+0x12c4>
    1790:	00800804 	movi	r2,32
    1794:	d8800405 	stb	r2,16(sp)
    1798:	b8c00007 	ldb	r3,0(r23)
    179c:	003c1006 	br	7e0 <___vfprintf_internal_r+0x1fc>
    17a0:	d9814d17 	ldw	r6,1332(sp)
    17a4:	b8c00007 	ldb	r3,0(r23)
    17a8:	31800214 	ori	r6,r6,8
    17ac:	d9814d15 	stw	r6,1332(sp)
    17b0:	003c0b06 	br	7e0 <___vfprintf_internal_r+0x1fc>
    17b4:	0007883a 	mov	r3,zero
    17b8:	01000244 	movi	r4,9
    17bc:	188002a4 	muli	r2,r3,10
    17c0:	b8c00007 	ldb	r3,0(r23)
    17c4:	d9814e17 	ldw	r6,1336(sp)
    17c8:	bdc00044 	addi	r23,r23,1
    17cc:	d8c14e15 	stw	r3,1336(sp)
    17d0:	d9414e17 	ldw	r5,1336(sp)
    17d4:	3085883a 	add	r2,r6,r2
    17d8:	10fff404 	addi	r3,r2,-48
    17dc:	28bff404 	addi	r2,r5,-48
    17e0:	20bff62e 	bgeu	r4,r2,17bc <___vfprintf_internal_r+0x11d8>
    17e4:	d8c14b15 	stw	r3,1324(sp)
    17e8:	003bff06 	br	7e8 <___vfprintf_internal_r+0x204>
    17ec:	d9414d17 	ldw	r5,1332(sp)
    17f0:	b8c00007 	ldb	r3,0(r23)
    17f4:	29402014 	ori	r5,r5,128
    17f8:	d9414d15 	stw	r5,1332(sp)
    17fc:	003bf806 	br	7e0 <___vfprintf_internal_r+0x1fc>
    1800:	b8c00007 	ldb	r3,0(r23)
    1804:	00800a84 	movi	r2,42
    1808:	bdc00044 	addi	r23,r23,1
    180c:	18831526 	beq	r3,r2,2464 <___vfprintf_internal_r+0x1e80>
    1810:	d8c14e15 	stw	r3,1336(sp)
    1814:	18bff404 	addi	r2,r3,-48
    1818:	00c00244 	movi	r3,9
    181c:	18827836 	bltu	r3,r2,2200 <___vfprintf_internal_r+0x1c1c>
    1820:	000d883a 	mov	r6,zero
    1824:	308002a4 	muli	r2,r6,10
    1828:	b9800007 	ldb	r6,0(r23)
    182c:	d9414e17 	ldw	r5,1336(sp)
    1830:	bdc00044 	addi	r23,r23,1
    1834:	d9814e15 	stw	r6,1336(sp)
    1838:	d9014e17 	ldw	r4,1336(sp)
    183c:	1145883a 	add	r2,r2,r5
    1840:	11bff404 	addi	r6,r2,-48
    1844:	20bff404 	addi	r2,r4,-48
    1848:	18bff62e 	bgeu	r3,r2,1824 <___vfprintf_internal_r+0x1240>
    184c:	3027883a 	mov	r19,r6
    1850:	303be50e 	bge	r6,zero,7e8 <___vfprintf_internal_r+0x204>
    1854:	04ffffc4 	movi	r19,-1
    1858:	003be306 	br	7e8 <___vfprintf_internal_r+0x204>
    185c:	d8000405 	stb	zero,16(sp)
    1860:	39800017 	ldw	r6,0(r7)
    1864:	39c00104 	addi	r7,r7,4
    1868:	d9c14115 	stw	r7,1284(sp)
    186c:	d9814215 	stw	r6,1288(sp)
    1870:	3001c926 	beq	r6,zero,1f98 <___vfprintf_internal_r+0x19b4>
    1874:	98000e16 	blt	r19,zero,18b0 <___vfprintf_internal_r+0x12cc>
    1878:	d9014217 	ldw	r4,1288(sp)
    187c:	000b883a 	mov	r5,zero
    1880:	980d883a 	mov	r6,r19
    1884:	00056a00 	call	56a0 <memchr>
    1888:	10025926 	beq	r2,zero,21f0 <___vfprintf_internal_r+0x1c0c>
    188c:	d8c14217 	ldw	r3,1288(sp)
    1890:	10cfc83a 	sub	r7,r2,r3
    1894:	99c19e16 	blt	r19,r7,1f10 <___vfprintf_internal_r+0x192c>
    1898:	d9c14615 	stw	r7,1304(sp)
    189c:	38000916 	blt	r7,zero,18c4 <___vfprintf_internal_r+0x12e0>
    18a0:	d8014715 	stw	zero,1308(sp)
    18a4:	003df106 	br	106c <___vfprintf_internal_r+0xa88>
    18a8:	b8c00007 	ldb	r3,0(r23)
    18ac:	003bcc06 	br	7e0 <___vfprintf_internal_r+0x1fc>
    18b0:	d9014217 	ldw	r4,1288(sp)
    18b4:	00005180 	call	518 <strlen>
    18b8:	d8814615 	stw	r2,1304(sp)
    18bc:	100f883a 	mov	r7,r2
    18c0:	103ff70e 	bge	r2,zero,18a0 <___vfprintf_internal_r+0x12bc>
    18c4:	d8014615 	stw	zero,1304(sp)
    18c8:	d8014715 	stw	zero,1308(sp)
    18cc:	003de706 	br	106c <___vfprintf_internal_r+0xa88>
    18d0:	20c03fcc 	andi	r3,r4,255
    18d4:	00800044 	movi	r2,1
    18d8:	18802d26 	beq	r3,r2,1990 <___vfprintf_internal_r+0x13ac>
    18dc:	18800e36 	bltu	r3,r2,1918 <___vfprintf_internal_r+0x1334>
    18e0:	00800084 	movi	r2,2
    18e4:	1880fa26 	beq	r3,r2,1cd0 <___vfprintf_internal_r+0x16ec>
    18e8:	01000074 	movhi	r4,1
    18ec:	21349a04 	addi	r4,r4,-11672
    18f0:	00005180 	call	518 <strlen>
    18f4:	100f883a 	mov	r7,r2
    18f8:	dcc14615 	stw	r19,1304(sp)
    18fc:	9880010e 	bge	r19,r2,1904 <___vfprintf_internal_r+0x1320>
    1900:	d8814615 	stw	r2,1304(sp)
    1904:	00800074 	movhi	r2,1
    1908:	10b49a04 	addi	r2,r2,-11672
    190c:	dcc14715 	stw	r19,1308(sp)
    1910:	d8814215 	stw	r2,1288(sp)
    1914:	003dd506 	br	106c <___vfprintf_internal_r+0xa88>
    1918:	d9401a04 	addi	r5,sp,104
    191c:	dd001004 	addi	r20,sp,64
    1920:	d9414215 	stw	r5,1288(sp)
    1924:	880a977a 	slli	r5,r17,29
    1928:	d9814217 	ldw	r6,1288(sp)
    192c:	8004d0fa 	srli	r2,r16,3
    1930:	8806d0fa 	srli	r3,r17,3
    1934:	810001cc 	andi	r4,r16,7
    1938:	2884b03a 	or	r2,r5,r2
    193c:	31bfffc4 	addi	r6,r6,-1
    1940:	21000c04 	addi	r4,r4,48
    1944:	d9814215 	stw	r6,1288(sp)
    1948:	10cab03a 	or	r5,r2,r3
    194c:	31000005 	stb	r4,0(r6)
    1950:	1021883a 	mov	r16,r2
    1954:	1823883a 	mov	r17,r3
    1958:	283ff21e 	bne	r5,zero,1924 <___vfprintf_internal_r+0x1340>
    195c:	d8c14d17 	ldw	r3,1332(sp)
    1960:	1880004c 	andi	r2,r3,1
    1964:	1005003a 	cmpeq	r2,r2,zero
    1968:	103db91e 	bne	r2,zero,1050 <___vfprintf_internal_r+0xa6c>
    196c:	20803fcc 	andi	r2,r4,255
    1970:	1080201c 	xori	r2,r2,128
    1974:	10bfe004 	addi	r2,r2,-128
    1978:	00c00c04 	movi	r3,48
    197c:	10fdb426 	beq	r2,r3,1050 <___vfprintf_internal_r+0xa6c>
    1980:	31bfffc4 	addi	r6,r6,-1
    1984:	d9814215 	stw	r6,1288(sp)
    1988:	30c00005 	stb	r3,0(r6)
    198c:	003db006 	br	1050 <___vfprintf_internal_r+0xa6c>
    1990:	88800068 	cmpgeui	r2,r17,1
    1994:	10002c1e 	bne	r2,zero,1a48 <___vfprintf_internal_r+0x1464>
    1998:	8800021e 	bne	r17,zero,19a4 <___vfprintf_internal_r+0x13c0>
    199c:	00800244 	movi	r2,9
    19a0:	14002936 	bltu	r2,r16,1a48 <___vfprintf_internal_r+0x1464>
    19a4:	d90019c4 	addi	r4,sp,103
    19a8:	dd001004 	addi	r20,sp,64
    19ac:	d9014215 	stw	r4,1288(sp)
    19b0:	d9014217 	ldw	r4,1288(sp)
    19b4:	80800c04 	addi	r2,r16,48
    19b8:	20800005 	stb	r2,0(r4)
    19bc:	003da406 	br	1050 <___vfprintf_internal_r+0xa6c>
    19c0:	dc400e17 	ldw	r17,56(sp)
    19c4:	07000074 	movhi	fp,1
    19c8:	e734a204 	addi	fp,fp,-11640
    19cc:	9425883a 	add	r18,r18,r16
    19d0:	8c400044 	addi	r17,r17,1
    19d4:	008001c4 	movi	r2,7
    19d8:	1f000015 	stw	fp,0(r3)
    19dc:	1c000115 	stw	r16,4(r3)
    19e0:	dc800f15 	stw	r18,60(sp)
    19e4:	dc400e15 	stw	r17,56(sp)
    19e8:	147de216 	blt	r2,r17,1174 <___vfprintf_internal_r+0xb90>
    19ec:	18c00204 	addi	r3,r3,8
    19f0:	003c7a06 	br	bdc <___vfprintf_internal_r+0x5f8>
    19f4:	01000084 	movi	r4,2
    19f8:	d8000405 	stb	zero,16(sp)
    19fc:	003d8706 	br	101c <___vfprintf_internal_r+0xa38>
    1a00:	d9814d17 	ldw	r6,1332(sp)
    1a04:	30c4703a 	and	r2,r6,r3
    1a08:	1005003a 	cmpeq	r2,r2,zero
    1a0c:	103cb926 	beq	r2,zero,cf4 <___vfprintf_internal_r+0x710>
    1a10:	d9014217 	ldw	r4,1288(sp)
    1a14:	94800044 	addi	r18,r18,1
    1a18:	8c400044 	addi	r17,r17,1
    1a1c:	008001c4 	movi	r2,7
    1a20:	a9000015 	stw	r4,0(r21)
    1a24:	a8c00115 	stw	r3,4(r21)
    1a28:	dc800f15 	stw	r18,60(sp)
    1a2c:	dc400e15 	stw	r17,56(sp)
    1a30:	147e6616 	blt	r2,r17,13cc <___vfprintf_internal_r+0xde8>
    1a34:	acc00204 	addi	r19,r21,8
    1a38:	003cd706 	br	d98 <___vfprintf_internal_r+0x7b4>
    1a3c:	07000074 	movhi	fp,1
    1a40:	e734a204 	addi	fp,fp,-11640
    1a44:	003c4f06 	br	b84 <___vfprintf_internal_r+0x5a0>
    1a48:	dd001004 	addi	r20,sp,64
    1a4c:	dc801a04 	addi	r18,sp,104
    1a50:	8009883a 	mov	r4,r16
    1a54:	880b883a 	mov	r5,r17
    1a58:	01800284 	movi	r6,10
    1a5c:	000f883a 	mov	r7,zero
    1a60:	0007c440 	call	7c44 <__umoddi3>
    1a64:	12000c04 	addi	r8,r2,48
    1a68:	94bfffc4 	addi	r18,r18,-1
    1a6c:	8009883a 	mov	r4,r16
    1a70:	880b883a 	mov	r5,r17
    1a74:	01800284 	movi	r6,10
    1a78:	000f883a 	mov	r7,zero
    1a7c:	92000005 	stb	r8,0(r18)
    1a80:	00076680 	call	7668 <__udivdi3>
    1a84:	1009883a 	mov	r4,r2
    1a88:	1021883a 	mov	r16,r2
    1a8c:	18800068 	cmpgeui	r2,r3,1
    1a90:	1823883a 	mov	r17,r3
    1a94:	103fee1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x146c>
    1a98:	1800021e 	bne	r3,zero,1aa4 <___vfprintf_internal_r+0x14c0>
    1a9c:	00800244 	movi	r2,9
    1aa0:	113feb36 	bltu	r2,r4,1a50 <___vfprintf_internal_r+0x146c>
    1aa4:	94bfffc4 	addi	r18,r18,-1
    1aa8:	dc814215 	stw	r18,1288(sp)
    1aac:	003fc006 	br	19b0 <___vfprintf_internal_r+0x13cc>
    1ab0:	d9014d17 	ldw	r4,1332(sp)
    1ab4:	2080004c 	andi	r2,r4,1
    1ab8:	10009a1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x1740>
    1abc:	d9401a04 	addi	r5,sp,104
    1ac0:	dd001004 	addi	r20,sp,64
    1ac4:	d9414215 	stw	r5,1288(sp)
    1ac8:	003d6106 	br	1050 <___vfprintf_internal_r+0xa6c>
    1acc:	d9015017 	ldw	r4,1344(sp)
    1ad0:	b00b883a 	mov	r5,r22
    1ad4:	d9800d04 	addi	r6,sp,52
    1ad8:	000058c0 	call	58c <__sprint_r>
    1adc:	103c791e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1ae0:	dc800f17 	ldw	r18,60(sp)
    1ae4:	d8c01a04 	addi	r3,sp,104
    1ae8:	003cff06 	br	ee8 <___vfprintf_internal_r+0x904>
    1aec:	d8c14d17 	ldw	r3,1332(sp)
    1af0:	1880040c 	andi	r2,r3,16
    1af4:	1000711e 	bne	r2,zero,1cbc <___vfprintf_internal_r+0x16d8>
    1af8:	d9014d17 	ldw	r4,1332(sp)
    1afc:	2080100c 	andi	r2,r4,64
    1b00:	10006e26 	beq	r2,zero,1cbc <___vfprintf_internal_r+0x16d8>
    1b04:	3c00000b 	ldhu	r16,0(r7)
    1b08:	0023883a 	mov	r17,zero
    1b0c:	39c00104 	addi	r7,r7,4
    1b10:	d9c14115 	stw	r7,1284(sp)
    1b14:	003f0006 	br	1718 <___vfprintf_internal_r+0x1134>
    1b18:	dc400e17 	ldw	r17,56(sp)
    1b1c:	07000074 	movhi	fp,1
    1b20:	e734a204 	addi	fp,fp,-11640
    1b24:	9425883a 	add	r18,r18,r16
    1b28:	8c400044 	addi	r17,r17,1
    1b2c:	008001c4 	movi	r2,7
    1b30:	1f000015 	stw	fp,0(r3)
    1b34:	1c000115 	stw	r16,4(r3)
    1b38:	dc800f15 	stw	r18,60(sp)
    1b3c:	dc400e15 	stw	r17,56(sp)
    1b40:	147d7616 	blt	r2,r17,111c <___vfprintf_internal_r+0xb38>
    1b44:	18c00204 	addi	r3,r3,8
    1b48:	003d7b06 	br	1138 <___vfprintf_internal_r+0xb54>
    1b4c:	dc800f17 	ldw	r18,60(sp)
    1b50:	dc400e17 	ldw	r17,56(sp)
    1b54:	07000074 	movhi	fp,1
    1b58:	e734a604 	addi	fp,fp,-11624
    1b5c:	003bc006 	br	a60 <___vfprintf_internal_r+0x47c>
    1b60:	d9015017 	ldw	r4,1344(sp)
    1b64:	b00b883a 	mov	r5,r22
    1b68:	d9800d04 	addi	r6,sp,52
    1b6c:	000058c0 	call	58c <__sprint_r>
    1b70:	103c541e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1b74:	dc800f17 	ldw	r18,60(sp)
    1b78:	d8c01a04 	addi	r3,sp,104
    1b7c:	003ce906 	br	f24 <___vfprintf_internal_r+0x940>
    1b80:	3c000017 	ldw	r16,0(r7)
    1b84:	0009883a 	mov	r4,zero
    1b88:	39c00104 	addi	r7,r7,4
    1b8c:	0023883a 	mov	r17,zero
    1b90:	d9c14115 	stw	r7,1284(sp)
    1b94:	d8000405 	stb	zero,16(sp)
    1b98:	003d2006 	br	101c <___vfprintf_internal_r+0xa38>
    1b9c:	38800017 	ldw	r2,0(r7)
    1ba0:	39c00104 	addi	r7,r7,4
    1ba4:	d9c14115 	stw	r7,1284(sp)
    1ba8:	1023d7fa 	srai	r17,r2,31
    1bac:	1021883a 	mov	r16,r2
    1bb0:	003d1806 	br	1014 <___vfprintf_internal_r+0xa30>
    1bb4:	3c000017 	ldw	r16,0(r7)
    1bb8:	01000044 	movi	r4,1
    1bbc:	39c00104 	addi	r7,r7,4
    1bc0:	0023883a 	mov	r17,zero
    1bc4:	d9c14115 	stw	r7,1284(sp)
    1bc8:	d8000405 	stb	zero,16(sp)
    1bcc:	003d1306 	br	101c <___vfprintf_internal_r+0xa38>
    1bd0:	00800074 	movhi	r2,1
    1bd4:	10b4a104 	addi	r2,r2,-11644
    1bd8:	94800044 	addi	r18,r18,1
    1bdc:	8c400044 	addi	r17,r17,1
    1be0:	a8800015 	stw	r2,0(r21)
    1be4:	00c00044 	movi	r3,1
    1be8:	008001c4 	movi	r2,7
    1bec:	a8c00115 	stw	r3,4(r21)
    1bf0:	dc800f15 	stw	r18,60(sp)
    1bf4:	dc400e15 	stw	r17,56(sp)
    1bf8:	1440ca16 	blt	r2,r17,1f24 <___vfprintf_internal_r+0x1940>
    1bfc:	a8c00204 	addi	r3,r21,8
    1c00:	2000061e 	bne	r4,zero,1c1c <___vfprintf_internal_r+0x1638>
    1c04:	d9414817 	ldw	r5,1312(sp)
    1c08:	2800041e 	bne	r5,zero,1c1c <___vfprintf_internal_r+0x1638>
    1c0c:	d9814d17 	ldw	r6,1332(sp)
    1c10:	3080004c 	andi	r2,r6,1
    1c14:	1005003a 	cmpeq	r2,r2,zero
    1c18:	103bf01e 	bne	r2,zero,bdc <___vfprintf_internal_r+0x5f8>
    1c1c:	00800044 	movi	r2,1
    1c20:	dc400e17 	ldw	r17,56(sp)
    1c24:	18800115 	stw	r2,4(r3)
    1c28:	d8814a17 	ldw	r2,1320(sp)
    1c2c:	94800044 	addi	r18,r18,1
    1c30:	8c400044 	addi	r17,r17,1
    1c34:	18800015 	stw	r2,0(r3)
    1c38:	008001c4 	movi	r2,7
    1c3c:	dc800f15 	stw	r18,60(sp)
    1c40:	dc400e15 	stw	r17,56(sp)
    1c44:	1440ca16 	blt	r2,r17,1f70 <___vfprintf_internal_r+0x198c>
    1c48:	18c00204 	addi	r3,r3,8
    1c4c:	0121c83a 	sub	r16,zero,r4
    1c50:	0400500e 	bge	zero,r16,1d94 <___vfprintf_internal_r+0x17b0>
    1c54:	00800404 	movi	r2,16
    1c58:	1400800e 	bge	r2,r16,1e5c <___vfprintf_internal_r+0x1878>
    1c5c:	1027883a 	mov	r19,r2
    1c60:	07000074 	movhi	fp,1
    1c64:	e734a204 	addi	fp,fp,-11640
    1c68:	050001c4 	movi	r20,7
    1c6c:	00000306 	br	1c7c <___vfprintf_internal_r+0x1698>
    1c70:	18c00204 	addi	r3,r3,8
    1c74:	843ffc04 	addi	r16,r16,-16
    1c78:	9c007a0e 	bge	r19,r16,1e64 <___vfprintf_internal_r+0x1880>
    1c7c:	94800404 	addi	r18,r18,16
    1c80:	8c400044 	addi	r17,r17,1
    1c84:	1f000015 	stw	fp,0(r3)
    1c88:	1cc00115 	stw	r19,4(r3)
    1c8c:	dc800f15 	stw	r18,60(sp)
    1c90:	dc400e15 	stw	r17,56(sp)
    1c94:	a47ff60e 	bge	r20,r17,1c70 <___vfprintf_internal_r+0x168c>
    1c98:	d9015017 	ldw	r4,1344(sp)
    1c9c:	b00b883a 	mov	r5,r22
    1ca0:	d9800d04 	addi	r6,sp,52
    1ca4:	000058c0 	call	58c <__sprint_r>
    1ca8:	103c061e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1cac:	dc800f17 	ldw	r18,60(sp)
    1cb0:	dc400e17 	ldw	r17,56(sp)
    1cb4:	d8c01a04 	addi	r3,sp,104
    1cb8:	003fee06 	br	1c74 <___vfprintf_internal_r+0x1690>
    1cbc:	3c000017 	ldw	r16,0(r7)
    1cc0:	0023883a 	mov	r17,zero
    1cc4:	39c00104 	addi	r7,r7,4
    1cc8:	d9c14115 	stw	r7,1284(sp)
    1ccc:	003e9206 	br	1718 <___vfprintf_internal_r+0x1134>
    1cd0:	d9401a04 	addi	r5,sp,104
    1cd4:	dd001004 	addi	r20,sp,64
    1cd8:	d9414215 	stw	r5,1288(sp)
    1cdc:	d9814517 	ldw	r6,1300(sp)
    1ce0:	880a973a 	slli	r5,r17,28
    1ce4:	8004d13a 	srli	r2,r16,4
    1ce8:	810003cc 	andi	r4,r16,15
    1cec:	3109883a 	add	r4,r6,r4
    1cf0:	2884b03a 	or	r2,r5,r2
    1cf4:	21400003 	ldbu	r5,0(r4)
    1cf8:	d9014217 	ldw	r4,1288(sp)
    1cfc:	8806d13a 	srli	r3,r17,4
    1d00:	1021883a 	mov	r16,r2
    1d04:	213fffc4 	addi	r4,r4,-1
    1d08:	d9014215 	stw	r4,1288(sp)
    1d0c:	d9814217 	ldw	r6,1288(sp)
    1d10:	10c8b03a 	or	r4,r2,r3
    1d14:	1823883a 	mov	r17,r3
    1d18:	31400005 	stb	r5,0(r6)
    1d1c:	203fef1e 	bne	r4,zero,1cdc <___vfprintf_internal_r+0x16f8>
    1d20:	003ccb06 	br	1050 <___vfprintf_internal_r+0xa6c>
    1d24:	00800c04 	movi	r2,48
    1d28:	d98019c4 	addi	r6,sp,103
    1d2c:	dd001004 	addi	r20,sp,64
    1d30:	d88019c5 	stb	r2,103(sp)
    1d34:	d9814215 	stw	r6,1288(sp)
    1d38:	003cc506 	br	1050 <___vfprintf_internal_r+0xa6c>
    1d3c:	dc400e17 	ldw	r17,56(sp)
    1d40:	07000074 	movhi	fp,1
    1d44:	e734a604 	addi	fp,fp,-11624
    1d48:	003bc706 	br	c68 <___vfprintf_internal_r+0x684>
    1d4c:	d9414d17 	ldw	r5,1332(sp)
    1d50:	2880040c 	andi	r2,r5,16
    1d54:	10007c26 	beq	r2,zero,1f48 <___vfprintf_internal_r+0x1964>
    1d58:	38800017 	ldw	r2,0(r7)
    1d5c:	39c00104 	addi	r7,r7,4
    1d60:	d9c14115 	stw	r7,1284(sp)
    1d64:	d9814c17 	ldw	r6,1328(sp)
    1d68:	d9c14117 	ldw	r7,1284(sp)
    1d6c:	11800015 	stw	r6,0(r2)
    1d70:	003a7806 	br	754 <___vfprintf_internal_r+0x170>
    1d74:	d9015017 	ldw	r4,1344(sp)
    1d78:	b00b883a 	mov	r5,r22
    1d7c:	d9800d04 	addi	r6,sp,52
    1d80:	000058c0 	call	58c <__sprint_r>
    1d84:	103bcf1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1d88:	dc800f17 	ldw	r18,60(sp)
    1d8c:	dc400e17 	ldw	r17,56(sp)
    1d90:	d8c01a04 	addi	r3,sp,104
    1d94:	d9014817 	ldw	r4,1312(sp)
    1d98:	d9414217 	ldw	r5,1288(sp)
    1d9c:	8c400044 	addi	r17,r17,1
    1da0:	9125883a 	add	r18,r18,r4
    1da4:	008001c4 	movi	r2,7
    1da8:	19400015 	stw	r5,0(r3)
    1dac:	19000115 	stw	r4,4(r3)
    1db0:	dc800f15 	stw	r18,60(sp)
    1db4:	dc400e15 	stw	r17,56(sp)
    1db8:	147cee16 	blt	r2,r17,1174 <___vfprintf_internal_r+0xb90>
    1dbc:	18c00204 	addi	r3,r3,8
    1dc0:	003b8606 	br	bdc <___vfprintf_internal_r+0x5f8>
    1dc4:	38c00017 	ldw	r3,0(r7)
    1dc8:	39000204 	addi	r4,r7,8
    1dcc:	d9014115 	stw	r4,1284(sp)
    1dd0:	d8c14315 	stw	r3,1292(sp)
    1dd4:	39c00117 	ldw	r7,4(r7)
    1dd8:	d9c14415 	stw	r7,1296(sp)
    1ddc:	003e2006 	br	1660 <___vfprintf_internal_r+0x107c>
    1de0:	0005883a 	mov	r2,zero
    1de4:	1409c83a 	sub	r4,r2,r16
    1de8:	1105803a 	cmpltu	r2,r2,r4
    1dec:	044bc83a 	sub	r5,zero,r17
    1df0:	2885c83a 	sub	r2,r5,r2
    1df4:	2021883a 	mov	r16,r4
    1df8:	1023883a 	mov	r17,r2
    1dfc:	01000044 	movi	r4,1
    1e00:	00800b44 	movi	r2,45
    1e04:	d8800405 	stb	r2,16(sp)
    1e08:	003c8406 	br	101c <___vfprintf_internal_r+0xa38>
    1e0c:	d9015017 	ldw	r4,1344(sp)
    1e10:	b00b883a 	mov	r5,r22
    1e14:	d9800d04 	addi	r6,sp,52
    1e18:	000058c0 	call	58c <__sprint_r>
    1e1c:	103ba91e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1e20:	dc800f17 	ldw	r18,60(sp)
    1e24:	dc400e17 	ldw	r17,56(sp)
    1e28:	d9000617 	ldw	r4,24(sp)
    1e2c:	d9401a04 	addi	r5,sp,104
    1e30:	003da706 	br	14d0 <___vfprintf_internal_r+0xeec>
    1e34:	d9015017 	ldw	r4,1344(sp)
    1e38:	b00b883a 	mov	r5,r22
    1e3c:	d9800d04 	addi	r6,sp,52
    1e40:	000058c0 	call	58c <__sprint_r>
    1e44:	103b9f1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1e48:	dc800f17 	ldw	r18,60(sp)
    1e4c:	dc400e17 	ldw	r17,56(sp)
    1e50:	d9000617 	ldw	r4,24(sp)
    1e54:	d8c01a04 	addi	r3,sp,104
    1e58:	003d9106 	br	14a0 <___vfprintf_internal_r+0xebc>
    1e5c:	07000074 	movhi	fp,1
    1e60:	e734a204 	addi	fp,fp,-11640
    1e64:	9425883a 	add	r18,r18,r16
    1e68:	8c400044 	addi	r17,r17,1
    1e6c:	008001c4 	movi	r2,7
    1e70:	1f000015 	stw	fp,0(r3)
    1e74:	1c000115 	stw	r16,4(r3)
    1e78:	dc800f15 	stw	r18,60(sp)
    1e7c:	dc400e15 	stw	r17,56(sp)
    1e80:	147fbc16 	blt	r2,r17,1d74 <___vfprintf_internal_r+0x1790>
    1e84:	18c00204 	addi	r3,r3,8
    1e88:	003fc206 	br	1d94 <___vfprintf_internal_r+0x17b0>
    1e8c:	d9015017 	ldw	r4,1344(sp)
    1e90:	b00b883a 	mov	r5,r22
    1e94:	d9800d04 	addi	r6,sp,52
    1e98:	000058c0 	call	58c <__sprint_r>
    1e9c:	103b891e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1ea0:	dc800f17 	ldw	r18,60(sp)
    1ea4:	d9000617 	ldw	r4,24(sp)
    1ea8:	d8c01a04 	addi	r3,sp,104
    1eac:	003d0206 	br	12b8 <___vfprintf_internal_r+0xcd4>
    1eb0:	07000074 	movhi	fp,1
    1eb4:	e734a204 	addi	fp,fp,-11640
    1eb8:	003be406 	br	e4c <___vfprintf_internal_r+0x868>
    1ebc:	00800074 	movhi	r2,1
    1ec0:	10b49004 	addi	r2,r2,-11712
    1ec4:	d8814215 	stw	r2,1288(sp)
    1ec8:	003df506 	br	16a0 <___vfprintf_internal_r+0x10bc>
    1ecc:	d9014317 	ldw	r4,1292(sp)
    1ed0:	d9414417 	ldw	r5,1296(sp)
    1ed4:	0006f2c0 	call	6f2c <__isnand>
    1ed8:	10003926 	beq	r2,zero,1fc0 <___vfprintf_internal_r+0x19dc>
    1edc:	d9414e17 	ldw	r5,1336(sp)
    1ee0:	008011c4 	movi	r2,71
    1ee4:	1140ce16 	blt	r2,r5,2220 <___vfprintf_internal_r+0x1c3c>
    1ee8:	01800074 	movhi	r6,1
    1eec:	31b49104 	addi	r6,r6,-11708
    1ef0:	d9814215 	stw	r6,1288(sp)
    1ef4:	003dea06 	br	16a0 <___vfprintf_internal_r+0x10bc>
    1ef8:	d9014d17 	ldw	r4,1332(sp)
    1efc:	bdc00044 	addi	r23,r23,1
    1f00:	b8c00007 	ldb	r3,0(r23)
    1f04:	21000814 	ori	r4,r4,32
    1f08:	d9014d15 	stw	r4,1332(sp)
    1f0c:	003a3406 	br	7e0 <___vfprintf_internal_r+0x1fc>
    1f10:	dcc14615 	stw	r19,1304(sp)
    1f14:	98011016 	blt	r19,zero,2358 <___vfprintf_internal_r+0x1d74>
    1f18:	980f883a 	mov	r7,r19
    1f1c:	d8014715 	stw	zero,1308(sp)
    1f20:	003c5206 	br	106c <___vfprintf_internal_r+0xa88>
    1f24:	d9015017 	ldw	r4,1344(sp)
    1f28:	b00b883a 	mov	r5,r22
    1f2c:	d9800d04 	addi	r6,sp,52
    1f30:	000058c0 	call	58c <__sprint_r>
    1f34:	103b631e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1f38:	dc800f17 	ldw	r18,60(sp)
    1f3c:	d9000617 	ldw	r4,24(sp)
    1f40:	d8c01a04 	addi	r3,sp,104
    1f44:	003f2e06 	br	1c00 <___vfprintf_internal_r+0x161c>
    1f48:	d8c14d17 	ldw	r3,1332(sp)
    1f4c:	1880100c 	andi	r2,r3,64
    1f50:	1000a026 	beq	r2,zero,21d4 <___vfprintf_internal_r+0x1bf0>
    1f54:	38800017 	ldw	r2,0(r7)
    1f58:	39c00104 	addi	r7,r7,4
    1f5c:	d9c14115 	stw	r7,1284(sp)
    1f60:	d9014c17 	ldw	r4,1328(sp)
    1f64:	d9c14117 	ldw	r7,1284(sp)
    1f68:	1100000d 	sth	r4,0(r2)
    1f6c:	0039f906 	br	754 <___vfprintf_internal_r+0x170>
    1f70:	d9015017 	ldw	r4,1344(sp)
    1f74:	b00b883a 	mov	r5,r22
    1f78:	d9800d04 	addi	r6,sp,52
    1f7c:	000058c0 	call	58c <__sprint_r>
    1f80:	103b501e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    1f84:	dc800f17 	ldw	r18,60(sp)
    1f88:	dc400e17 	ldw	r17,56(sp)
    1f8c:	d9000617 	ldw	r4,24(sp)
    1f90:	d8c01a04 	addi	r3,sp,104
    1f94:	003f2d06 	br	1c4c <___vfprintf_internal_r+0x1668>
    1f98:	00800184 	movi	r2,6
    1f9c:	14c09a36 	bltu	r2,r19,2208 <___vfprintf_internal_r+0x1c24>
    1fa0:	dcc14615 	stw	r19,1304(sp)
    1fa4:	9800010e 	bge	r19,zero,1fac <___vfprintf_internal_r+0x19c8>
    1fa8:	d8014615 	stw	zero,1304(sp)
    1fac:	00800074 	movhi	r2,1
    1fb0:	10b49304 	addi	r2,r2,-11700
    1fb4:	980f883a 	mov	r7,r19
    1fb8:	d8814215 	stw	r2,1288(sp)
    1fbc:	003a7806 	br	9a0 <___vfprintf_internal_r+0x3bc>
    1fc0:	00bfffc4 	movi	r2,-1
    1fc4:	9880e226 	beq	r19,r2,2350 <___vfprintf_internal_r+0x1d6c>
    1fc8:	d9414e17 	ldw	r5,1336(sp)
    1fcc:	008019c4 	movi	r2,103
    1fd0:	2880dc26 	beq	r5,r2,2344 <___vfprintf_internal_r+0x1d60>
    1fd4:	008011c4 	movi	r2,71
    1fd8:	2880da26 	beq	r5,r2,2344 <___vfprintf_internal_r+0x1d60>
    1fdc:	d9414d17 	ldw	r5,1332(sp)
    1fe0:	d9014417 	ldw	r4,1296(sp)
    1fe4:	d9814317 	ldw	r6,1292(sp)
    1fe8:	29404014 	ori	r5,r5,256
    1fec:	d9414d15 	stw	r5,1332(sp)
    1ff0:	2000cc16 	blt	r4,zero,2324 <___vfprintf_internal_r+0x1d40>
    1ff4:	3021883a 	mov	r16,r6
    1ff8:	2023883a 	mov	r17,r4
    1ffc:	0039883a 	mov	fp,zero
    2000:	d9414e17 	ldw	r5,1336(sp)
    2004:	00801984 	movi	r2,102
    2008:	2880b726 	beq	r5,r2,22e8 <___vfprintf_internal_r+0x1d04>
    200c:	00801184 	movi	r2,70
    2010:	2880b526 	beq	r5,r2,22e8 <___vfprintf_internal_r+0x1d04>
    2014:	00801944 	movi	r2,101
    2018:	2880c826 	beq	r5,r2,233c <___vfprintf_internal_r+0x1d58>
    201c:	00801144 	movi	r2,69
    2020:	2880c626 	beq	r5,r2,233c <___vfprintf_internal_r+0x1d58>
    2024:	9829883a 	mov	r20,r19
    2028:	d9015017 	ldw	r4,1344(sp)
    202c:	d8800604 	addi	r2,sp,24
    2030:	880d883a 	mov	r6,r17
    2034:	d8800115 	stw	r2,4(sp)
    2038:	d8c00704 	addi	r3,sp,28
    203c:	d8800804 	addi	r2,sp,32
    2040:	800b883a 	mov	r5,r16
    2044:	01c00084 	movi	r7,2
    2048:	d8c00215 	stw	r3,8(sp)
    204c:	d8800315 	stw	r2,12(sp)
    2050:	dd000015 	stw	r20,0(sp)
    2054:	00028080 	call	2808 <_dtoa_r>
    2058:	d9814e17 	ldw	r6,1336(sp)
    205c:	d8814215 	stw	r2,1288(sp)
    2060:	008019c4 	movi	r2,103
    2064:	30809526 	beq	r6,r2,22bc <___vfprintf_internal_r+0x1cd8>
    2068:	d8c14e17 	ldw	r3,1336(sp)
    206c:	008011c4 	movi	r2,71
    2070:	18809226 	beq	r3,r2,22bc <___vfprintf_internal_r+0x1cd8>
    2074:	d9414217 	ldw	r5,1288(sp)
    2078:	d9814e17 	ldw	r6,1336(sp)
    207c:	00801984 	movi	r2,102
    2080:	2d25883a 	add	r18,r5,r20
    2084:	30808626 	beq	r6,r2,22a0 <___vfprintf_internal_r+0x1cbc>
    2088:	00801184 	movi	r2,70
    208c:	30808426 	beq	r6,r2,22a0 <___vfprintf_internal_r+0x1cbc>
    2090:	000d883a 	mov	r6,zero
    2094:	000f883a 	mov	r7,zero
    2098:	880b883a 	mov	r5,r17
    209c:	8009883a 	mov	r4,r16
    20a0:	0008d140 	call	8d14 <__eqdf2>
    20a4:	1000751e 	bne	r2,zero,227c <___vfprintf_internal_r+0x1c98>
    20a8:	9005883a 	mov	r2,r18
    20ac:	dc800815 	stw	r18,32(sp)
    20b0:	d9014217 	ldw	r4,1288(sp)
    20b4:	d9414e17 	ldw	r5,1336(sp)
    20b8:	00c019c4 	movi	r3,103
    20bc:	1125c83a 	sub	r18,r2,r4
    20c0:	28c06826 	beq	r5,r3,2264 <___vfprintf_internal_r+0x1c80>
    20c4:	008011c4 	movi	r2,71
    20c8:	28806626 	beq	r5,r2,2264 <___vfprintf_internal_r+0x1c80>
    20cc:	d9000617 	ldw	r4,24(sp)
    20d0:	d8c14e17 	ldw	r3,1336(sp)
    20d4:	00801944 	movi	r2,101
    20d8:	10c05516 	blt	r2,r3,2230 <___vfprintf_internal_r+0x1c4c>
    20dc:	213fffc4 	addi	r4,r4,-1
    20e0:	d9000615 	stw	r4,24(sp)
    20e4:	d8c00905 	stb	r3,36(sp)
    20e8:	2021883a 	mov	r16,r4
    20ec:	2000c116 	blt	r4,zero,23f4 <___vfprintf_internal_r+0x1e10>
    20f0:	00800ac4 	movi	r2,43
    20f4:	d8800945 	stb	r2,37(sp)
    20f8:	00800244 	movi	r2,9
    20fc:	1400af0e 	bge	r2,r16,23bc <___vfprintf_internal_r+0x1dd8>
    2100:	1027883a 	mov	r19,r2
    2104:	dc400cc4 	addi	r17,sp,51
    2108:	8009883a 	mov	r4,r16
    210c:	01400284 	movi	r5,10
    2110:	00093fc0 	call	93fc <__modsi3>
    2114:	10800c04 	addi	r2,r2,48
    2118:	8c7fffc4 	addi	r17,r17,-1
    211c:	8009883a 	mov	r4,r16
    2120:	01400284 	movi	r5,10
    2124:	88800005 	stb	r2,0(r17)
    2128:	000939c0 	call	939c <__divsi3>
    212c:	1021883a 	mov	r16,r2
    2130:	98bff516 	blt	r19,r2,2108 <___vfprintf_internal_r+0x1b24>
    2134:	10c00c04 	addi	r3,r2,48
    2138:	d8800b04 	addi	r2,sp,44
    213c:	108001c4 	addi	r2,r2,7
    2140:	897fffc4 	addi	r5,r17,-1
    2144:	88ffffc5 	stb	r3,-1(r17)
    2148:	2880a72e 	bgeu	r5,r2,23e8 <___vfprintf_internal_r+0x1e04>
    214c:	1009883a 	mov	r4,r2
    2150:	d9800904 	addi	r6,sp,36
    2154:	d8c00984 	addi	r3,sp,38
    2158:	28800003 	ldbu	r2,0(r5)
    215c:	29400044 	addi	r5,r5,1
    2160:	18800005 	stb	r2,0(r3)
    2164:	18c00044 	addi	r3,r3,1
    2168:	293ffb36 	bltu	r5,r4,2158 <___vfprintf_internal_r+0x1b74>
    216c:	1987c83a 	sub	r3,r3,r6
    2170:	00800044 	movi	r2,1
    2174:	d8c14915 	stw	r3,1316(sp)
    2178:	90cf883a 	add	r7,r18,r3
    217c:	1480960e 	bge	r2,r18,23d8 <___vfprintf_internal_r+0x1df4>
    2180:	39c00044 	addi	r7,r7,1
    2184:	d9c14615 	stw	r7,1304(sp)
    2188:	38003416 	blt	r7,zero,225c <___vfprintf_internal_r+0x1c78>
    218c:	e0803fcc 	andi	r2,fp,255
    2190:	1080201c 	xori	r2,r2,128
    2194:	10bfe004 	addi	r2,r2,-128
    2198:	10004e26 	beq	r2,zero,22d4 <___vfprintf_internal_r+0x1cf0>
    219c:	00800b44 	movi	r2,45
    21a0:	dc814815 	stw	r18,1312(sp)
    21a4:	d8014715 	stw	zero,1308(sp)
    21a8:	d8800405 	stb	r2,16(sp)
    21ac:	003bb106 	br	1074 <___vfprintf_internal_r+0xa90>
    21b0:	00800b44 	movi	r2,45
    21b4:	d8800405 	stb	r2,16(sp)
    21b8:	003d3306 	br	1688 <___vfprintf_internal_r+0x10a4>
    21bc:	d9015017 	ldw	r4,1344(sp)
    21c0:	b00b883a 	mov	r5,r22
    21c4:	d9800d04 	addi	r6,sp,52
    21c8:	000058c0 	call	58c <__sprint_r>
    21cc:	103abd1e 	bne	r2,zero,cc4 <___vfprintf_internal_r+0x6e0>
    21d0:	003abb06 	br	cc0 <___vfprintf_internal_r+0x6dc>
    21d4:	38800017 	ldw	r2,0(r7)
    21d8:	39c00104 	addi	r7,r7,4
    21dc:	d9c14115 	stw	r7,1284(sp)
    21e0:	d9414c17 	ldw	r5,1328(sp)
    21e4:	d9c14117 	ldw	r7,1284(sp)
    21e8:	11400015 	stw	r5,0(r2)
    21ec:	00395906 	br	754 <___vfprintf_internal_r+0x170>
    21f0:	980f883a 	mov	r7,r19
    21f4:	dcc14615 	stw	r19,1304(sp)
    21f8:	d8014715 	stw	zero,1308(sp)
    21fc:	003b9b06 	br	106c <___vfprintf_internal_r+0xa88>
    2200:	0027883a 	mov	r19,zero
    2204:	00397806 	br	7e8 <___vfprintf_internal_r+0x204>
    2208:	00c00074 	movhi	r3,1
    220c:	18f49304 	addi	r3,r3,-11700
    2210:	100f883a 	mov	r7,r2
    2214:	d8814615 	stw	r2,1304(sp)
    2218:	d8c14215 	stw	r3,1288(sp)
    221c:	0039e006 	br	9a0 <___vfprintf_internal_r+0x3bc>
    2220:	00800074 	movhi	r2,1
    2224:	10b49204 	addi	r2,r2,-11704
    2228:	d8814215 	stw	r2,1288(sp)
    222c:	003d1c06 	br	16a0 <___vfprintf_internal_r+0x10bc>
    2230:	d9414e17 	ldw	r5,1336(sp)
    2234:	00801984 	movi	r2,102
    2238:	28804926 	beq	r5,r2,2360 <___vfprintf_internal_r+0x1d7c>
    223c:	200f883a 	mov	r7,r4
    2240:	24805716 	blt	r4,r18,23a0 <___vfprintf_internal_r+0x1dbc>
    2244:	d9414d17 	ldw	r5,1332(sp)
    2248:	2880004c 	andi	r2,r5,1
    224c:	10000126 	beq	r2,zero,2254 <___vfprintf_internal_r+0x1c70>
    2250:	21c00044 	addi	r7,r4,1
    2254:	d9c14615 	stw	r7,1304(sp)
    2258:	383fcc0e 	bge	r7,zero,218c <___vfprintf_internal_r+0x1ba8>
    225c:	d8014615 	stw	zero,1304(sp)
    2260:	003fca06 	br	218c <___vfprintf_internal_r+0x1ba8>
    2264:	d9000617 	ldw	r4,24(sp)
    2268:	00bfff04 	movi	r2,-4
    226c:	1100480e 	bge	r2,r4,2390 <___vfprintf_internal_r+0x1dac>
    2270:	99004716 	blt	r19,r4,2390 <___vfprintf_internal_r+0x1dac>
    2274:	d8c14e15 	stw	r3,1336(sp)
    2278:	003ff006 	br	223c <___vfprintf_internal_r+0x1c58>
    227c:	d8800817 	ldw	r2,32(sp)
    2280:	14bf8b2e 	bgeu	r2,r18,20b0 <___vfprintf_internal_r+0x1acc>
    2284:	9007883a 	mov	r3,r18
    2288:	01000c04 	movi	r4,48
    228c:	11000005 	stb	r4,0(r2)
    2290:	10800044 	addi	r2,r2,1
    2294:	d8800815 	stw	r2,32(sp)
    2298:	18bffc1e 	bne	r3,r2,228c <___vfprintf_internal_r+0x1ca8>
    229c:	003f8406 	br	20b0 <___vfprintf_internal_r+0x1acc>
    22a0:	d8814217 	ldw	r2,1288(sp)
    22a4:	10c00007 	ldb	r3,0(r2)
    22a8:	00800c04 	movi	r2,48
    22ac:	18805b26 	beq	r3,r2,241c <___vfprintf_internal_r+0x1e38>
    22b0:	d9000617 	ldw	r4,24(sp)
    22b4:	9125883a 	add	r18,r18,r4
    22b8:	003f7506 	br	2090 <___vfprintf_internal_r+0x1aac>
    22bc:	d9014d17 	ldw	r4,1332(sp)
    22c0:	2080004c 	andi	r2,r4,1
    22c4:	1005003a 	cmpeq	r2,r2,zero
    22c8:	103f6a26 	beq	r2,zero,2074 <___vfprintf_internal_r+0x1a90>
    22cc:	d8800817 	ldw	r2,32(sp)
    22d0:	003f7706 	br	20b0 <___vfprintf_internal_r+0x1acc>
    22d4:	d9c14615 	stw	r7,1304(sp)
    22d8:	38004d16 	blt	r7,zero,2410 <___vfprintf_internal_r+0x1e2c>
    22dc:	dc814815 	stw	r18,1312(sp)
    22e0:	d8014715 	stw	zero,1308(sp)
    22e4:	003b6106 	br	106c <___vfprintf_internal_r+0xa88>
    22e8:	d9015017 	ldw	r4,1344(sp)
    22ec:	d8800604 	addi	r2,sp,24
    22f0:	d8800115 	stw	r2,4(sp)
    22f4:	d8c00704 	addi	r3,sp,28
    22f8:	d8800804 	addi	r2,sp,32
    22fc:	800b883a 	mov	r5,r16
    2300:	880d883a 	mov	r6,r17
    2304:	01c000c4 	movi	r7,3
    2308:	d8c00215 	stw	r3,8(sp)
    230c:	d8800315 	stw	r2,12(sp)
    2310:	dcc00015 	stw	r19,0(sp)
    2314:	9829883a 	mov	r20,r19
    2318:	00028080 	call	2808 <_dtoa_r>
    231c:	d8814215 	stw	r2,1288(sp)
    2320:	003f5106 	br	2068 <___vfprintf_internal_r+0x1a84>
    2324:	d8c14317 	ldw	r3,1292(sp)
    2328:	d9014417 	ldw	r4,1296(sp)
    232c:	07000b44 	movi	fp,45
    2330:	1821883a 	mov	r16,r3
    2334:	2460003c 	xorhi	r17,r4,32768
    2338:	003f3106 	br	2000 <___vfprintf_internal_r+0x1a1c>
    233c:	9d000044 	addi	r20,r19,1
    2340:	003f3906 	br	2028 <___vfprintf_internal_r+0x1a44>
    2344:	983f251e 	bne	r19,zero,1fdc <___vfprintf_internal_r+0x19f8>
    2348:	04c00044 	movi	r19,1
    234c:	003f2306 	br	1fdc <___vfprintf_internal_r+0x19f8>
    2350:	04c00184 	movi	r19,6
    2354:	003f2106 	br	1fdc <___vfprintf_internal_r+0x19f8>
    2358:	d8014615 	stw	zero,1304(sp)
    235c:	003eee06 	br	1f18 <___vfprintf_internal_r+0x1934>
    2360:	200f883a 	mov	r7,r4
    2364:	0100370e 	bge	zero,r4,2444 <___vfprintf_internal_r+0x1e60>
    2368:	9800031e 	bne	r19,zero,2378 <___vfprintf_internal_r+0x1d94>
    236c:	d9814d17 	ldw	r6,1332(sp)
    2370:	3080004c 	andi	r2,r6,1
    2374:	103fb726 	beq	r2,zero,2254 <___vfprintf_internal_r+0x1c70>
    2378:	20800044 	addi	r2,r4,1
    237c:	98a7883a 	add	r19,r19,r2
    2380:	dcc14615 	stw	r19,1304(sp)
    2384:	980f883a 	mov	r7,r19
    2388:	983f800e 	bge	r19,zero,218c <___vfprintf_internal_r+0x1ba8>
    238c:	003fb306 	br	225c <___vfprintf_internal_r+0x1c78>
    2390:	d9814e17 	ldw	r6,1336(sp)
    2394:	31bfff84 	addi	r6,r6,-2
    2398:	d9814e15 	stw	r6,1336(sp)
    239c:	003f4c06 	br	20d0 <___vfprintf_internal_r+0x1aec>
    23a0:	0100180e 	bge	zero,r4,2404 <___vfprintf_internal_r+0x1e20>
    23a4:	00800044 	movi	r2,1
    23a8:	1485883a 	add	r2,r2,r18
    23ac:	d8814615 	stw	r2,1304(sp)
    23b0:	100f883a 	mov	r7,r2
    23b4:	103f750e 	bge	r2,zero,218c <___vfprintf_internal_r+0x1ba8>
    23b8:	003fa806 	br	225c <___vfprintf_internal_r+0x1c78>
    23bc:	80c00c04 	addi	r3,r16,48
    23c0:	00800c04 	movi	r2,48
    23c4:	d8c009c5 	stb	r3,39(sp)
    23c8:	d9800904 	addi	r6,sp,36
    23cc:	d8c00a04 	addi	r3,sp,40
    23d0:	d8800985 	stb	r2,38(sp)
    23d4:	003f6506 	br	216c <___vfprintf_internal_r+0x1b88>
    23d8:	d9014d17 	ldw	r4,1332(sp)
    23dc:	2084703a 	and	r2,r4,r2
    23e0:	103f9c26 	beq	r2,zero,2254 <___vfprintf_internal_r+0x1c70>
    23e4:	003f6606 	br	2180 <___vfprintf_internal_r+0x1b9c>
    23e8:	d9800904 	addi	r6,sp,36
    23ec:	d8c00984 	addi	r3,sp,38
    23f0:	003f5e06 	br	216c <___vfprintf_internal_r+0x1b88>
    23f4:	00800b44 	movi	r2,45
    23f8:	0121c83a 	sub	r16,zero,r4
    23fc:	d8800945 	stb	r2,37(sp)
    2400:	003f3d06 	br	20f8 <___vfprintf_internal_r+0x1b14>
    2404:	00800084 	movi	r2,2
    2408:	1105c83a 	sub	r2,r2,r4
    240c:	003fe606 	br	23a8 <___vfprintf_internal_r+0x1dc4>
    2410:	d8014615 	stw	zero,1304(sp)
    2414:	dc814815 	stw	r18,1312(sp)
    2418:	003fb106 	br	22e0 <___vfprintf_internal_r+0x1cfc>
    241c:	000d883a 	mov	r6,zero
    2420:	000f883a 	mov	r7,zero
    2424:	8009883a 	mov	r4,r16
    2428:	880b883a 	mov	r5,r17
    242c:	0008d9c0 	call	8d9c <__nedf2>
    2430:	103f9f26 	beq	r2,zero,22b0 <___vfprintf_internal_r+0x1ccc>
    2434:	00800044 	movi	r2,1
    2438:	1509c83a 	sub	r4,r2,r20
    243c:	d9000615 	stw	r4,24(sp)
    2440:	003f9b06 	br	22b0 <___vfprintf_internal_r+0x1ccc>
    2444:	98000d1e 	bne	r19,zero,247c <___vfprintf_internal_r+0x1e98>
    2448:	d8c14d17 	ldw	r3,1332(sp)
    244c:	1880004c 	andi	r2,r3,1
    2450:	10000a1e 	bne	r2,zero,247c <___vfprintf_internal_r+0x1e98>
    2454:	01000044 	movi	r4,1
    2458:	200f883a 	mov	r7,r4
    245c:	d9014615 	stw	r4,1304(sp)
    2460:	003f4a06 	br	218c <___vfprintf_internal_r+0x1ba8>
    2464:	3cc00017 	ldw	r19,0(r7)
    2468:	39c00104 	addi	r7,r7,4
    246c:	983d0e0e 	bge	r19,zero,18a8 <___vfprintf_internal_r+0x12c4>
    2470:	b8c00007 	ldb	r3,0(r23)
    2474:	04ffffc4 	movi	r19,-1
    2478:	0038d906 	br	7e0 <___vfprintf_internal_r+0x1fc>
    247c:	9cc00084 	addi	r19,r19,2
    2480:	dcc14615 	stw	r19,1304(sp)
    2484:	980f883a 	mov	r7,r19
    2488:	983f400e 	bge	r19,zero,218c <___vfprintf_internal_r+0x1ba8>
    248c:	003f7306 	br	225c <___vfprintf_internal_r+0x1c78>

00002490 <__vfprintf_internal>:
    2490:	00800074 	movhi	r2,1
    2494:	10b82b04 	addi	r2,r2,-8020
    2498:	2013883a 	mov	r9,r4
    249c:	11000017 	ldw	r4,0(r2)
    24a0:	2805883a 	mov	r2,r5
    24a4:	300f883a 	mov	r7,r6
    24a8:	480b883a 	mov	r5,r9
    24ac:	100d883a 	mov	r6,r2
    24b0:	00005e41 	jmpi	5e4 <___vfprintf_internal_r>

000024b4 <__swsetup_r>:
    24b4:	00800074 	movhi	r2,1
    24b8:	10b82b04 	addi	r2,r2,-8020
    24bc:	10c00017 	ldw	r3,0(r2)
    24c0:	defffd04 	addi	sp,sp,-12
    24c4:	dc400115 	stw	r17,4(sp)
    24c8:	dc000015 	stw	r16,0(sp)
    24cc:	dfc00215 	stw	ra,8(sp)
    24d0:	2023883a 	mov	r17,r4
    24d4:	2821883a 	mov	r16,r5
    24d8:	18000226 	beq	r3,zero,24e4 <__swsetup_r+0x30>
    24dc:	18800e17 	ldw	r2,56(r3)
    24e0:	10001f26 	beq	r2,zero,2560 <__swsetup_r+0xac>
    24e4:	8100030b 	ldhu	r4,12(r16)
    24e8:	2080020c 	andi	r2,r4,8
    24ec:	10002826 	beq	r2,zero,2590 <__swsetup_r+0xdc>
    24f0:	81400417 	ldw	r5,16(r16)
    24f4:	28001d26 	beq	r5,zero,256c <__swsetup_r+0xb8>
    24f8:	2080004c 	andi	r2,r4,1
    24fc:	1005003a 	cmpeq	r2,r2,zero
    2500:	10000b26 	beq	r2,zero,2530 <__swsetup_r+0x7c>
    2504:	2080008c 	andi	r2,r4,2
    2508:	10001226 	beq	r2,zero,2554 <__swsetup_r+0xa0>
    250c:	0005883a 	mov	r2,zero
    2510:	80800215 	stw	r2,8(r16)
    2514:	28000b26 	beq	r5,zero,2544 <__swsetup_r+0x90>
    2518:	0005883a 	mov	r2,zero
    251c:	dfc00217 	ldw	ra,8(sp)
    2520:	dc400117 	ldw	r17,4(sp)
    2524:	dc000017 	ldw	r16,0(sp)
    2528:	dec00304 	addi	sp,sp,12
    252c:	f800283a 	ret
    2530:	80800517 	ldw	r2,20(r16)
    2534:	80000215 	stw	zero,8(r16)
    2538:	0085c83a 	sub	r2,zero,r2
    253c:	80800615 	stw	r2,24(r16)
    2540:	283ff51e 	bne	r5,zero,2518 <__swsetup_r+0x64>
    2544:	2080200c 	andi	r2,r4,128
    2548:	103ff326 	beq	r2,zero,2518 <__swsetup_r+0x64>
    254c:	00bfffc4 	movi	r2,-1
    2550:	003ff206 	br	251c <__swsetup_r+0x68>
    2554:	80800517 	ldw	r2,20(r16)
    2558:	80800215 	stw	r2,8(r16)
    255c:	003fed06 	br	2514 <__swsetup_r+0x60>
    2560:	1809883a 	mov	r4,r3
    2564:	00040540 	call	4054 <__sinit>
    2568:	003fde06 	br	24e4 <__swsetup_r+0x30>
    256c:	20c0a00c 	andi	r3,r4,640
    2570:	00808004 	movi	r2,512
    2574:	18bfe026 	beq	r3,r2,24f8 <__swsetup_r+0x44>
    2578:	8809883a 	mov	r4,r17
    257c:	800b883a 	mov	r5,r16
    2580:	0004dcc0 	call	4dcc <__smakebuf_r>
    2584:	8100030b 	ldhu	r4,12(r16)
    2588:	81400417 	ldw	r5,16(r16)
    258c:	003fda06 	br	24f8 <__swsetup_r+0x44>
    2590:	2080040c 	andi	r2,r4,16
    2594:	103fed26 	beq	r2,zero,254c <__swsetup_r+0x98>
    2598:	2080010c 	andi	r2,r4,4
    259c:	10001226 	beq	r2,zero,25e8 <__swsetup_r+0x134>
    25a0:	81400c17 	ldw	r5,48(r16)
    25a4:	28000526 	beq	r5,zero,25bc <__swsetup_r+0x108>
    25a8:	80801004 	addi	r2,r16,64
    25ac:	28800226 	beq	r5,r2,25b8 <__swsetup_r+0x104>
    25b0:	8809883a 	mov	r4,r17
    25b4:	00043d80 	call	43d8 <_free_r>
    25b8:	80000c15 	stw	zero,48(r16)
    25bc:	8080030b 	ldhu	r2,12(r16)
    25c0:	81400417 	ldw	r5,16(r16)
    25c4:	80000115 	stw	zero,4(r16)
    25c8:	10bff6cc 	andi	r2,r2,65499
    25cc:	8080030d 	sth	r2,12(r16)
    25d0:	81400015 	stw	r5,0(r16)
    25d4:	8080030b 	ldhu	r2,12(r16)
    25d8:	10800214 	ori	r2,r2,8
    25dc:	113fffcc 	andi	r4,r2,65535
    25e0:	8080030d 	sth	r2,12(r16)
    25e4:	003fc306 	br	24f4 <__swsetup_r+0x40>
    25e8:	81400417 	ldw	r5,16(r16)
    25ec:	003ff906 	br	25d4 <__swsetup_r+0x120>

000025f0 <quorem>:
    25f0:	28c00417 	ldw	r3,16(r5)
    25f4:	20800417 	ldw	r2,16(r4)
    25f8:	defff604 	addi	sp,sp,-40
    25fc:	ddc00715 	stw	r23,28(sp)
    2600:	dd400515 	stw	r21,20(sp)
    2604:	dfc00915 	stw	ra,36(sp)
    2608:	df000815 	stw	fp,32(sp)
    260c:	dd800615 	stw	r22,24(sp)
    2610:	dd000415 	stw	r20,16(sp)
    2614:	dcc00315 	stw	r19,12(sp)
    2618:	dc800215 	stw	r18,8(sp)
    261c:	dc400115 	stw	r17,4(sp)
    2620:	dc000015 	stw	r16,0(sp)
    2624:	202f883a 	mov	r23,r4
    2628:	282b883a 	mov	r21,r5
    262c:	10c07416 	blt	r2,r3,2800 <quorem+0x210>
    2630:	1c7fffc4 	addi	r17,r3,-1
    2634:	8c45883a 	add	r2,r17,r17
    2638:	1085883a 	add	r2,r2,r2
    263c:	2c000504 	addi	r16,r5,20
    2640:	24c00504 	addi	r19,r4,20
    2644:	14ed883a 	add	r22,r2,r19
    2648:	80a5883a 	add	r18,r16,r2
    264c:	b7000017 	ldw	fp,0(r22)
    2650:	91400017 	ldw	r5,0(r18)
    2654:	e009883a 	mov	r4,fp
    2658:	29400044 	addi	r5,r5,1
    265c:	000945c0 	call	945c <__udivsi3>
    2660:	1029883a 	mov	r20,r2
    2664:	10003c1e 	bne	r2,zero,2758 <quorem+0x168>
    2668:	a80b883a 	mov	r5,r21
    266c:	b809883a 	mov	r4,r23
    2670:	0005a600 	call	5a60 <__mcmp>
    2674:	10002b16 	blt	r2,zero,2724 <quorem+0x134>
    2678:	a5000044 	addi	r20,r20,1
    267c:	980f883a 	mov	r7,r19
    2680:	0011883a 	mov	r8,zero
    2684:	0009883a 	mov	r4,zero
    2688:	81400017 	ldw	r5,0(r16)
    268c:	38c00017 	ldw	r3,0(r7)
    2690:	84000104 	addi	r16,r16,4
    2694:	28bfffcc 	andi	r2,r5,65535
    2698:	2085883a 	add	r2,r4,r2
    269c:	11bfffcc 	andi	r6,r2,65535
    26a0:	193fffcc 	andi	r4,r3,65535
    26a4:	1004d43a 	srli	r2,r2,16
    26a8:	280ad43a 	srli	r5,r5,16
    26ac:	2189c83a 	sub	r4,r4,r6
    26b0:	2209883a 	add	r4,r4,r8
    26b4:	1806d43a 	srli	r3,r3,16
    26b8:	288b883a 	add	r5,r5,r2
    26bc:	200dd43a 	srai	r6,r4,16
    26c0:	28bfffcc 	andi	r2,r5,65535
    26c4:	1887c83a 	sub	r3,r3,r2
    26c8:	1987883a 	add	r3,r3,r6
    26cc:	3900000d 	sth	r4,0(r7)
    26d0:	38c0008d 	sth	r3,2(r7)
    26d4:	2808d43a 	srli	r4,r5,16
    26d8:	39c00104 	addi	r7,r7,4
    26dc:	1811d43a 	srai	r8,r3,16
    26e0:	943fe92e 	bgeu	r18,r16,2688 <quorem+0x98>
    26e4:	8c45883a 	add	r2,r17,r17
    26e8:	1085883a 	add	r2,r2,r2
    26ec:	9885883a 	add	r2,r19,r2
    26f0:	10c00017 	ldw	r3,0(r2)
    26f4:	18000b1e 	bne	r3,zero,2724 <quorem+0x134>
    26f8:	113fff04 	addi	r4,r2,-4
    26fc:	9900082e 	bgeu	r19,r4,2720 <quorem+0x130>
    2700:	10bfff17 	ldw	r2,-4(r2)
    2704:	10000326 	beq	r2,zero,2714 <quorem+0x124>
    2708:	00000506 	br	2720 <quorem+0x130>
    270c:	20800017 	ldw	r2,0(r4)
    2710:	1000031e 	bne	r2,zero,2720 <quorem+0x130>
    2714:	213fff04 	addi	r4,r4,-4
    2718:	8c7fffc4 	addi	r17,r17,-1
    271c:	993ffb36 	bltu	r19,r4,270c <quorem+0x11c>
    2720:	bc400415 	stw	r17,16(r23)
    2724:	a005883a 	mov	r2,r20
    2728:	dfc00917 	ldw	ra,36(sp)
    272c:	df000817 	ldw	fp,32(sp)
    2730:	ddc00717 	ldw	r23,28(sp)
    2734:	dd800617 	ldw	r22,24(sp)
    2738:	dd400517 	ldw	r21,20(sp)
    273c:	dd000417 	ldw	r20,16(sp)
    2740:	dcc00317 	ldw	r19,12(sp)
    2744:	dc800217 	ldw	r18,8(sp)
    2748:	dc400117 	ldw	r17,4(sp)
    274c:	dc000017 	ldw	r16,0(sp)
    2750:	dec00a04 	addi	sp,sp,40
    2754:	f800283a 	ret
    2758:	980f883a 	mov	r7,r19
    275c:	8011883a 	mov	r8,r16
    2760:	0013883a 	mov	r9,zero
    2764:	000d883a 	mov	r6,zero
    2768:	40c00017 	ldw	r3,0(r8)
    276c:	39000017 	ldw	r4,0(r7)
    2770:	42000104 	addi	r8,r8,4
    2774:	18bfffcc 	andi	r2,r3,65535
    2778:	a085383a 	mul	r2,r20,r2
    277c:	1806d43a 	srli	r3,r3,16
    2780:	217fffcc 	andi	r5,r4,65535
    2784:	3085883a 	add	r2,r6,r2
    2788:	11bfffcc 	andi	r6,r2,65535
    278c:	a0c7383a 	mul	r3,r20,r3
    2790:	1004d43a 	srli	r2,r2,16
    2794:	298bc83a 	sub	r5,r5,r6
    2798:	2a4b883a 	add	r5,r5,r9
    279c:	2008d43a 	srli	r4,r4,16
    27a0:	1887883a 	add	r3,r3,r2
    27a4:	280dd43a 	srai	r6,r5,16
    27a8:	18bfffcc 	andi	r2,r3,65535
    27ac:	2089c83a 	sub	r4,r4,r2
    27b0:	2189883a 	add	r4,r4,r6
    27b4:	3900008d 	sth	r4,2(r7)
    27b8:	3940000d 	sth	r5,0(r7)
    27bc:	180cd43a 	srli	r6,r3,16
    27c0:	39c00104 	addi	r7,r7,4
    27c4:	2013d43a 	srai	r9,r4,16
    27c8:	923fe72e 	bgeu	r18,r8,2768 <quorem+0x178>
    27cc:	e03fa61e 	bne	fp,zero,2668 <quorem+0x78>
    27d0:	b0ffff04 	addi	r3,r22,-4
    27d4:	98c0082e 	bgeu	r19,r3,27f8 <quorem+0x208>
    27d8:	b0bfff17 	ldw	r2,-4(r22)
    27dc:	10000326 	beq	r2,zero,27ec <quorem+0x1fc>
    27e0:	00000506 	br	27f8 <quorem+0x208>
    27e4:	18800017 	ldw	r2,0(r3)
    27e8:	1000031e 	bne	r2,zero,27f8 <quorem+0x208>
    27ec:	18ffff04 	addi	r3,r3,-4
    27f0:	8c7fffc4 	addi	r17,r17,-1
    27f4:	98fffb36 	bltu	r19,r3,27e4 <quorem+0x1f4>
    27f8:	bc400415 	stw	r17,16(r23)
    27fc:	003f9a06 	br	2668 <quorem+0x78>
    2800:	0005883a 	mov	r2,zero
    2804:	003fc806 	br	2728 <quorem+0x138>

00002808 <_dtoa_r>:
    2808:	22001017 	ldw	r8,64(r4)
    280c:	deffda04 	addi	sp,sp,-152
    2810:	dd402115 	stw	r21,132(sp)
    2814:	dd002015 	stw	r20,128(sp)
    2818:	dc801e15 	stw	r18,120(sp)
    281c:	dc401d15 	stw	r17,116(sp)
    2820:	dfc02515 	stw	ra,148(sp)
    2824:	df002415 	stw	fp,144(sp)
    2828:	ddc02315 	stw	r23,140(sp)
    282c:	dd802215 	stw	r22,136(sp)
    2830:	dcc01f15 	stw	r19,124(sp)
    2834:	dc001c15 	stw	r16,112(sp)
    2838:	d9001615 	stw	r4,88(sp)
    283c:	3023883a 	mov	r17,r6
    2840:	2829883a 	mov	r20,r5
    2844:	d9c01715 	stw	r7,92(sp)
    2848:	dc802817 	ldw	r18,160(sp)
    284c:	302b883a 	mov	r21,r6
    2850:	40000a26 	beq	r8,zero,287c <_dtoa_r+0x74>
    2854:	20801117 	ldw	r2,68(r4)
    2858:	400b883a 	mov	r5,r8
    285c:	40800115 	stw	r2,4(r8)
    2860:	20c01117 	ldw	r3,68(r4)
    2864:	00800044 	movi	r2,1
    2868:	10c4983a 	sll	r2,r2,r3
    286c:	40800215 	stw	r2,8(r8)
    2870:	00059040 	call	5904 <_Bfree>
    2874:	d8c01617 	ldw	r3,88(sp)
    2878:	18001015 	stw	zero,64(r3)
    287c:	8800a316 	blt	r17,zero,2b0c <_dtoa_r+0x304>
    2880:	90000015 	stw	zero,0(r18)
    2884:	a8dffc2c 	andhi	r3,r21,32752
    2888:	009ffc34 	movhi	r2,32752
    288c:	18809126 	beq	r3,r2,2ad4 <_dtoa_r+0x2cc>
    2890:	000d883a 	mov	r6,zero
    2894:	000f883a 	mov	r7,zero
    2898:	a009883a 	mov	r4,r20
    289c:	a80b883a 	mov	r5,r21
    28a0:	dd001215 	stw	r20,72(sp)
    28a4:	dd401315 	stw	r21,76(sp)
    28a8:	0008d9c0 	call	8d9c <__nedf2>
    28ac:	1000171e 	bne	r2,zero,290c <_dtoa_r+0x104>
    28b0:	d9802717 	ldw	r6,156(sp)
    28b4:	00800044 	movi	r2,1
    28b8:	30800015 	stw	r2,0(r6)
    28bc:	d8802917 	ldw	r2,164(sp)
    28c0:	10029b26 	beq	r2,zero,3330 <_dtoa_r+0xb28>
    28c4:	d9002917 	ldw	r4,164(sp)
    28c8:	00800074 	movhi	r2,1
    28cc:	10b4a144 	addi	r2,r2,-11643
    28d0:	10ffffc4 	addi	r3,r2,-1
    28d4:	20800015 	stw	r2,0(r4)
    28d8:	1805883a 	mov	r2,r3
    28dc:	dfc02517 	ldw	ra,148(sp)
    28e0:	df002417 	ldw	fp,144(sp)
    28e4:	ddc02317 	ldw	r23,140(sp)
    28e8:	dd802217 	ldw	r22,136(sp)
    28ec:	dd402117 	ldw	r21,132(sp)
    28f0:	dd002017 	ldw	r20,128(sp)
    28f4:	dcc01f17 	ldw	r19,124(sp)
    28f8:	dc801e17 	ldw	r18,120(sp)
    28fc:	dc401d17 	ldw	r17,116(sp)
    2900:	dc001c17 	ldw	r16,112(sp)
    2904:	dec02604 	addi	sp,sp,152
    2908:	f800283a 	ret
    290c:	d9001617 	ldw	r4,88(sp)
    2910:	d9401217 	ldw	r5,72(sp)
    2914:	d8800104 	addi	r2,sp,4
    2918:	a80d883a 	mov	r6,r21
    291c:	d9c00204 	addi	r7,sp,8
    2920:	d8800015 	stw	r2,0(sp)
    2924:	0005f400 	call	5f40 <__d2b>
    2928:	d8800715 	stw	r2,28(sp)
    292c:	a804d53a 	srli	r2,r21,20
    2930:	1101ffcc 	andi	r4,r2,2047
    2934:	20008626 	beq	r4,zero,2b50 <_dtoa_r+0x348>
    2938:	d8c01217 	ldw	r3,72(sp)
    293c:	00800434 	movhi	r2,16
    2940:	10bfffc4 	addi	r2,r2,-1
    2944:	ddc00117 	ldw	r23,4(sp)
    2948:	a884703a 	and	r2,r21,r2
    294c:	1811883a 	mov	r8,r3
    2950:	124ffc34 	orhi	r9,r2,16368
    2954:	25bf0044 	addi	r22,r4,-1023
    2958:	d8000815 	stw	zero,32(sp)
    295c:	0005883a 	mov	r2,zero
    2960:	00cffe34 	movhi	r3,16376
    2964:	480b883a 	mov	r5,r9
    2968:	4009883a 	mov	r4,r8
    296c:	180f883a 	mov	r7,r3
    2970:	100d883a 	mov	r6,r2
    2974:	00086040 	call	8604 <__subdf3>
    2978:	0218dbf4 	movhi	r8,25455
    297c:	4210d844 	addi	r8,r8,17249
    2980:	024ff4f4 	movhi	r9,16339
    2984:	4a61e9c4 	addi	r9,r9,-30809
    2988:	480f883a 	mov	r7,r9
    298c:	400d883a 	mov	r6,r8
    2990:	180b883a 	mov	r5,r3
    2994:	1009883a 	mov	r4,r2
    2998:	00086f80 	call	86f8 <__muldf3>
    299c:	0222d874 	movhi	r8,35681
    29a0:	42322cc4 	addi	r8,r8,-14157
    29a4:	024ff1f4 	movhi	r9,16327
    29a8:	4a628a04 	addi	r9,r9,-30168
    29ac:	480f883a 	mov	r7,r9
    29b0:	400d883a 	mov	r6,r8
    29b4:	180b883a 	mov	r5,r3
    29b8:	1009883a 	mov	r4,r2
    29bc:	00086840 	call	8684 <__adddf3>
    29c0:	b009883a 	mov	r4,r22
    29c4:	1021883a 	mov	r16,r2
    29c8:	1823883a 	mov	r17,r3
    29cc:	0008fbc0 	call	8fbc <__floatsidf>
    29d0:	021427f4 	movhi	r8,20639
    29d4:	421e7ec4 	addi	r8,r8,31227
    29d8:	024ff4f4 	movhi	r9,16339
    29dc:	4a5104c4 	addi	r9,r9,17427
    29e0:	480f883a 	mov	r7,r9
    29e4:	400d883a 	mov	r6,r8
    29e8:	180b883a 	mov	r5,r3
    29ec:	1009883a 	mov	r4,r2
    29f0:	00086f80 	call	86f8 <__muldf3>
    29f4:	180f883a 	mov	r7,r3
    29f8:	880b883a 	mov	r5,r17
    29fc:	100d883a 	mov	r6,r2
    2a00:	8009883a 	mov	r4,r16
    2a04:	00086840 	call	8684 <__adddf3>
    2a08:	1009883a 	mov	r4,r2
    2a0c:	180b883a 	mov	r5,r3
    2a10:	1021883a 	mov	r16,r2
    2a14:	1823883a 	mov	r17,r3
    2a18:	00090b40 	call	90b4 <__fixdfsi>
    2a1c:	000d883a 	mov	r6,zero
    2a20:	000f883a 	mov	r7,zero
    2a24:	8009883a 	mov	r4,r16
    2a28:	880b883a 	mov	r5,r17
    2a2c:	d8800d15 	stw	r2,52(sp)
    2a30:	0008f340 	call	8f34 <__ltdf2>
    2a34:	10031716 	blt	r2,zero,3694 <_dtoa_r+0xe8c>
    2a38:	d8c00d17 	ldw	r3,52(sp)
    2a3c:	00800584 	movi	r2,22
    2a40:	10c1482e 	bgeu	r2,r3,2f64 <_dtoa_r+0x75c>
    2a44:	01000044 	movi	r4,1
    2a48:	d9000c15 	stw	r4,48(sp)
    2a4c:	bd85c83a 	sub	r2,r23,r22
    2a50:	11bfffc4 	addi	r6,r2,-1
    2a54:	30030b16 	blt	r6,zero,3684 <_dtoa_r+0xe7c>
    2a58:	d9800a15 	stw	r6,40(sp)
    2a5c:	d8001115 	stw	zero,68(sp)
    2a60:	d8c00d17 	ldw	r3,52(sp)
    2a64:	1802ff16 	blt	r3,zero,3664 <_dtoa_r+0xe5c>
    2a68:	d9000a17 	ldw	r4,40(sp)
    2a6c:	d8c00915 	stw	r3,36(sp)
    2a70:	d8001015 	stw	zero,64(sp)
    2a74:	20c9883a 	add	r4,r4,r3
    2a78:	d9000a15 	stw	r4,40(sp)
    2a7c:	d9001717 	ldw	r4,92(sp)
    2a80:	00800244 	movi	r2,9
    2a84:	11004636 	bltu	r2,r4,2ba0 <_dtoa_r+0x398>
    2a88:	00800144 	movi	r2,5
    2a8c:	11020416 	blt	r2,r4,32a0 <_dtoa_r+0xa98>
    2a90:	04400044 	movi	r17,1
    2a94:	d8c01717 	ldw	r3,92(sp)
    2a98:	00800144 	movi	r2,5
    2a9c:	10c1ed36 	bltu	r2,r3,3254 <_dtoa_r+0xa4c>
    2aa0:	18c5883a 	add	r2,r3,r3
    2aa4:	1085883a 	add	r2,r2,r2
    2aa8:	00c00034 	movhi	r3,0
    2aac:	18caaf04 	addi	r3,r3,10940
    2ab0:	10c5883a 	add	r2,r2,r3
    2ab4:	11000017 	ldw	r4,0(r2)
    2ab8:	2000683a 	jmp	r4
    2abc:	00002ba8 	cmpgeui	zero,zero,174
    2ac0:	00002ba8 	cmpgeui	zero,zero,174
    2ac4:	000035a8 	cmpgeui	zero,zero,214
    2ac8:	00003580 	call	358 <memset+0x4>
    2acc:	000035c4 	movi	zero,215
    2ad0:	000035d0 	cmplti	zero,zero,215
    2ad4:	d9002717 	ldw	r4,156(sp)
    2ad8:	0089c3c4 	movi	r2,9999
    2adc:	20800015 	stw	r2,0(r4)
    2ae0:	a0001026 	beq	r20,zero,2b24 <_dtoa_r+0x31c>
    2ae4:	00c00074 	movhi	r3,1
    2ae8:	18f4ad04 	addi	r3,r3,-11596
    2aec:	d9802917 	ldw	r6,164(sp)
    2af0:	303f7926 	beq	r6,zero,28d8 <_dtoa_r+0xd0>
    2af4:	188000c7 	ldb	r2,3(r3)
    2af8:	190000c4 	addi	r4,r3,3
    2afc:	1000101e 	bne	r2,zero,2b40 <_dtoa_r+0x338>
    2b00:	d8802917 	ldw	r2,164(sp)
    2b04:	11000015 	stw	r4,0(r2)
    2b08:	003f7306 	br	28d8 <_dtoa_r+0xd0>
    2b0c:	00a00034 	movhi	r2,32768
    2b10:	10bfffc4 	addi	r2,r2,-1
    2b14:	00c00044 	movi	r3,1
    2b18:	88aa703a 	and	r21,r17,r2
    2b1c:	90c00015 	stw	r3,0(r18)
    2b20:	003f5806 	br	2884 <_dtoa_r+0x7c>
    2b24:	00800434 	movhi	r2,16
    2b28:	10bfffc4 	addi	r2,r2,-1
    2b2c:	a884703a 	and	r2,r21,r2
    2b30:	103fec1e 	bne	r2,zero,2ae4 <_dtoa_r+0x2dc>
    2b34:	00c00074 	movhi	r3,1
    2b38:	18f4aa04 	addi	r3,r3,-11608
    2b3c:	003feb06 	br	2aec <_dtoa_r+0x2e4>
    2b40:	d8802917 	ldw	r2,164(sp)
    2b44:	19000204 	addi	r4,r3,8
    2b48:	11000015 	stw	r4,0(r2)
    2b4c:	003f6206 	br	28d8 <_dtoa_r+0xd0>
    2b50:	ddc00117 	ldw	r23,4(sp)
    2b54:	d8800217 	ldw	r2,8(sp)
    2b58:	01000804 	movi	r4,32
    2b5c:	b8c10c84 	addi	r3,r23,1074
    2b60:	18a3883a 	add	r17,r3,r2
    2b64:	2441b80e 	bge	r4,r17,3248 <_dtoa_r+0xa40>
    2b68:	00c01004 	movi	r3,64
    2b6c:	1c47c83a 	sub	r3,r3,r17
    2b70:	88bff804 	addi	r2,r17,-32
    2b74:	a8c6983a 	sll	r3,r21,r3
    2b78:	a084d83a 	srl	r2,r20,r2
    2b7c:	1888b03a 	or	r4,r3,r2
    2b80:	000918c0 	call	918c <__floatunsidf>
    2b84:	1011883a 	mov	r8,r2
    2b88:	00bf8434 	movhi	r2,65040
    2b8c:	01000044 	movi	r4,1
    2b90:	10d3883a 	add	r9,r2,r3
    2b94:	8dbef344 	addi	r22,r17,-1075
    2b98:	d9000815 	stw	r4,32(sp)
    2b9c:	003f6f06 	br	295c <_dtoa_r+0x154>
    2ba0:	d8001715 	stw	zero,92(sp)
    2ba4:	04400044 	movi	r17,1
    2ba8:	00bfffc4 	movi	r2,-1
    2bac:	00c00044 	movi	r3,1
    2bb0:	d8800e15 	stw	r2,56(sp)
    2bb4:	d8002615 	stw	zero,152(sp)
    2bb8:	d8800f15 	stw	r2,60(sp)
    2bbc:	d8c00b15 	stw	r3,44(sp)
    2bc0:	1021883a 	mov	r16,r2
    2bc4:	d8801617 	ldw	r2,88(sp)
    2bc8:	10001115 	stw	zero,68(r2)
    2bcc:	d8801617 	ldw	r2,88(sp)
    2bd0:	11401117 	ldw	r5,68(r2)
    2bd4:	1009883a 	mov	r4,r2
    2bd8:	0005e840 	call	5e84 <_Balloc>
    2bdc:	d8c01617 	ldw	r3,88(sp)
    2be0:	d8800515 	stw	r2,20(sp)
    2be4:	18801015 	stw	r2,64(r3)
    2be8:	00800384 	movi	r2,14
    2bec:	14006836 	bltu	r2,r16,2d90 <_dtoa_r+0x588>
    2bf0:	8805003a 	cmpeq	r2,r17,zero
    2bf4:	1000661e 	bne	r2,zero,2d90 <_dtoa_r+0x588>
    2bf8:	d9000d17 	ldw	r4,52(sp)
    2bfc:	0102300e 	bge	zero,r4,34c0 <_dtoa_r+0xcb8>
    2c00:	208003cc 	andi	r2,r4,15
    2c04:	100490fa 	slli	r2,r2,3
    2c08:	2025d13a 	srai	r18,r4,4
    2c0c:	00c00074 	movhi	r3,1
    2c10:	18f4bf04 	addi	r3,r3,-11524
    2c14:	10c5883a 	add	r2,r2,r3
    2c18:	90c0040c 	andi	r3,r18,16
    2c1c:	14000017 	ldw	r16,0(r2)
    2c20:	14400117 	ldw	r17,4(r2)
    2c24:	18036a1e 	bne	r3,zero,39d0 <_dtoa_r+0x11c8>
    2c28:	05800084 	movi	r22,2
    2c2c:	90001026 	beq	r18,zero,2c70 <_dtoa_r+0x468>
    2c30:	04c00074 	movhi	r19,1
    2c34:	9cf4f104 	addi	r19,r19,-11324
    2c38:	9080004c 	andi	r2,r18,1
    2c3c:	1005003a 	cmpeq	r2,r2,zero
    2c40:	1000081e 	bne	r2,zero,2c64 <_dtoa_r+0x45c>
    2c44:	99800017 	ldw	r6,0(r19)
    2c48:	99c00117 	ldw	r7,4(r19)
    2c4c:	880b883a 	mov	r5,r17
    2c50:	8009883a 	mov	r4,r16
    2c54:	00086f80 	call	86f8 <__muldf3>
    2c58:	1021883a 	mov	r16,r2
    2c5c:	b5800044 	addi	r22,r22,1
    2c60:	1823883a 	mov	r17,r3
    2c64:	9025d07a 	srai	r18,r18,1
    2c68:	9cc00204 	addi	r19,r19,8
    2c6c:	903ff21e 	bne	r18,zero,2c38 <_dtoa_r+0x430>
    2c70:	a80b883a 	mov	r5,r21
    2c74:	a009883a 	mov	r4,r20
    2c78:	880f883a 	mov	r7,r17
    2c7c:	800d883a 	mov	r6,r16
    2c80:	0008abc0 	call	8abc <__divdf3>
    2c84:	1029883a 	mov	r20,r2
    2c88:	182b883a 	mov	r21,r3
    2c8c:	d8c00c17 	ldw	r3,48(sp)
    2c90:	1805003a 	cmpeq	r2,r3,zero
    2c94:	1000081e 	bne	r2,zero,2cb8 <_dtoa_r+0x4b0>
    2c98:	0005883a 	mov	r2,zero
    2c9c:	00cffc34 	movhi	r3,16368
    2ca0:	180f883a 	mov	r7,r3
    2ca4:	a009883a 	mov	r4,r20
    2ca8:	a80b883a 	mov	r5,r21
    2cac:	100d883a 	mov	r6,r2
    2cb0:	0008f340 	call	8f34 <__ltdf2>
    2cb4:	1003fe16 	blt	r2,zero,3cb0 <_dtoa_r+0x14a8>
    2cb8:	b009883a 	mov	r4,r22
    2cbc:	0008fbc0 	call	8fbc <__floatsidf>
    2cc0:	180b883a 	mov	r5,r3
    2cc4:	1009883a 	mov	r4,r2
    2cc8:	a00d883a 	mov	r6,r20
    2ccc:	a80f883a 	mov	r7,r21
    2cd0:	00086f80 	call	86f8 <__muldf3>
    2cd4:	0011883a 	mov	r8,zero
    2cd8:	02500734 	movhi	r9,16412
    2cdc:	1009883a 	mov	r4,r2
    2ce0:	180b883a 	mov	r5,r3
    2ce4:	480f883a 	mov	r7,r9
    2ce8:	400d883a 	mov	r6,r8
    2cec:	00086840 	call	8684 <__adddf3>
    2cf0:	d9000f17 	ldw	r4,60(sp)
    2cf4:	102d883a 	mov	r22,r2
    2cf8:	00bf3034 	movhi	r2,64704
    2cfc:	18b9883a 	add	fp,r3,r2
    2d00:	e02f883a 	mov	r23,fp
    2d04:	20028f1e 	bne	r4,zero,3744 <_dtoa_r+0xf3c>
    2d08:	0005883a 	mov	r2,zero
    2d0c:	00d00534 	movhi	r3,16404
    2d10:	a009883a 	mov	r4,r20
    2d14:	a80b883a 	mov	r5,r21
    2d18:	180f883a 	mov	r7,r3
    2d1c:	100d883a 	mov	r6,r2
    2d20:	00086040 	call	8604 <__subdf3>
    2d24:	1009883a 	mov	r4,r2
    2d28:	e00f883a 	mov	r7,fp
    2d2c:	180b883a 	mov	r5,r3
    2d30:	b00d883a 	mov	r6,r22
    2d34:	1025883a 	mov	r18,r2
    2d38:	1827883a 	mov	r19,r3
    2d3c:	0008e240 	call	8e24 <__gtdf2>
    2d40:	00834f16 	blt	zero,r2,3a80 <_dtoa_r+0x1278>
    2d44:	e0e0003c 	xorhi	r3,fp,32768
    2d48:	9009883a 	mov	r4,r18
    2d4c:	980b883a 	mov	r5,r19
    2d50:	180f883a 	mov	r7,r3
    2d54:	b00d883a 	mov	r6,r22
    2d58:	0008f340 	call	8f34 <__ltdf2>
    2d5c:	1000080e 	bge	r2,zero,2d80 <_dtoa_r+0x578>
    2d60:	0027883a 	mov	r19,zero
    2d64:	0025883a 	mov	r18,zero
    2d68:	d8802617 	ldw	r2,152(sp)
    2d6c:	df000517 	ldw	fp,20(sp)
    2d70:	d8000615 	stw	zero,24(sp)
    2d74:	0084303a 	nor	r2,zero,r2
    2d78:	d8800d15 	stw	r2,52(sp)
    2d7c:	00019b06 	br	33ec <_dtoa_r+0xbe4>
    2d80:	d9801217 	ldw	r6,72(sp)
    2d84:	d8801317 	ldw	r2,76(sp)
    2d88:	3029883a 	mov	r20,r6
    2d8c:	102b883a 	mov	r21,r2
    2d90:	d8c00217 	ldw	r3,8(sp)
    2d94:	18008516 	blt	r3,zero,2fac <_dtoa_r+0x7a4>
    2d98:	d9000d17 	ldw	r4,52(sp)
    2d9c:	00800384 	movi	r2,14
    2da0:	11008216 	blt	r2,r4,2fac <_dtoa_r+0x7a4>
    2da4:	200490fa 	slli	r2,r4,3
    2da8:	d9802617 	ldw	r6,152(sp)
    2dac:	00c00074 	movhi	r3,1
    2db0:	18f4bf04 	addi	r3,r3,-11524
    2db4:	10c5883a 	add	r2,r2,r3
    2db8:	14800017 	ldw	r18,0(r2)
    2dbc:	14c00117 	ldw	r19,4(r2)
    2dc0:	30031e16 	blt	r6,zero,3a3c <_dtoa_r+0x1234>
    2dc4:	d9000517 	ldw	r4,20(sp)
    2dc8:	d8c00f17 	ldw	r3,60(sp)
    2dcc:	a823883a 	mov	r17,r21
    2dd0:	a021883a 	mov	r16,r20
    2dd4:	192b883a 	add	r21,r3,r4
    2dd8:	2039883a 	mov	fp,r4
    2ddc:	00000f06 	br	2e1c <_dtoa_r+0x614>
    2de0:	0005883a 	mov	r2,zero
    2de4:	00d00934 	movhi	r3,16420
    2de8:	5009883a 	mov	r4,r10
    2dec:	580b883a 	mov	r5,r11
    2df0:	180f883a 	mov	r7,r3
    2df4:	100d883a 	mov	r6,r2
    2df8:	00086f80 	call	86f8 <__muldf3>
    2dfc:	180b883a 	mov	r5,r3
    2e00:	000d883a 	mov	r6,zero
    2e04:	000f883a 	mov	r7,zero
    2e08:	1009883a 	mov	r4,r2
    2e0c:	1021883a 	mov	r16,r2
    2e10:	1823883a 	mov	r17,r3
    2e14:	0008d9c0 	call	8d9c <__nedf2>
    2e18:	10004526 	beq	r2,zero,2f30 <_dtoa_r+0x728>
    2e1c:	900d883a 	mov	r6,r18
    2e20:	980f883a 	mov	r7,r19
    2e24:	8009883a 	mov	r4,r16
    2e28:	880b883a 	mov	r5,r17
    2e2c:	0008abc0 	call	8abc <__divdf3>
    2e30:	180b883a 	mov	r5,r3
    2e34:	1009883a 	mov	r4,r2
    2e38:	00090b40 	call	90b4 <__fixdfsi>
    2e3c:	1009883a 	mov	r4,r2
    2e40:	1029883a 	mov	r20,r2
    2e44:	0008fbc0 	call	8fbc <__floatsidf>
    2e48:	180f883a 	mov	r7,r3
    2e4c:	9009883a 	mov	r4,r18
    2e50:	980b883a 	mov	r5,r19
    2e54:	100d883a 	mov	r6,r2
    2e58:	00086f80 	call	86f8 <__muldf3>
    2e5c:	180f883a 	mov	r7,r3
    2e60:	880b883a 	mov	r5,r17
    2e64:	8009883a 	mov	r4,r16
    2e68:	100d883a 	mov	r6,r2
    2e6c:	00086040 	call	8604 <__subdf3>
    2e70:	1015883a 	mov	r10,r2
    2e74:	a0800c04 	addi	r2,r20,48
    2e78:	e0800005 	stb	r2,0(fp)
    2e7c:	e7000044 	addi	fp,fp,1
    2e80:	1817883a 	mov	r11,r3
    2e84:	e57fd61e 	bne	fp,r21,2de0 <_dtoa_r+0x5d8>
    2e88:	500d883a 	mov	r6,r10
    2e8c:	180f883a 	mov	r7,r3
    2e90:	5009883a 	mov	r4,r10
    2e94:	180b883a 	mov	r5,r3
    2e98:	00086840 	call	8684 <__adddf3>
    2e9c:	100d883a 	mov	r6,r2
    2ea0:	9009883a 	mov	r4,r18
    2ea4:	980b883a 	mov	r5,r19
    2ea8:	180f883a 	mov	r7,r3
    2eac:	1021883a 	mov	r16,r2
    2eb0:	1823883a 	mov	r17,r3
    2eb4:	0008f340 	call	8f34 <__ltdf2>
    2eb8:	10000816 	blt	r2,zero,2edc <_dtoa_r+0x6d4>
    2ebc:	980b883a 	mov	r5,r19
    2ec0:	800d883a 	mov	r6,r16
    2ec4:	880f883a 	mov	r7,r17
    2ec8:	9009883a 	mov	r4,r18
    2ecc:	0008d140 	call	8d14 <__eqdf2>
    2ed0:	1000171e 	bne	r2,zero,2f30 <_dtoa_r+0x728>
    2ed4:	a080004c 	andi	r2,r20,1
    2ed8:	10001526 	beq	r2,zero,2f30 <_dtoa_r+0x728>
    2edc:	d8800d17 	ldw	r2,52(sp)
    2ee0:	d8800415 	stw	r2,16(sp)
    2ee4:	e009883a 	mov	r4,fp
    2ee8:	213fffc4 	addi	r4,r4,-1
    2eec:	20c00007 	ldb	r3,0(r4)
    2ef0:	00800e44 	movi	r2,57
    2ef4:	1880081e 	bne	r3,r2,2f18 <_dtoa_r+0x710>
    2ef8:	d8800517 	ldw	r2,20(sp)
    2efc:	113ffa1e 	bne	r2,r4,2ee8 <_dtoa_r+0x6e0>
    2f00:	d8c00417 	ldw	r3,16(sp)
    2f04:	d9800517 	ldw	r6,20(sp)
    2f08:	00800c04 	movi	r2,48
    2f0c:	18c00044 	addi	r3,r3,1
    2f10:	d8c00415 	stw	r3,16(sp)
    2f14:	30800005 	stb	r2,0(r6)
    2f18:	20800003 	ldbu	r2,0(r4)
    2f1c:	d8c00417 	ldw	r3,16(sp)
    2f20:	27000044 	addi	fp,r4,1
    2f24:	10800044 	addi	r2,r2,1
    2f28:	d8c00d15 	stw	r3,52(sp)
    2f2c:	20800005 	stb	r2,0(r4)
    2f30:	d9001617 	ldw	r4,88(sp)
    2f34:	d9400717 	ldw	r5,28(sp)
    2f38:	00059040 	call	5904 <_Bfree>
    2f3c:	e0000005 	stb	zero,0(fp)
    2f40:	d9800d17 	ldw	r6,52(sp)
    2f44:	d8c02717 	ldw	r3,156(sp)
    2f48:	d9002917 	ldw	r4,164(sp)
    2f4c:	30800044 	addi	r2,r6,1
    2f50:	18800015 	stw	r2,0(r3)
    2f54:	20029c26 	beq	r4,zero,39c8 <_dtoa_r+0x11c0>
    2f58:	d8c00517 	ldw	r3,20(sp)
    2f5c:	27000015 	stw	fp,0(r4)
    2f60:	003e5d06 	br	28d8 <_dtoa_r+0xd0>
    2f64:	d9800d17 	ldw	r6,52(sp)
    2f68:	00c00074 	movhi	r3,1
    2f6c:	18f4bf04 	addi	r3,r3,-11524
    2f70:	d9001217 	ldw	r4,72(sp)
    2f74:	300490fa 	slli	r2,r6,3
    2f78:	d9401317 	ldw	r5,76(sp)
    2f7c:	10c5883a 	add	r2,r2,r3
    2f80:	12000017 	ldw	r8,0(r2)
    2f84:	12400117 	ldw	r9,4(r2)
    2f88:	400d883a 	mov	r6,r8
    2f8c:	480f883a 	mov	r7,r9
    2f90:	0008f340 	call	8f34 <__ltdf2>
    2f94:	1000030e 	bge	r2,zero,2fa4 <_dtoa_r+0x79c>
    2f98:	d8800d17 	ldw	r2,52(sp)
    2f9c:	10bfffc4 	addi	r2,r2,-1
    2fa0:	d8800d15 	stw	r2,52(sp)
    2fa4:	d8000c15 	stw	zero,48(sp)
    2fa8:	003ea806 	br	2a4c <_dtoa_r+0x244>
    2fac:	d9000b17 	ldw	r4,44(sp)
    2fb0:	202cc03a 	cmpne	r22,r4,zero
    2fb4:	b000c71e 	bne	r22,zero,32d4 <_dtoa_r+0xacc>
    2fb8:	dc001117 	ldw	r16,68(sp)
    2fbc:	dc801017 	ldw	r18,64(sp)
    2fc0:	0027883a 	mov	r19,zero
    2fc4:	04000b0e 	bge	zero,r16,2ff4 <_dtoa_r+0x7ec>
    2fc8:	d8c00a17 	ldw	r3,40(sp)
    2fcc:	00c0090e 	bge	zero,r3,2ff4 <_dtoa_r+0x7ec>
    2fd0:	8005883a 	mov	r2,r16
    2fd4:	1c011316 	blt	r3,r16,3424 <_dtoa_r+0xc1c>
    2fd8:	d9000a17 	ldw	r4,40(sp)
    2fdc:	d9801117 	ldw	r6,68(sp)
    2fe0:	80a1c83a 	sub	r16,r16,r2
    2fe4:	2089c83a 	sub	r4,r4,r2
    2fe8:	308dc83a 	sub	r6,r6,r2
    2fec:	d9000a15 	stw	r4,40(sp)
    2ff0:	d9801115 	stw	r6,68(sp)
    2ff4:	d8801017 	ldw	r2,64(sp)
    2ff8:	0080150e 	bge	zero,r2,3050 <_dtoa_r+0x848>
    2ffc:	d8c00b17 	ldw	r3,44(sp)
    3000:	1805003a 	cmpeq	r2,r3,zero
    3004:	1001c91e 	bne	r2,zero,372c <_dtoa_r+0xf24>
    3008:	04800e0e 	bge	zero,r18,3044 <_dtoa_r+0x83c>
    300c:	d9001617 	ldw	r4,88(sp)
    3010:	980b883a 	mov	r5,r19
    3014:	900d883a 	mov	r6,r18
    3018:	00066b80 	call	66b8 <__pow5mult>
    301c:	d9001617 	ldw	r4,88(sp)
    3020:	d9800717 	ldw	r6,28(sp)
    3024:	100b883a 	mov	r5,r2
    3028:	1027883a 	mov	r19,r2
    302c:	00063940 	call	6394 <__multiply>
    3030:	d9001617 	ldw	r4,88(sp)
    3034:	d9400717 	ldw	r5,28(sp)
    3038:	1023883a 	mov	r17,r2
    303c:	00059040 	call	5904 <_Bfree>
    3040:	dc400715 	stw	r17,28(sp)
    3044:	d9001017 	ldw	r4,64(sp)
    3048:	248dc83a 	sub	r6,r4,r18
    304c:	30010e1e 	bne	r6,zero,3488 <_dtoa_r+0xc80>
    3050:	d9001617 	ldw	r4,88(sp)
    3054:	04400044 	movi	r17,1
    3058:	880b883a 	mov	r5,r17
    305c:	000657c0 	call	657c <__i2b>
    3060:	d9800917 	ldw	r6,36(sp)
    3064:	1025883a 	mov	r18,r2
    3068:	0180040e 	bge	zero,r6,307c <_dtoa_r+0x874>
    306c:	d9001617 	ldw	r4,88(sp)
    3070:	100b883a 	mov	r5,r2
    3074:	00066b80 	call	66b8 <__pow5mult>
    3078:	1025883a 	mov	r18,r2
    307c:	d8801717 	ldw	r2,92(sp)
    3080:	8880f30e 	bge	r17,r2,3450 <_dtoa_r+0xc48>
    3084:	0023883a 	mov	r17,zero
    3088:	d9800917 	ldw	r6,36(sp)
    308c:	30019e1e 	bne	r6,zero,3708 <_dtoa_r+0xf00>
    3090:	00c00044 	movi	r3,1
    3094:	d9000a17 	ldw	r4,40(sp)
    3098:	20c5883a 	add	r2,r4,r3
    309c:	10c007cc 	andi	r3,r2,31
    30a0:	1800841e 	bne	r3,zero,32b4 <_dtoa_r+0xaac>
    30a4:	00800704 	movi	r2,28
    30a8:	d9000a17 	ldw	r4,40(sp)
    30ac:	d9801117 	ldw	r6,68(sp)
    30b0:	80a1883a 	add	r16,r16,r2
    30b4:	2089883a 	add	r4,r4,r2
    30b8:	308d883a 	add	r6,r6,r2
    30bc:	d9000a15 	stw	r4,40(sp)
    30c0:	d9801115 	stw	r6,68(sp)
    30c4:	d8801117 	ldw	r2,68(sp)
    30c8:	0080050e 	bge	zero,r2,30e0 <_dtoa_r+0x8d8>
    30cc:	d9400717 	ldw	r5,28(sp)
    30d0:	d9001617 	ldw	r4,88(sp)
    30d4:	100d883a 	mov	r6,r2
    30d8:	00062480 	call	6248 <__lshift>
    30dc:	d8800715 	stw	r2,28(sp)
    30e0:	d8c00a17 	ldw	r3,40(sp)
    30e4:	00c0050e 	bge	zero,r3,30fc <_dtoa_r+0x8f4>
    30e8:	d9001617 	ldw	r4,88(sp)
    30ec:	900b883a 	mov	r5,r18
    30f0:	180d883a 	mov	r6,r3
    30f4:	00062480 	call	6248 <__lshift>
    30f8:	1025883a 	mov	r18,r2
    30fc:	d9000c17 	ldw	r4,48(sp)
    3100:	2005003a 	cmpeq	r2,r4,zero
    3104:	10016f26 	beq	r2,zero,36c4 <_dtoa_r+0xebc>
    3108:	d9000f17 	ldw	r4,60(sp)
    310c:	0102170e 	bge	zero,r4,396c <_dtoa_r+0x1164>
    3110:	d9800b17 	ldw	r6,44(sp)
    3114:	3005003a 	cmpeq	r2,r6,zero
    3118:	1000881e 	bne	r2,zero,333c <_dtoa_r+0xb34>
    311c:	0400050e 	bge	zero,r16,3134 <_dtoa_r+0x92c>
    3120:	d9001617 	ldw	r4,88(sp)
    3124:	980b883a 	mov	r5,r19
    3128:	800d883a 	mov	r6,r16
    312c:	00062480 	call	6248 <__lshift>
    3130:	1027883a 	mov	r19,r2
    3134:	8804c03a 	cmpne	r2,r17,zero
    3138:	1002541e 	bne	r2,zero,3a8c <_dtoa_r+0x1284>
    313c:	980b883a 	mov	r5,r19
    3140:	dd800517 	ldw	r22,20(sp)
    3144:	dcc00615 	stw	r19,24(sp)
    3148:	a700004c 	andi	fp,r20,1
    314c:	2827883a 	mov	r19,r5
    3150:	d9000717 	ldw	r4,28(sp)
    3154:	900b883a 	mov	r5,r18
    3158:	00025f00 	call	25f0 <quorem>
    315c:	d9000717 	ldw	r4,28(sp)
    3160:	d9400617 	ldw	r5,24(sp)
    3164:	1023883a 	mov	r17,r2
    3168:	8dc00c04 	addi	r23,r17,48
    316c:	0005a600 	call	5a60 <__mcmp>
    3170:	d9001617 	ldw	r4,88(sp)
    3174:	900b883a 	mov	r5,r18
    3178:	980d883a 	mov	r6,r19
    317c:	1029883a 	mov	r20,r2
    3180:	00060bc0 	call	60bc <__mdiff>
    3184:	102b883a 	mov	r21,r2
    3188:	10800317 	ldw	r2,12(r2)
    318c:	1001281e 	bne	r2,zero,3630 <_dtoa_r+0xe28>
    3190:	d9000717 	ldw	r4,28(sp)
    3194:	a80b883a 	mov	r5,r21
    3198:	0005a600 	call	5a60 <__mcmp>
    319c:	d9001617 	ldw	r4,88(sp)
    31a0:	1021883a 	mov	r16,r2
    31a4:	a80b883a 	mov	r5,r21
    31a8:	00059040 	call	5904 <_Bfree>
    31ac:	8000041e 	bne	r16,zero,31c0 <_dtoa_r+0x9b8>
    31b0:	d8801717 	ldw	r2,92(sp)
    31b4:	1000021e 	bne	r2,zero,31c0 <_dtoa_r+0x9b8>
    31b8:	e004c03a 	cmpne	r2,fp,zero
    31bc:	10011726 	beq	r2,zero,361c <_dtoa_r+0xe14>
    31c0:	a0010616 	blt	r20,zero,35dc <_dtoa_r+0xdd4>
    31c4:	a000041e 	bne	r20,zero,31d8 <_dtoa_r+0x9d0>
    31c8:	d8c01717 	ldw	r3,92(sp)
    31cc:	1800021e 	bne	r3,zero,31d8 <_dtoa_r+0x9d0>
    31d0:	e004c03a 	cmpne	r2,fp,zero
    31d4:	10010126 	beq	r2,zero,35dc <_dtoa_r+0xdd4>
    31d8:	04023d16 	blt	zero,r16,3ad0 <_dtoa_r+0x12c8>
    31dc:	b5c00005 	stb	r23,0(r22)
    31e0:	d9800517 	ldw	r6,20(sp)
    31e4:	d9000f17 	ldw	r4,60(sp)
    31e8:	b5800044 	addi	r22,r22,1
    31ec:	3105883a 	add	r2,r6,r4
    31f0:	b0806526 	beq	r22,r2,3388 <_dtoa_r+0xb80>
    31f4:	d9400717 	ldw	r5,28(sp)
    31f8:	d9001617 	ldw	r4,88(sp)
    31fc:	01800284 	movi	r6,10
    3200:	000f883a 	mov	r7,zero
    3204:	00065b80 	call	65b8 <__multadd>
    3208:	d8800715 	stw	r2,28(sp)
    320c:	d8800617 	ldw	r2,24(sp)
    3210:	14c10c26 	beq	r2,r19,3644 <_dtoa_r+0xe3c>
    3214:	d9400617 	ldw	r5,24(sp)
    3218:	d9001617 	ldw	r4,88(sp)
    321c:	01800284 	movi	r6,10
    3220:	000f883a 	mov	r7,zero
    3224:	00065b80 	call	65b8 <__multadd>
    3228:	d9001617 	ldw	r4,88(sp)
    322c:	980b883a 	mov	r5,r19
    3230:	01800284 	movi	r6,10
    3234:	000f883a 	mov	r7,zero
    3238:	d8800615 	stw	r2,24(sp)
    323c:	00065b80 	call	65b8 <__multadd>
    3240:	1027883a 	mov	r19,r2
    3244:	003fc206 	br	3150 <_dtoa_r+0x948>
    3248:	2445c83a 	sub	r2,r4,r17
    324c:	a088983a 	sll	r4,r20,r2
    3250:	003e4b06 	br	2b80 <_dtoa_r+0x378>
    3254:	01bfffc4 	movi	r6,-1
    3258:	00800044 	movi	r2,1
    325c:	d9800e15 	stw	r6,56(sp)
    3260:	d9800f15 	stw	r6,60(sp)
    3264:	d8800b15 	stw	r2,44(sp)
    3268:	d8c01617 	ldw	r3,88(sp)
    326c:	008005c4 	movi	r2,23
    3270:	18001115 	stw	zero,68(r3)
    3274:	1580082e 	bgeu	r2,r22,3298 <_dtoa_r+0xa90>
    3278:	00c00104 	movi	r3,4
    327c:	0009883a 	mov	r4,zero
    3280:	18c7883a 	add	r3,r3,r3
    3284:	18800504 	addi	r2,r3,20
    3288:	21000044 	addi	r4,r4,1
    328c:	b0bffc2e 	bgeu	r22,r2,3280 <_dtoa_r+0xa78>
    3290:	d9801617 	ldw	r6,88(sp)
    3294:	31001115 	stw	r4,68(r6)
    3298:	dc000f17 	ldw	r16,60(sp)
    329c:	003e4b06 	br	2bcc <_dtoa_r+0x3c4>
    32a0:	d9801717 	ldw	r6,92(sp)
    32a4:	0023883a 	mov	r17,zero
    32a8:	31bfff04 	addi	r6,r6,-4
    32ac:	d9801715 	stw	r6,92(sp)
    32b0:	003df806 	br	2a94 <_dtoa_r+0x28c>
    32b4:	00800804 	movi	r2,32
    32b8:	10c9c83a 	sub	r4,r2,r3
    32bc:	00c00104 	movi	r3,4
    32c0:	19005a16 	blt	r3,r4,342c <_dtoa_r+0xc24>
    32c4:	008000c4 	movi	r2,3
    32c8:	113f7e16 	blt	r2,r4,30c4 <_dtoa_r+0x8bc>
    32cc:	20800704 	addi	r2,r4,28
    32d0:	003f7506 	br	30a8 <_dtoa_r+0x8a0>
    32d4:	d9801717 	ldw	r6,92(sp)
    32d8:	00800044 	movi	r2,1
    32dc:	1180a10e 	bge	r2,r6,3564 <_dtoa_r+0xd5c>
    32e0:	d9800f17 	ldw	r6,60(sp)
    32e4:	d8c01017 	ldw	r3,64(sp)
    32e8:	30bfffc4 	addi	r2,r6,-1
    32ec:	1881c616 	blt	r3,r2,3a08 <_dtoa_r+0x1200>
    32f0:	18a5c83a 	sub	r18,r3,r2
    32f4:	d8800f17 	ldw	r2,60(sp)
    32f8:	10026216 	blt	r2,zero,3c84 <_dtoa_r+0x147c>
    32fc:	dc001117 	ldw	r16,68(sp)
    3300:	1007883a 	mov	r3,r2
    3304:	d9800a17 	ldw	r6,40(sp)
    3308:	d8801117 	ldw	r2,68(sp)
    330c:	d9001617 	ldw	r4,88(sp)
    3310:	30cd883a 	add	r6,r6,r3
    3314:	10c5883a 	add	r2,r2,r3
    3318:	01400044 	movi	r5,1
    331c:	d9800a15 	stw	r6,40(sp)
    3320:	d8801115 	stw	r2,68(sp)
    3324:	000657c0 	call	657c <__i2b>
    3328:	1027883a 	mov	r19,r2
    332c:	003f2506 	br	2fc4 <_dtoa_r+0x7bc>
    3330:	00c00074 	movhi	r3,1
    3334:	18f4a104 	addi	r3,r3,-11644
    3338:	003d6706 	br	28d8 <_dtoa_r+0xd0>
    333c:	dd800517 	ldw	r22,20(sp)
    3340:	04000044 	movi	r16,1
    3344:	00000706 	br	3364 <_dtoa_r+0xb5c>
    3348:	d9400717 	ldw	r5,28(sp)
    334c:	d9001617 	ldw	r4,88(sp)
    3350:	01800284 	movi	r6,10
    3354:	000f883a 	mov	r7,zero
    3358:	00065b80 	call	65b8 <__multadd>
    335c:	d8800715 	stw	r2,28(sp)
    3360:	84000044 	addi	r16,r16,1
    3364:	d9000717 	ldw	r4,28(sp)
    3368:	900b883a 	mov	r5,r18
    336c:	00025f00 	call	25f0 <quorem>
    3370:	15c00c04 	addi	r23,r2,48
    3374:	b5c00005 	stb	r23,0(r22)
    3378:	d8c00f17 	ldw	r3,60(sp)
    337c:	b5800044 	addi	r22,r22,1
    3380:	80fff116 	blt	r16,r3,3348 <_dtoa_r+0xb40>
    3384:	d8000615 	stw	zero,24(sp)
    3388:	d9400717 	ldw	r5,28(sp)
    338c:	d9001617 	ldw	r4,88(sp)
    3390:	01800044 	movi	r6,1
    3394:	00062480 	call	6248 <__lshift>
    3398:	1009883a 	mov	r4,r2
    339c:	900b883a 	mov	r5,r18
    33a0:	d8800715 	stw	r2,28(sp)
    33a4:	0005a600 	call	5a60 <__mcmp>
    33a8:	00803c0e 	bge	zero,r2,349c <_dtoa_r+0xc94>
    33ac:	b009883a 	mov	r4,r22
    33b0:	213fffc4 	addi	r4,r4,-1
    33b4:	21400003 	ldbu	r5,0(r4)
    33b8:	00800e44 	movi	r2,57
    33bc:	28c03fcc 	andi	r3,r5,255
    33c0:	18c0201c 	xori	r3,r3,128
    33c4:	18ffe004 	addi	r3,r3,-128
    33c8:	1881981e 	bne	r3,r2,3a2c <_dtoa_r+0x1224>
    33cc:	d9800517 	ldw	r6,20(sp)
    33d0:	21bff71e 	bne	r4,r6,33b0 <_dtoa_r+0xba8>
    33d4:	d8800d17 	ldw	r2,52(sp)
    33d8:	37000044 	addi	fp,r6,1
    33dc:	10800044 	addi	r2,r2,1
    33e0:	d8800d15 	stw	r2,52(sp)
    33e4:	00800c44 	movi	r2,49
    33e8:	30800005 	stb	r2,0(r6)
    33ec:	d9001617 	ldw	r4,88(sp)
    33f0:	900b883a 	mov	r5,r18
    33f4:	00059040 	call	5904 <_Bfree>
    33f8:	983ecd26 	beq	r19,zero,2f30 <_dtoa_r+0x728>
    33fc:	d8c00617 	ldw	r3,24(sp)
    3400:	18000426 	beq	r3,zero,3414 <_dtoa_r+0xc0c>
    3404:	1cc00326 	beq	r3,r19,3414 <_dtoa_r+0xc0c>
    3408:	d9001617 	ldw	r4,88(sp)
    340c:	180b883a 	mov	r5,r3
    3410:	00059040 	call	5904 <_Bfree>
    3414:	d9001617 	ldw	r4,88(sp)
    3418:	980b883a 	mov	r5,r19
    341c:	00059040 	call	5904 <_Bfree>
    3420:	003ec306 	br	2f30 <_dtoa_r+0x728>
    3424:	1805883a 	mov	r2,r3
    3428:	003eeb06 	br	2fd8 <_dtoa_r+0x7d0>
    342c:	d9800a17 	ldw	r6,40(sp)
    3430:	d8c01117 	ldw	r3,68(sp)
    3434:	20bfff04 	addi	r2,r4,-4
    3438:	308d883a 	add	r6,r6,r2
    343c:	1887883a 	add	r3,r3,r2
    3440:	80a1883a 	add	r16,r16,r2
    3444:	d9800a15 	stw	r6,40(sp)
    3448:	d8c01115 	stw	r3,68(sp)
    344c:	003f1d06 	br	30c4 <_dtoa_r+0x8bc>
    3450:	a03f0c1e 	bne	r20,zero,3084 <_dtoa_r+0x87c>
    3454:	00800434 	movhi	r2,16
    3458:	10bfffc4 	addi	r2,r2,-1
    345c:	a884703a 	and	r2,r21,r2
    3460:	103f081e 	bne	r2,zero,3084 <_dtoa_r+0x87c>
    3464:	a89ffc2c 	andhi	r2,r21,32752
    3468:	103f0626 	beq	r2,zero,3084 <_dtoa_r+0x87c>
    346c:	d8c01117 	ldw	r3,68(sp)
    3470:	d9000a17 	ldw	r4,40(sp)
    3474:	18c00044 	addi	r3,r3,1
    3478:	21000044 	addi	r4,r4,1
    347c:	d8c01115 	stw	r3,68(sp)
    3480:	d9000a15 	stw	r4,40(sp)
    3484:	003f0006 	br	3088 <_dtoa_r+0x880>
    3488:	d9400717 	ldw	r5,28(sp)
    348c:	d9001617 	ldw	r4,88(sp)
    3490:	00066b80 	call	66b8 <__pow5mult>
    3494:	d8800715 	stw	r2,28(sp)
    3498:	003eed06 	br	3050 <_dtoa_r+0x848>
    349c:	1000021e 	bne	r2,zero,34a8 <_dtoa_r+0xca0>
    34a0:	b880004c 	andi	r2,r23,1
    34a4:	103fc11e 	bne	r2,zero,33ac <_dtoa_r+0xba4>
    34a8:	b5bfffc4 	addi	r22,r22,-1
    34ac:	b0c00007 	ldb	r3,0(r22)
    34b0:	00800c04 	movi	r2,48
    34b4:	18bffc26 	beq	r3,r2,34a8 <_dtoa_r+0xca0>
    34b8:	b7000044 	addi	fp,r22,1
    34bc:	003fcb06 	br	33ec <_dtoa_r+0xbe4>
    34c0:	d9800d17 	ldw	r6,52(sp)
    34c4:	018fc83a 	sub	r7,zero,r6
    34c8:	3801f726 	beq	r7,zero,3ca8 <_dtoa_r+0x14a0>
    34cc:	398003cc 	andi	r6,r7,15
    34d0:	300c90fa 	slli	r6,r6,3
    34d4:	01400074 	movhi	r5,1
    34d8:	2974bf04 	addi	r5,r5,-11524
    34dc:	d9001217 	ldw	r4,72(sp)
    34e0:	314d883a 	add	r6,r6,r5
    34e4:	30c00117 	ldw	r3,4(r6)
    34e8:	30800017 	ldw	r2,0(r6)
    34ec:	d9401317 	ldw	r5,76(sp)
    34f0:	3821d13a 	srai	r16,r7,4
    34f4:	100d883a 	mov	r6,r2
    34f8:	180f883a 	mov	r7,r3
    34fc:	00086f80 	call	86f8 <__muldf3>
    3500:	1011883a 	mov	r8,r2
    3504:	1813883a 	mov	r9,r3
    3508:	1029883a 	mov	r20,r2
    350c:	182b883a 	mov	r21,r3
    3510:	8001e526 	beq	r16,zero,3ca8 <_dtoa_r+0x14a0>
    3514:	05800084 	movi	r22,2
    3518:	04400074 	movhi	r17,1
    351c:	8c74f104 	addi	r17,r17,-11324
    3520:	8080004c 	andi	r2,r16,1
    3524:	1005003a 	cmpeq	r2,r2,zero
    3528:	1000081e 	bne	r2,zero,354c <_dtoa_r+0xd44>
    352c:	89800017 	ldw	r6,0(r17)
    3530:	89c00117 	ldw	r7,4(r17)
    3534:	480b883a 	mov	r5,r9
    3538:	4009883a 	mov	r4,r8
    353c:	00086f80 	call	86f8 <__muldf3>
    3540:	1011883a 	mov	r8,r2
    3544:	b5800044 	addi	r22,r22,1
    3548:	1813883a 	mov	r9,r3
    354c:	8021d07a 	srai	r16,r16,1
    3550:	8c400204 	addi	r17,r17,8
    3554:	803ff21e 	bne	r16,zero,3520 <_dtoa_r+0xd18>
    3558:	4029883a 	mov	r20,r8
    355c:	482b883a 	mov	r21,r9
    3560:	003dca06 	br	2c8c <_dtoa_r+0x484>
    3564:	d9000817 	ldw	r4,32(sp)
    3568:	2005003a 	cmpeq	r2,r4,zero
    356c:	1001f61e 	bne	r2,zero,3d48 <_dtoa_r+0x1540>
    3570:	dc001117 	ldw	r16,68(sp)
    3574:	dc801017 	ldw	r18,64(sp)
    3578:	18c10cc4 	addi	r3,r3,1075
    357c:	003f6106 	br	3304 <_dtoa_r+0xafc>
    3580:	d8000b15 	stw	zero,44(sp)
    3584:	d9802617 	ldw	r6,152(sp)
    3588:	d8c00d17 	ldw	r3,52(sp)
    358c:	30800044 	addi	r2,r6,1
    3590:	18ad883a 	add	r22,r3,r2
    3594:	b13fffc4 	addi	r4,r22,-1
    3598:	d9000e15 	stw	r4,56(sp)
    359c:	0581f60e 	bge	zero,r22,3d78 <_dtoa_r+0x1570>
    35a0:	dd800f15 	stw	r22,60(sp)
    35a4:	003f3006 	br	3268 <_dtoa_r+0xa60>
    35a8:	d8000b15 	stw	zero,44(sp)
    35ac:	d9002617 	ldw	r4,152(sp)
    35b0:	0101eb0e 	bge	zero,r4,3d60 <_dtoa_r+0x1558>
    35b4:	202d883a 	mov	r22,r4
    35b8:	d9000e15 	stw	r4,56(sp)
    35bc:	d9000f15 	stw	r4,60(sp)
    35c0:	003f2906 	br	3268 <_dtoa_r+0xa60>
    35c4:	01800044 	movi	r6,1
    35c8:	d9800b15 	stw	r6,44(sp)
    35cc:	003ff706 	br	35ac <_dtoa_r+0xda4>
    35d0:	01000044 	movi	r4,1
    35d4:	d9000b15 	stw	r4,44(sp)
    35d8:	003fea06 	br	3584 <_dtoa_r+0xd7c>
    35dc:	04000c0e 	bge	zero,r16,3610 <_dtoa_r+0xe08>
    35e0:	d9400717 	ldw	r5,28(sp)
    35e4:	d9001617 	ldw	r4,88(sp)
    35e8:	01800044 	movi	r6,1
    35ec:	00062480 	call	6248 <__lshift>
    35f0:	1009883a 	mov	r4,r2
    35f4:	900b883a 	mov	r5,r18
    35f8:	d8800715 	stw	r2,28(sp)
    35fc:	0005a600 	call	5a60 <__mcmp>
    3600:	0081e00e 	bge	zero,r2,3d84 <_dtoa_r+0x157c>
    3604:	bdc00044 	addi	r23,r23,1
    3608:	00800e84 	movi	r2,58
    360c:	b881a226 	beq	r23,r2,3c98 <_dtoa_r+0x1490>
    3610:	b7000044 	addi	fp,r22,1
    3614:	b5c00005 	stb	r23,0(r22)
    3618:	003f7406 	br	33ec <_dtoa_r+0xbe4>
    361c:	00800e44 	movi	r2,57
    3620:	b8819d26 	beq	r23,r2,3c98 <_dtoa_r+0x1490>
    3624:	053ffa0e 	bge	zero,r20,3610 <_dtoa_r+0xe08>
    3628:	8dc00c44 	addi	r23,r17,49
    362c:	003ff806 	br	3610 <_dtoa_r+0xe08>
    3630:	d9001617 	ldw	r4,88(sp)
    3634:	a80b883a 	mov	r5,r21
    3638:	04000044 	movi	r16,1
    363c:	00059040 	call	5904 <_Bfree>
    3640:	003edf06 	br	31c0 <_dtoa_r+0x9b8>
    3644:	d9001617 	ldw	r4,88(sp)
    3648:	980b883a 	mov	r5,r19
    364c:	01800284 	movi	r6,10
    3650:	000f883a 	mov	r7,zero
    3654:	00065b80 	call	65b8 <__multadd>
    3658:	1027883a 	mov	r19,r2
    365c:	d8800615 	stw	r2,24(sp)
    3660:	003ebb06 	br	3150 <_dtoa_r+0x948>
    3664:	d9801117 	ldw	r6,68(sp)
    3668:	d8800d17 	ldw	r2,52(sp)
    366c:	d8000915 	stw	zero,36(sp)
    3670:	308dc83a 	sub	r6,r6,r2
    3674:	0087c83a 	sub	r3,zero,r2
    3678:	d9801115 	stw	r6,68(sp)
    367c:	d8c01015 	stw	r3,64(sp)
    3680:	003cfe06 	br	2a7c <_dtoa_r+0x274>
    3684:	018dc83a 	sub	r6,zero,r6
    3688:	d9801115 	stw	r6,68(sp)
    368c:	d8000a15 	stw	zero,40(sp)
    3690:	003cf306 	br	2a60 <_dtoa_r+0x258>
    3694:	d9000d17 	ldw	r4,52(sp)
    3698:	0008fbc0 	call	8fbc <__floatsidf>
    369c:	880b883a 	mov	r5,r17
    36a0:	8009883a 	mov	r4,r16
    36a4:	180f883a 	mov	r7,r3
    36a8:	100d883a 	mov	r6,r2
    36ac:	0008d9c0 	call	8d9c <__nedf2>
    36b0:	103ce126 	beq	r2,zero,2a38 <_dtoa_r+0x230>
    36b4:	d9800d17 	ldw	r6,52(sp)
    36b8:	31bfffc4 	addi	r6,r6,-1
    36bc:	d9800d15 	stw	r6,52(sp)
    36c0:	003cdd06 	br	2a38 <_dtoa_r+0x230>
    36c4:	d9000717 	ldw	r4,28(sp)
    36c8:	900b883a 	mov	r5,r18
    36cc:	0005a600 	call	5a60 <__mcmp>
    36d0:	103e8d0e 	bge	r2,zero,3108 <_dtoa_r+0x900>
    36d4:	d9400717 	ldw	r5,28(sp)
    36d8:	d9001617 	ldw	r4,88(sp)
    36dc:	01800284 	movi	r6,10
    36e0:	000f883a 	mov	r7,zero
    36e4:	00065b80 	call	65b8 <__multadd>
    36e8:	d9800d17 	ldw	r6,52(sp)
    36ec:	d8800715 	stw	r2,28(sp)
    36f0:	31bfffc4 	addi	r6,r6,-1
    36f4:	d9800d15 	stw	r6,52(sp)
    36f8:	b001a71e 	bne	r22,zero,3d98 <_dtoa_r+0x1590>
    36fc:	d8800e17 	ldw	r2,56(sp)
    3700:	d8800f15 	stw	r2,60(sp)
    3704:	003e8006 	br	3108 <_dtoa_r+0x900>
    3708:	90800417 	ldw	r2,16(r18)
    370c:	1085883a 	add	r2,r2,r2
    3710:	1085883a 	add	r2,r2,r2
    3714:	1485883a 	add	r2,r2,r18
    3718:	11000417 	ldw	r4,16(r2)
    371c:	000592c0 	call	592c <__hi0bits>
    3720:	00c00804 	movi	r3,32
    3724:	1887c83a 	sub	r3,r3,r2
    3728:	003e5a06 	br	3094 <_dtoa_r+0x88c>
    372c:	d9400717 	ldw	r5,28(sp)
    3730:	d9801017 	ldw	r6,64(sp)
    3734:	d9001617 	ldw	r4,88(sp)
    3738:	00066b80 	call	66b8 <__pow5mult>
    373c:	d8800715 	stw	r2,28(sp)
    3740:	003e4306 	br	3050 <_dtoa_r+0x848>
    3744:	d9800f17 	ldw	r6,60(sp)
    3748:	d8800d17 	ldw	r2,52(sp)
    374c:	d9800315 	stw	r6,12(sp)
    3750:	d8800415 	stw	r2,16(sp)
    3754:	d8c00b17 	ldw	r3,44(sp)
    3758:	1805003a 	cmpeq	r2,r3,zero
    375c:	1000e21e 	bne	r2,zero,3ae8 <_dtoa_r+0x12e0>
    3760:	d9000317 	ldw	r4,12(sp)
    3764:	0005883a 	mov	r2,zero
    3768:	00cff834 	movhi	r3,16352
    376c:	200c90fa 	slli	r6,r4,3
    3770:	01000074 	movhi	r4,1
    3774:	2134bf04 	addi	r4,r4,-11524
    3778:	180b883a 	mov	r5,r3
    377c:	310d883a 	add	r6,r6,r4
    3780:	327fff17 	ldw	r9,-4(r6)
    3784:	323ffe17 	ldw	r8,-8(r6)
    3788:	1009883a 	mov	r4,r2
    378c:	480f883a 	mov	r7,r9
    3790:	400d883a 	mov	r6,r8
    3794:	0008abc0 	call	8abc <__divdf3>
    3798:	180b883a 	mov	r5,r3
    379c:	b00d883a 	mov	r6,r22
    37a0:	b80f883a 	mov	r7,r23
    37a4:	1009883a 	mov	r4,r2
    37a8:	00086040 	call	8604 <__subdf3>
    37ac:	a80b883a 	mov	r5,r21
    37b0:	a009883a 	mov	r4,r20
    37b4:	d8c01915 	stw	r3,100(sp)
    37b8:	d8801815 	stw	r2,96(sp)
    37bc:	00090b40 	call	90b4 <__fixdfsi>
    37c0:	1009883a 	mov	r4,r2
    37c4:	1027883a 	mov	r19,r2
    37c8:	0008fbc0 	call	8fbc <__floatsidf>
    37cc:	a80b883a 	mov	r5,r21
    37d0:	a009883a 	mov	r4,r20
    37d4:	180f883a 	mov	r7,r3
    37d8:	100d883a 	mov	r6,r2
    37dc:	00086040 	call	8604 <__subdf3>
    37e0:	d9801817 	ldw	r6,96(sp)
    37e4:	1823883a 	mov	r17,r3
    37e8:	d8801415 	stw	r2,80(sp)
    37ec:	302d883a 	mov	r22,r6
    37f0:	d9800517 	ldw	r6,20(sp)
    37f4:	9cc00c04 	addi	r19,r19,48
    37f8:	dc401515 	stw	r17,84(sp)
    37fc:	d8c01917 	ldw	r3,100(sp)
    3800:	34c00005 	stb	r19,0(r6)
    3804:	d8800517 	ldw	r2,20(sp)
    3808:	d9401917 	ldw	r5,100(sp)
    380c:	d9801417 	ldw	r6,80(sp)
    3810:	b009883a 	mov	r4,r22
    3814:	880f883a 	mov	r7,r17
    3818:	182f883a 	mov	r23,r3
    381c:	17000044 	addi	fp,r2,1
    3820:	0008e240 	call	8e24 <__gtdf2>
    3824:	00804e16 	blt	zero,r2,3960 <_dtoa_r+0x1158>
    3828:	d9801417 	ldw	r6,80(sp)
    382c:	0005883a 	mov	r2,zero
    3830:	00cffc34 	movhi	r3,16368
    3834:	180b883a 	mov	r5,r3
    3838:	880f883a 	mov	r7,r17
    383c:	1009883a 	mov	r4,r2
    3840:	00086040 	call	8604 <__subdf3>
    3844:	d9401917 	ldw	r5,100(sp)
    3848:	180f883a 	mov	r7,r3
    384c:	b009883a 	mov	r4,r22
    3850:	100d883a 	mov	r6,r2
    3854:	0008e240 	call	8e24 <__gtdf2>
    3858:	00bda216 	blt	zero,r2,2ee4 <_dtoa_r+0x6dc>
    385c:	d8c00317 	ldw	r3,12(sp)
    3860:	00800044 	movi	r2,1
    3864:	10c01216 	blt	r2,r3,38b0 <_dtoa_r+0x10a8>
    3868:	003d4506 	br	2d80 <_dtoa_r+0x578>
    386c:	d9801417 	ldw	r6,80(sp)
    3870:	0005883a 	mov	r2,zero
    3874:	00cffc34 	movhi	r3,16368
    3878:	180b883a 	mov	r5,r3
    387c:	880f883a 	mov	r7,r17
    3880:	1009883a 	mov	r4,r2
    3884:	00086040 	call	8604 <__subdf3>
    3888:	d9c01b17 	ldw	r7,108(sp)
    388c:	180b883a 	mov	r5,r3
    3890:	1009883a 	mov	r4,r2
    3894:	b00d883a 	mov	r6,r22
    3898:	0008f340 	call	8f34 <__ltdf2>
    389c:	103d9116 	blt	r2,zero,2ee4 <_dtoa_r+0x6dc>
    38a0:	d9800517 	ldw	r6,20(sp)
    38a4:	d9000317 	ldw	r4,12(sp)
    38a8:	3105883a 	add	r2,r6,r4
    38ac:	e0bd3426 	beq	fp,r2,2d80 <_dtoa_r+0x578>
    38b0:	04500934 	movhi	r17,16420
    38b4:	0021883a 	mov	r16,zero
    38b8:	b80b883a 	mov	r5,r23
    38bc:	b009883a 	mov	r4,r22
    38c0:	800d883a 	mov	r6,r16
    38c4:	880f883a 	mov	r7,r17
    38c8:	00086f80 	call	86f8 <__muldf3>
    38cc:	d9401517 	ldw	r5,84(sp)
    38d0:	d9001417 	ldw	r4,80(sp)
    38d4:	880f883a 	mov	r7,r17
    38d8:	000d883a 	mov	r6,zero
    38dc:	d8801a15 	stw	r2,104(sp)
    38e0:	d8c01b15 	stw	r3,108(sp)
    38e4:	00086f80 	call	86f8 <__muldf3>
    38e8:	180b883a 	mov	r5,r3
    38ec:	1009883a 	mov	r4,r2
    38f0:	1823883a 	mov	r17,r3
    38f4:	1021883a 	mov	r16,r2
    38f8:	00090b40 	call	90b4 <__fixdfsi>
    38fc:	1009883a 	mov	r4,r2
    3900:	102b883a 	mov	r21,r2
    3904:	0008fbc0 	call	8fbc <__floatsidf>
    3908:	880b883a 	mov	r5,r17
    390c:	8009883a 	mov	r4,r16
    3910:	180f883a 	mov	r7,r3
    3914:	100d883a 	mov	r6,r2
    3918:	00086040 	call	8604 <__subdf3>
    391c:	1021883a 	mov	r16,r2
    3920:	d9001b17 	ldw	r4,108(sp)
    3924:	1823883a 	mov	r17,r3
    3928:	dc001415 	stw	r16,80(sp)
    392c:	ad400c04 	addi	r21,r21,48
    3930:	dc401515 	stw	r17,84(sp)
    3934:	d8801a17 	ldw	r2,104(sp)
    3938:	e5400005 	stb	r21,0(fp)
    393c:	202f883a 	mov	r23,r4
    3940:	d9c01b17 	ldw	r7,108(sp)
    3944:	d9001417 	ldw	r4,80(sp)
    3948:	880b883a 	mov	r5,r17
    394c:	100d883a 	mov	r6,r2
    3950:	102d883a 	mov	r22,r2
    3954:	e7000044 	addi	fp,fp,1
    3958:	0008f340 	call	8f34 <__ltdf2>
    395c:	103fc30e 	bge	r2,zero,386c <_dtoa_r+0x1064>
    3960:	d9000417 	ldw	r4,16(sp)
    3964:	d9000d15 	stw	r4,52(sp)
    3968:	003d7106 	br	2f30 <_dtoa_r+0x728>
    396c:	d9801717 	ldw	r6,92(sp)
    3970:	00800084 	movi	r2,2
    3974:	11bde60e 	bge	r2,r6,3110 <_dtoa_r+0x908>
    3978:	203cfb1e 	bne	r4,zero,2d68 <_dtoa_r+0x560>
    397c:	d9001617 	ldw	r4,88(sp)
    3980:	900b883a 	mov	r5,r18
    3984:	01800144 	movi	r6,5
    3988:	000f883a 	mov	r7,zero
    398c:	00065b80 	call	65b8 <__multadd>
    3990:	d9000717 	ldw	r4,28(sp)
    3994:	100b883a 	mov	r5,r2
    3998:	1025883a 	mov	r18,r2
    399c:	0005a600 	call	5a60 <__mcmp>
    39a0:	00bcf10e 	bge	zero,r2,2d68 <_dtoa_r+0x560>
    39a4:	d8c00d17 	ldw	r3,52(sp)
    39a8:	d9000517 	ldw	r4,20(sp)
    39ac:	d8000615 	stw	zero,24(sp)
    39b0:	18c00044 	addi	r3,r3,1
    39b4:	d8c00d15 	stw	r3,52(sp)
    39b8:	00800c44 	movi	r2,49
    39bc:	27000044 	addi	fp,r4,1
    39c0:	20800005 	stb	r2,0(r4)
    39c4:	003e8906 	br	33ec <_dtoa_r+0xbe4>
    39c8:	d8c00517 	ldw	r3,20(sp)
    39cc:	003bc206 	br	28d8 <_dtoa_r+0xd0>
    39d0:	01800074 	movhi	r6,1
    39d4:	31b4f104 	addi	r6,r6,-11324
    39d8:	30c00917 	ldw	r3,36(r6)
    39dc:	30800817 	ldw	r2,32(r6)
    39e0:	d9001217 	ldw	r4,72(sp)
    39e4:	d9401317 	ldw	r5,76(sp)
    39e8:	180f883a 	mov	r7,r3
    39ec:	100d883a 	mov	r6,r2
    39f0:	0008abc0 	call	8abc <__divdf3>
    39f4:	948003cc 	andi	r18,r18,15
    39f8:	058000c4 	movi	r22,3
    39fc:	1029883a 	mov	r20,r2
    3a00:	182b883a 	mov	r21,r3
    3a04:	003c8906 	br	2c2c <_dtoa_r+0x424>
    3a08:	d9001017 	ldw	r4,64(sp)
    3a0c:	d9800917 	ldw	r6,36(sp)
    3a10:	0025883a 	mov	r18,zero
    3a14:	1105c83a 	sub	r2,r2,r4
    3a18:	2089883a 	add	r4,r4,r2
    3a1c:	308d883a 	add	r6,r6,r2
    3a20:	d9001015 	stw	r4,64(sp)
    3a24:	d9800915 	stw	r6,36(sp)
    3a28:	003e3206 	br	32f4 <_dtoa_r+0xaec>
    3a2c:	28800044 	addi	r2,r5,1
    3a30:	27000044 	addi	fp,r4,1
    3a34:	20800005 	stb	r2,0(r4)
    3a38:	003e6c06 	br	33ec <_dtoa_r+0xbe4>
    3a3c:	d8800f17 	ldw	r2,60(sp)
    3a40:	00bce016 	blt	zero,r2,2dc4 <_dtoa_r+0x5bc>
    3a44:	d9800f17 	ldw	r6,60(sp)
    3a48:	303cc51e 	bne	r6,zero,2d60 <_dtoa_r+0x558>
    3a4c:	0005883a 	mov	r2,zero
    3a50:	00d00534 	movhi	r3,16404
    3a54:	980b883a 	mov	r5,r19
    3a58:	180f883a 	mov	r7,r3
    3a5c:	9009883a 	mov	r4,r18
    3a60:	100d883a 	mov	r6,r2
    3a64:	00086f80 	call	86f8 <__muldf3>
    3a68:	180b883a 	mov	r5,r3
    3a6c:	a80f883a 	mov	r7,r21
    3a70:	1009883a 	mov	r4,r2
    3a74:	a00d883a 	mov	r6,r20
    3a78:	0008eac0 	call	8eac <__gedf2>
    3a7c:	103cb80e 	bge	r2,zero,2d60 <_dtoa_r+0x558>
    3a80:	0027883a 	mov	r19,zero
    3a84:	0025883a 	mov	r18,zero
    3a88:	003fc606 	br	39a4 <_dtoa_r+0x119c>
    3a8c:	99400117 	ldw	r5,4(r19)
    3a90:	d9001617 	ldw	r4,88(sp)
    3a94:	0005e840 	call	5e84 <_Balloc>
    3a98:	99800417 	ldw	r6,16(r19)
    3a9c:	11000304 	addi	r4,r2,12
    3aa0:	99400304 	addi	r5,r19,12
    3aa4:	318d883a 	add	r6,r6,r6
    3aa8:	318d883a 	add	r6,r6,r6
    3aac:	31800204 	addi	r6,r6,8
    3ab0:	1023883a 	mov	r17,r2
    3ab4:	00057840 	call	5784 <memcpy>
    3ab8:	d9001617 	ldw	r4,88(sp)
    3abc:	880b883a 	mov	r5,r17
    3ac0:	01800044 	movi	r6,1
    3ac4:	00062480 	call	6248 <__lshift>
    3ac8:	100b883a 	mov	r5,r2
    3acc:	003d9c06 	br	3140 <_dtoa_r+0x938>
    3ad0:	00800e44 	movi	r2,57
    3ad4:	b8807026 	beq	r23,r2,3c98 <_dtoa_r+0x1490>
    3ad8:	b8800044 	addi	r2,r23,1
    3adc:	b7000044 	addi	fp,r22,1
    3ae0:	b0800005 	stb	r2,0(r22)
    3ae4:	003e4106 	br	33ec <_dtoa_r+0xbe4>
    3ae8:	d8800317 	ldw	r2,12(sp)
    3aec:	01800074 	movhi	r6,1
    3af0:	31b4bf04 	addi	r6,r6,-11524
    3af4:	b009883a 	mov	r4,r22
    3af8:	100e90fa 	slli	r7,r2,3
    3afc:	b80b883a 	mov	r5,r23
    3b00:	398f883a 	add	r7,r7,r6
    3b04:	38bffe17 	ldw	r2,-8(r7)
    3b08:	d9800517 	ldw	r6,20(sp)
    3b0c:	38ffff17 	ldw	r3,-4(r7)
    3b10:	37000044 	addi	fp,r6,1
    3b14:	180f883a 	mov	r7,r3
    3b18:	100d883a 	mov	r6,r2
    3b1c:	00086f80 	call	86f8 <__muldf3>
    3b20:	a80b883a 	mov	r5,r21
    3b24:	a009883a 	mov	r4,r20
    3b28:	182f883a 	mov	r23,r3
    3b2c:	102d883a 	mov	r22,r2
    3b30:	00090b40 	call	90b4 <__fixdfsi>
    3b34:	1009883a 	mov	r4,r2
    3b38:	1027883a 	mov	r19,r2
    3b3c:	0008fbc0 	call	8fbc <__floatsidf>
    3b40:	a80b883a 	mov	r5,r21
    3b44:	a009883a 	mov	r4,r20
    3b48:	180f883a 	mov	r7,r3
    3b4c:	100d883a 	mov	r6,r2
    3b50:	00086040 	call	8604 <__subdf3>
    3b54:	180b883a 	mov	r5,r3
    3b58:	d8c00517 	ldw	r3,20(sp)
    3b5c:	9cc00c04 	addi	r19,r19,48
    3b60:	1009883a 	mov	r4,r2
    3b64:	1cc00005 	stb	r19,0(r3)
    3b68:	2021883a 	mov	r16,r4
    3b6c:	d9000317 	ldw	r4,12(sp)
    3b70:	00800044 	movi	r2,1
    3b74:	2823883a 	mov	r17,r5
    3b78:	20802226 	beq	r4,r2,3c04 <_dtoa_r+0x13fc>
    3b7c:	1029883a 	mov	r20,r2
    3b80:	0005883a 	mov	r2,zero
    3b84:	00d00934 	movhi	r3,16420
    3b88:	180f883a 	mov	r7,r3
    3b8c:	100d883a 	mov	r6,r2
    3b90:	880b883a 	mov	r5,r17
    3b94:	8009883a 	mov	r4,r16
    3b98:	00086f80 	call	86f8 <__muldf3>
    3b9c:	180b883a 	mov	r5,r3
    3ba0:	1009883a 	mov	r4,r2
    3ba4:	1823883a 	mov	r17,r3
    3ba8:	1021883a 	mov	r16,r2
    3bac:	00090b40 	call	90b4 <__fixdfsi>
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	102b883a 	mov	r21,r2
    3bb8:	0008fbc0 	call	8fbc <__floatsidf>
    3bbc:	880b883a 	mov	r5,r17
    3bc0:	8009883a 	mov	r4,r16
    3bc4:	180f883a 	mov	r7,r3
    3bc8:	100d883a 	mov	r6,r2
    3bcc:	00086040 	call	8604 <__subdf3>
    3bd0:	180b883a 	mov	r5,r3
    3bd4:	d8c00517 	ldw	r3,20(sp)
    3bd8:	1009883a 	mov	r4,r2
    3bdc:	ad400c04 	addi	r21,r21,48
    3be0:	1d05883a 	add	r2,r3,r20
    3be4:	15400005 	stb	r21,0(r2)
    3be8:	2021883a 	mov	r16,r4
    3bec:	d9000317 	ldw	r4,12(sp)
    3bf0:	a5000044 	addi	r20,r20,1
    3bf4:	2823883a 	mov	r17,r5
    3bf8:	a13fe11e 	bne	r20,r4,3b80 <_dtoa_r+0x1378>
    3bfc:	e505883a 	add	r2,fp,r20
    3c00:	173fffc4 	addi	fp,r2,-1
    3c04:	0025883a 	mov	r18,zero
    3c08:	04cff834 	movhi	r19,16352
    3c0c:	b009883a 	mov	r4,r22
    3c10:	b80b883a 	mov	r5,r23
    3c14:	900d883a 	mov	r6,r18
    3c18:	980f883a 	mov	r7,r19
    3c1c:	00086840 	call	8684 <__adddf3>
    3c20:	180b883a 	mov	r5,r3
    3c24:	1009883a 	mov	r4,r2
    3c28:	800d883a 	mov	r6,r16
    3c2c:	880f883a 	mov	r7,r17
    3c30:	0008f340 	call	8f34 <__ltdf2>
    3c34:	103cab16 	blt	r2,zero,2ee4 <_dtoa_r+0x6dc>
    3c38:	0009883a 	mov	r4,zero
    3c3c:	980b883a 	mov	r5,r19
    3c40:	b80f883a 	mov	r7,r23
    3c44:	b00d883a 	mov	r6,r22
    3c48:	00086040 	call	8604 <__subdf3>
    3c4c:	180b883a 	mov	r5,r3
    3c50:	880f883a 	mov	r7,r17
    3c54:	1009883a 	mov	r4,r2
    3c58:	800d883a 	mov	r6,r16
    3c5c:	0008e240 	call	8e24 <__gtdf2>
    3c60:	00bc470e 	bge	zero,r2,2d80 <_dtoa_r+0x578>
    3c64:	00c00c04 	movi	r3,48
    3c68:	e73fffc4 	addi	fp,fp,-1
    3c6c:	e0800007 	ldb	r2,0(fp)
    3c70:	10fffd26 	beq	r2,r3,3c68 <_dtoa_r+0x1460>
    3c74:	d9800417 	ldw	r6,16(sp)
    3c78:	e7000044 	addi	fp,fp,1
    3c7c:	d9800d15 	stw	r6,52(sp)
    3c80:	003cab06 	br	2f30 <_dtoa_r+0x728>
    3c84:	d8c00f17 	ldw	r3,60(sp)
    3c88:	d9001117 	ldw	r4,68(sp)
    3c8c:	20e1c83a 	sub	r16,r4,r3
    3c90:	0007883a 	mov	r3,zero
    3c94:	003d9b06 	br	3304 <_dtoa_r+0xafc>
    3c98:	00800e44 	movi	r2,57
    3c9c:	b0800005 	stb	r2,0(r22)
    3ca0:	b5800044 	addi	r22,r22,1
    3ca4:	003dc106 	br	33ac <_dtoa_r+0xba4>
    3ca8:	05800084 	movi	r22,2
    3cac:	003bf706 	br	2c8c <_dtoa_r+0x484>
    3cb0:	d9000f17 	ldw	r4,60(sp)
    3cb4:	013c000e 	bge	zero,r4,2cb8 <_dtoa_r+0x4b0>
    3cb8:	d9800e17 	ldw	r6,56(sp)
    3cbc:	01bc300e 	bge	zero,r6,2d80 <_dtoa_r+0x578>
    3cc0:	0005883a 	mov	r2,zero
    3cc4:	00d00934 	movhi	r3,16420
    3cc8:	a80b883a 	mov	r5,r21
    3ccc:	180f883a 	mov	r7,r3
    3cd0:	a009883a 	mov	r4,r20
    3cd4:	100d883a 	mov	r6,r2
    3cd8:	00086f80 	call	86f8 <__muldf3>
    3cdc:	b1000044 	addi	r4,r22,1
    3ce0:	1021883a 	mov	r16,r2
    3ce4:	1823883a 	mov	r17,r3
    3ce8:	0008fbc0 	call	8fbc <__floatsidf>
    3cec:	880b883a 	mov	r5,r17
    3cf0:	8009883a 	mov	r4,r16
    3cf4:	180f883a 	mov	r7,r3
    3cf8:	100d883a 	mov	r6,r2
    3cfc:	00086f80 	call	86f8 <__muldf3>
    3d00:	0011883a 	mov	r8,zero
    3d04:	02500734 	movhi	r9,16412
    3d08:	180b883a 	mov	r5,r3
    3d0c:	480f883a 	mov	r7,r9
    3d10:	1009883a 	mov	r4,r2
    3d14:	400d883a 	mov	r6,r8
    3d18:	00086840 	call	8684 <__adddf3>
    3d1c:	102d883a 	mov	r22,r2
    3d20:	00bf3034 	movhi	r2,64704
    3d24:	10ef883a 	add	r23,r2,r3
    3d28:	d8800d17 	ldw	r2,52(sp)
    3d2c:	d8c00e17 	ldw	r3,56(sp)
    3d30:	8029883a 	mov	r20,r16
    3d34:	10bfffc4 	addi	r2,r2,-1
    3d38:	882b883a 	mov	r21,r17
    3d3c:	d8800415 	stw	r2,16(sp)
    3d40:	d8c00315 	stw	r3,12(sp)
    3d44:	003e8306 	br	3754 <_dtoa_r+0xf4c>
    3d48:	d8800117 	ldw	r2,4(sp)
    3d4c:	dc001117 	ldw	r16,68(sp)
    3d50:	dc801017 	ldw	r18,64(sp)
    3d54:	00c00d84 	movi	r3,54
    3d58:	1887c83a 	sub	r3,r3,r2
    3d5c:	003d6906 	br	3304 <_dtoa_r+0xafc>
    3d60:	01800044 	movi	r6,1
    3d64:	3021883a 	mov	r16,r6
    3d68:	d9800f15 	stw	r6,60(sp)
    3d6c:	d9802615 	stw	r6,152(sp)
    3d70:	d9800e15 	stw	r6,56(sp)
    3d74:	003b9306 	br	2bc4 <_dtoa_r+0x3bc>
    3d78:	b021883a 	mov	r16,r22
    3d7c:	dd800f15 	stw	r22,60(sp)
    3d80:	003b9006 	br	2bc4 <_dtoa_r+0x3bc>
    3d84:	103e221e 	bne	r2,zero,3610 <_dtoa_r+0xe08>
    3d88:	b880004c 	andi	r2,r23,1
    3d8c:	1005003a 	cmpeq	r2,r2,zero
    3d90:	103e1f1e 	bne	r2,zero,3610 <_dtoa_r+0xe08>
    3d94:	003e1b06 	br	3604 <_dtoa_r+0xdfc>
    3d98:	d9001617 	ldw	r4,88(sp)
    3d9c:	980b883a 	mov	r5,r19
    3da0:	01800284 	movi	r6,10
    3da4:	000f883a 	mov	r7,zero
    3da8:	00065b80 	call	65b8 <__multadd>
    3dac:	d8c00e17 	ldw	r3,56(sp)
    3db0:	1027883a 	mov	r19,r2
    3db4:	d8c00f15 	stw	r3,60(sp)
    3db8:	003cd306 	br	3108 <_dtoa_r+0x900>

00003dbc <_fflush_r>:
    3dbc:	defffb04 	addi	sp,sp,-20
    3dc0:	dcc00315 	stw	r19,12(sp)
    3dc4:	dc800215 	stw	r18,8(sp)
    3dc8:	dfc00415 	stw	ra,16(sp)
    3dcc:	dc400115 	stw	r17,4(sp)
    3dd0:	dc000015 	stw	r16,0(sp)
    3dd4:	2027883a 	mov	r19,r4
    3dd8:	2825883a 	mov	r18,r5
    3ddc:	20000226 	beq	r4,zero,3de8 <_fflush_r+0x2c>
    3de0:	20800e17 	ldw	r2,56(r4)
    3de4:	10005626 	beq	r2,zero,3f40 <_fflush_r+0x184>
    3de8:	9100030b 	ldhu	r4,12(r18)
    3dec:	20ffffcc 	andi	r3,r4,65535
    3df0:	18e0001c 	xori	r3,r3,32768
    3df4:	18e00004 	addi	r3,r3,-32768
    3df8:	1880020c 	andi	r2,r3,8
    3dfc:	1000261e 	bne	r2,zero,3e98 <_fflush_r+0xdc>
    3e00:	90c00117 	ldw	r3,4(r18)
    3e04:	20820014 	ori	r2,r4,2048
    3e08:	9080030d 	sth	r2,12(r18)
    3e0c:	1009883a 	mov	r4,r2
    3e10:	00c0400e 	bge	zero,r3,3f14 <_fflush_r+0x158>
    3e14:	92000a17 	ldw	r8,40(r18)
    3e18:	40004026 	beq	r8,zero,3f1c <_fflush_r+0x160>
    3e1c:	2084000c 	andi	r2,r4,4096
    3e20:	10005326 	beq	r2,zero,3f70 <_fflush_r+0x1b4>
    3e24:	94001417 	ldw	r16,80(r18)
    3e28:	9080030b 	ldhu	r2,12(r18)
    3e2c:	1080010c 	andi	r2,r2,4
    3e30:	1000481e 	bne	r2,zero,3f54 <_fflush_r+0x198>
    3e34:	91400717 	ldw	r5,28(r18)
    3e38:	9809883a 	mov	r4,r19
    3e3c:	800d883a 	mov	r6,r16
    3e40:	000f883a 	mov	r7,zero
    3e44:	403ee83a 	callr	r8
    3e48:	8080261e 	bne	r16,r2,3ee4 <_fflush_r+0x128>
    3e4c:	9080030b 	ldhu	r2,12(r18)
    3e50:	91000417 	ldw	r4,16(r18)
    3e54:	90000115 	stw	zero,4(r18)
    3e58:	10bdffcc 	andi	r2,r2,63487
    3e5c:	10ffffcc 	andi	r3,r2,65535
    3e60:	18c4000c 	andi	r3,r3,4096
    3e64:	9080030d 	sth	r2,12(r18)
    3e68:	91000015 	stw	r4,0(r18)
    3e6c:	18002b26 	beq	r3,zero,3f1c <_fflush_r+0x160>
    3e70:	0007883a 	mov	r3,zero
    3e74:	1805883a 	mov	r2,r3
    3e78:	94001415 	stw	r16,80(r18)
    3e7c:	dfc00417 	ldw	ra,16(sp)
    3e80:	dcc00317 	ldw	r19,12(sp)
    3e84:	dc800217 	ldw	r18,8(sp)
    3e88:	dc400117 	ldw	r17,4(sp)
    3e8c:	dc000017 	ldw	r16,0(sp)
    3e90:	dec00504 	addi	sp,sp,20
    3e94:	f800283a 	ret
    3e98:	94400417 	ldw	r17,16(r18)
    3e9c:	88001f26 	beq	r17,zero,3f1c <_fflush_r+0x160>
    3ea0:	90800017 	ldw	r2,0(r18)
    3ea4:	18c000cc 	andi	r3,r3,3
    3ea8:	94400015 	stw	r17,0(r18)
    3eac:	1461c83a 	sub	r16,r2,r17
    3eb0:	18002526 	beq	r3,zero,3f48 <_fflush_r+0x18c>
    3eb4:	0005883a 	mov	r2,zero
    3eb8:	90800215 	stw	r2,8(r18)
    3ebc:	0400170e 	bge	zero,r16,3f1c <_fflush_r+0x160>
    3ec0:	90c00917 	ldw	r3,36(r18)
    3ec4:	91400717 	ldw	r5,28(r18)
    3ec8:	880d883a 	mov	r6,r17
    3ecc:	800f883a 	mov	r7,r16
    3ed0:	9809883a 	mov	r4,r19
    3ed4:	183ee83a 	callr	r3
    3ed8:	88a3883a 	add	r17,r17,r2
    3edc:	80a1c83a 	sub	r16,r16,r2
    3ee0:	00bff616 	blt	zero,r2,3ebc <_fflush_r+0x100>
    3ee4:	9080030b 	ldhu	r2,12(r18)
    3ee8:	00ffffc4 	movi	r3,-1
    3eec:	10801014 	ori	r2,r2,64
    3ef0:	9080030d 	sth	r2,12(r18)
    3ef4:	1805883a 	mov	r2,r3
    3ef8:	dfc00417 	ldw	ra,16(sp)
    3efc:	dcc00317 	ldw	r19,12(sp)
    3f00:	dc800217 	ldw	r18,8(sp)
    3f04:	dc400117 	ldw	r17,4(sp)
    3f08:	dc000017 	ldw	r16,0(sp)
    3f0c:	dec00504 	addi	sp,sp,20
    3f10:	f800283a 	ret
    3f14:	90800f17 	ldw	r2,60(r18)
    3f18:	00bfbe16 	blt	zero,r2,3e14 <_fflush_r+0x58>
    3f1c:	0007883a 	mov	r3,zero
    3f20:	1805883a 	mov	r2,r3
    3f24:	dfc00417 	ldw	ra,16(sp)
    3f28:	dcc00317 	ldw	r19,12(sp)
    3f2c:	dc800217 	ldw	r18,8(sp)
    3f30:	dc400117 	ldw	r17,4(sp)
    3f34:	dc000017 	ldw	r16,0(sp)
    3f38:	dec00504 	addi	sp,sp,20
    3f3c:	f800283a 	ret
    3f40:	00040540 	call	4054 <__sinit>
    3f44:	003fa806 	br	3de8 <_fflush_r+0x2c>
    3f48:	90800517 	ldw	r2,20(r18)
    3f4c:	90800215 	stw	r2,8(r18)
    3f50:	003fda06 	br	3ebc <_fflush_r+0x100>
    3f54:	90800117 	ldw	r2,4(r18)
    3f58:	90c00c17 	ldw	r3,48(r18)
    3f5c:	80a1c83a 	sub	r16,r16,r2
    3f60:	183fb426 	beq	r3,zero,3e34 <_fflush_r+0x78>
    3f64:	90800f17 	ldw	r2,60(r18)
    3f68:	80a1c83a 	sub	r16,r16,r2
    3f6c:	003fb106 	br	3e34 <_fflush_r+0x78>
    3f70:	91400717 	ldw	r5,28(r18)
    3f74:	9809883a 	mov	r4,r19
    3f78:	000d883a 	mov	r6,zero
    3f7c:	01c00044 	movi	r7,1
    3f80:	403ee83a 	callr	r8
    3f84:	1021883a 	mov	r16,r2
    3f88:	00bfffc4 	movi	r2,-1
    3f8c:	80800226 	beq	r16,r2,3f98 <_fflush_r+0x1dc>
    3f90:	92000a17 	ldw	r8,40(r18)
    3f94:	003fa406 	br	3e28 <_fflush_r+0x6c>
    3f98:	98c00017 	ldw	r3,0(r19)
    3f9c:	00800744 	movi	r2,29
    3fa0:	18bfde26 	beq	r3,r2,3f1c <_fflush_r+0x160>
    3fa4:	9080030b 	ldhu	r2,12(r18)
    3fa8:	8007883a 	mov	r3,r16
    3fac:	10801014 	ori	r2,r2,64
    3fb0:	9080030d 	sth	r2,12(r18)
    3fb4:	003fcf06 	br	3ef4 <_fflush_r+0x138>

00003fb8 <fflush>:
    3fb8:	01400034 	movhi	r5,0
    3fbc:	294f6f04 	addi	r5,r5,15804
    3fc0:	2007883a 	mov	r3,r4
    3fc4:	20000526 	beq	r4,zero,3fdc <fflush+0x24>
    3fc8:	00800074 	movhi	r2,1
    3fcc:	10b82b04 	addi	r2,r2,-8020
    3fd0:	11000017 	ldw	r4,0(r2)
    3fd4:	180b883a 	mov	r5,r3
    3fd8:	0003dbc1 	jmpi	3dbc <_fflush_r>
    3fdc:	00800074 	movhi	r2,1
    3fe0:	10b82c04 	addi	r2,r2,-8016
    3fe4:	11000017 	ldw	r4,0(r2)
    3fe8:	0004b881 	jmpi	4b88 <_fwalk_reent>

00003fec <std>:
    3fec:	00800034 	movhi	r2,0
    3ff0:	109bf304 	addi	r2,r2,28620
    3ff4:	20800b15 	stw	r2,44(r4)
    3ff8:	00800034 	movhi	r2,0
    3ffc:	109c2e04 	addi	r2,r2,28856
    4000:	20800815 	stw	r2,32(r4)
    4004:	00c00034 	movhi	r3,0
    4008:	18dc0f04 	addi	r3,r3,28732
    400c:	00800034 	movhi	r2,0
    4010:	109bf504 	addi	r2,r2,28628
    4014:	2140030d 	sth	r5,12(r4)
    4018:	2180038d 	sth	r6,14(r4)
    401c:	20c00915 	stw	r3,36(r4)
    4020:	20800a15 	stw	r2,40(r4)
    4024:	20000015 	stw	zero,0(r4)
    4028:	20000115 	stw	zero,4(r4)
    402c:	20000215 	stw	zero,8(r4)
    4030:	20000415 	stw	zero,16(r4)
    4034:	20000515 	stw	zero,20(r4)
    4038:	20000615 	stw	zero,24(r4)
    403c:	21000715 	stw	r4,28(r4)
    4040:	f800283a 	ret

00004044 <__sfp_lock_acquire>:
    4044:	f800283a 	ret

00004048 <__sfp_lock_release>:
    4048:	f800283a 	ret

0000404c <__sinit_lock_acquire>:
    404c:	f800283a 	ret

00004050 <__sinit_lock_release>:
    4050:	f800283a 	ret

00004054 <__sinit>:
    4054:	20800e17 	ldw	r2,56(r4)
    4058:	defffd04 	addi	sp,sp,-12
    405c:	dc400115 	stw	r17,4(sp)
    4060:	dc000015 	stw	r16,0(sp)
    4064:	dfc00215 	stw	ra,8(sp)
    4068:	04400044 	movi	r17,1
    406c:	01400104 	movi	r5,4
    4070:	000d883a 	mov	r6,zero
    4074:	2021883a 	mov	r16,r4
    4078:	2200bb04 	addi	r8,r4,748
    407c:	200f883a 	mov	r7,r4
    4080:	10000526 	beq	r2,zero,4098 <__sinit+0x44>
    4084:	dfc00217 	ldw	ra,8(sp)
    4088:	dc400117 	ldw	r17,4(sp)
    408c:	dc000017 	ldw	r16,0(sp)
    4090:	dec00304 	addi	sp,sp,12
    4094:	f800283a 	ret
    4098:	21000117 	ldw	r4,4(r4)
    409c:	00800034 	movhi	r2,0
    40a0:	10904e04 	addi	r2,r2,16696
    40a4:	00c000c4 	movi	r3,3
    40a8:	80800f15 	stw	r2,60(r16)
    40ac:	80c0b915 	stw	r3,740(r16)
    40b0:	8200ba15 	stw	r8,744(r16)
    40b4:	84400e15 	stw	r17,56(r16)
    40b8:	8000b815 	stw	zero,736(r16)
    40bc:	0003fec0 	call	3fec <std>
    40c0:	81000217 	ldw	r4,8(r16)
    40c4:	880d883a 	mov	r6,r17
    40c8:	800f883a 	mov	r7,r16
    40cc:	01400284 	movi	r5,10
    40d0:	0003fec0 	call	3fec <std>
    40d4:	81000317 	ldw	r4,12(r16)
    40d8:	800f883a 	mov	r7,r16
    40dc:	01400484 	movi	r5,18
    40e0:	01800084 	movi	r6,2
    40e4:	dfc00217 	ldw	ra,8(sp)
    40e8:	dc400117 	ldw	r17,4(sp)
    40ec:	dc000017 	ldw	r16,0(sp)
    40f0:	dec00304 	addi	sp,sp,12
    40f4:	0003fec1 	jmpi	3fec <std>

000040f8 <__fp_lock>:
    40f8:	0005883a 	mov	r2,zero
    40fc:	f800283a 	ret

00004100 <__fp_unlock>:
    4100:	0005883a 	mov	r2,zero
    4104:	f800283a 	ret

00004108 <__fp_unlock_all>:
    4108:	00800074 	movhi	r2,1
    410c:	10b82b04 	addi	r2,r2,-8020
    4110:	11000017 	ldw	r4,0(r2)
    4114:	01400034 	movhi	r5,0
    4118:	29504004 	addi	r5,r5,16640
    411c:	0004c501 	jmpi	4c50 <_fwalk>

00004120 <__fp_lock_all>:
    4120:	00800074 	movhi	r2,1
    4124:	10b82b04 	addi	r2,r2,-8020
    4128:	11000017 	ldw	r4,0(r2)
    412c:	01400034 	movhi	r5,0
    4130:	29503e04 	addi	r5,r5,16632
    4134:	0004c501 	jmpi	4c50 <_fwalk>

00004138 <_cleanup_r>:
    4138:	01400034 	movhi	r5,0
    413c:	295d2004 	addi	r5,r5,29824
    4140:	0004c501 	jmpi	4c50 <_fwalk>

00004144 <_cleanup>:
    4144:	00800074 	movhi	r2,1
    4148:	10b82c04 	addi	r2,r2,-8016
    414c:	11000017 	ldw	r4,0(r2)
    4150:	00041381 	jmpi	4138 <_cleanup_r>

00004154 <__sfmoreglue>:
    4154:	defffc04 	addi	sp,sp,-16
    4158:	dc400115 	stw	r17,4(sp)
    415c:	2c401724 	muli	r17,r5,92
    4160:	dc800215 	stw	r18,8(sp)
    4164:	2825883a 	mov	r18,r5
    4168:	89400304 	addi	r5,r17,12
    416c:	dc000015 	stw	r16,0(sp)
    4170:	dfc00315 	stw	ra,12(sp)
    4174:	0004f600 	call	4f60 <_malloc_r>
    4178:	0021883a 	mov	r16,zero
    417c:	880d883a 	mov	r6,r17
    4180:	000b883a 	mov	r5,zero
    4184:	10000626 	beq	r2,zero,41a0 <__sfmoreglue+0x4c>
    4188:	11000304 	addi	r4,r2,12
    418c:	14800115 	stw	r18,4(r2)
    4190:	10000015 	stw	zero,0(r2)
    4194:	11000215 	stw	r4,8(r2)
    4198:	1021883a 	mov	r16,r2
    419c:	00003540 	call	354 <memset>
    41a0:	8005883a 	mov	r2,r16
    41a4:	dfc00317 	ldw	ra,12(sp)
    41a8:	dc800217 	ldw	r18,8(sp)
    41ac:	dc400117 	ldw	r17,4(sp)
    41b0:	dc000017 	ldw	r16,0(sp)
    41b4:	dec00404 	addi	sp,sp,16
    41b8:	f800283a 	ret

000041bc <__sfp>:
    41bc:	defffd04 	addi	sp,sp,-12
    41c0:	00800074 	movhi	r2,1
    41c4:	10b82c04 	addi	r2,r2,-8016
    41c8:	dc000015 	stw	r16,0(sp)
    41cc:	14000017 	ldw	r16,0(r2)
    41d0:	dc400115 	stw	r17,4(sp)
    41d4:	dfc00215 	stw	ra,8(sp)
    41d8:	80800e17 	ldw	r2,56(r16)
    41dc:	2023883a 	mov	r17,r4
    41e0:	10002626 	beq	r2,zero,427c <__sfp+0xc0>
    41e4:	8400b804 	addi	r16,r16,736
    41e8:	80800117 	ldw	r2,4(r16)
    41ec:	81000217 	ldw	r4,8(r16)
    41f0:	10ffffc4 	addi	r3,r2,-1
    41f4:	18000916 	blt	r3,zero,421c <__sfp+0x60>
    41f8:	2080030f 	ldh	r2,12(r4)
    41fc:	10000b26 	beq	r2,zero,422c <__sfp+0x70>
    4200:	017fffc4 	movi	r5,-1
    4204:	00000206 	br	4210 <__sfp+0x54>
    4208:	2080030f 	ldh	r2,12(r4)
    420c:	10000726 	beq	r2,zero,422c <__sfp+0x70>
    4210:	18ffffc4 	addi	r3,r3,-1
    4214:	21001704 	addi	r4,r4,92
    4218:	197ffb1e 	bne	r3,r5,4208 <__sfp+0x4c>
    421c:	80800017 	ldw	r2,0(r16)
    4220:	10001926 	beq	r2,zero,4288 <__sfp+0xcc>
    4224:	1021883a 	mov	r16,r2
    4228:	003fef06 	br	41e8 <__sfp+0x2c>
    422c:	00bfffc4 	movi	r2,-1
    4230:	00c00044 	movi	r3,1
    4234:	2080038d 	sth	r2,14(r4)
    4238:	20c0030d 	sth	r3,12(r4)
    423c:	20000015 	stw	zero,0(r4)
    4240:	20000215 	stw	zero,8(r4)
    4244:	20000115 	stw	zero,4(r4)
    4248:	20000415 	stw	zero,16(r4)
    424c:	20000515 	stw	zero,20(r4)
    4250:	20000615 	stw	zero,24(r4)
    4254:	20000c15 	stw	zero,48(r4)
    4258:	20000d15 	stw	zero,52(r4)
    425c:	20001115 	stw	zero,68(r4)
    4260:	20001215 	stw	zero,72(r4)
    4264:	2005883a 	mov	r2,r4
    4268:	dfc00217 	ldw	ra,8(sp)
    426c:	dc400117 	ldw	r17,4(sp)
    4270:	dc000017 	ldw	r16,0(sp)
    4274:	dec00304 	addi	sp,sp,12
    4278:	f800283a 	ret
    427c:	8009883a 	mov	r4,r16
    4280:	00040540 	call	4054 <__sinit>
    4284:	003fd706 	br	41e4 <__sfp+0x28>
    4288:	8809883a 	mov	r4,r17
    428c:	01400104 	movi	r5,4
    4290:	00041540 	call	4154 <__sfmoreglue>
    4294:	80800015 	stw	r2,0(r16)
    4298:	103fe21e 	bne	r2,zero,4224 <__sfp+0x68>
    429c:	00800304 	movi	r2,12
    42a0:	0009883a 	mov	r4,zero
    42a4:	88800015 	stw	r2,0(r17)
    42a8:	003fee06 	br	4264 <__sfp+0xa8>

000042ac <_malloc_trim_r>:
    42ac:	defffb04 	addi	sp,sp,-20
    42b0:	dcc00315 	stw	r19,12(sp)
    42b4:	04c00074 	movhi	r19,1
    42b8:	9cf65c04 	addi	r19,r19,-9872
    42bc:	dc800215 	stw	r18,8(sp)
    42c0:	dc400115 	stw	r17,4(sp)
    42c4:	dc000015 	stw	r16,0(sp)
    42c8:	2823883a 	mov	r17,r5
    42cc:	2025883a 	mov	r18,r4
    42d0:	dfc00415 	stw	ra,16(sp)
    42d4:	000a1000 	call	a100 <__malloc_lock>
    42d8:	98800217 	ldw	r2,8(r19)
    42dc:	9009883a 	mov	r4,r18
    42e0:	000b883a 	mov	r5,zero
    42e4:	10c00117 	ldw	r3,4(r2)
    42e8:	00bfff04 	movi	r2,-4
    42ec:	18a0703a 	and	r16,r3,r2
    42f0:	8463c83a 	sub	r17,r16,r17
    42f4:	8c43fbc4 	addi	r17,r17,4079
    42f8:	8822d33a 	srli	r17,r17,12
    42fc:	0083ffc4 	movi	r2,4095
    4300:	8c7fffc4 	addi	r17,r17,-1
    4304:	8822933a 	slli	r17,r17,12
    4308:	1440060e 	bge	r2,r17,4324 <_malloc_trim_r+0x78>
    430c:	0006f5c0 	call	6f5c <_sbrk_r>
    4310:	98c00217 	ldw	r3,8(r19)
    4314:	9009883a 	mov	r4,r18
    4318:	044bc83a 	sub	r5,zero,r17
    431c:	80c7883a 	add	r3,r16,r3
    4320:	10c00926 	beq	r2,r3,4348 <_malloc_trim_r+0x9c>
    4324:	000a1200 	call	a120 <__malloc_unlock>
    4328:	0005883a 	mov	r2,zero
    432c:	dfc00417 	ldw	ra,16(sp)
    4330:	dcc00317 	ldw	r19,12(sp)
    4334:	dc800217 	ldw	r18,8(sp)
    4338:	dc400117 	ldw	r17,4(sp)
    433c:	dc000017 	ldw	r16,0(sp)
    4340:	dec00504 	addi	sp,sp,20
    4344:	f800283a 	ret
    4348:	9009883a 	mov	r4,r18
    434c:	0006f5c0 	call	6f5c <_sbrk_r>
    4350:	844dc83a 	sub	r6,r16,r17
    4354:	00ffffc4 	movi	r3,-1
    4358:	9009883a 	mov	r4,r18
    435c:	000b883a 	mov	r5,zero
    4360:	01c00074 	movhi	r7,1
    4364:	39f84604 	addi	r7,r7,-7912
    4368:	31800054 	ori	r6,r6,1
    436c:	10c00926 	beq	r2,r3,4394 <_malloc_trim_r+0xe8>
    4370:	38800017 	ldw	r2,0(r7)
    4374:	98c00217 	ldw	r3,8(r19)
    4378:	9009883a 	mov	r4,r18
    437c:	1445c83a 	sub	r2,r2,r17
    4380:	38800015 	stw	r2,0(r7)
    4384:	19800115 	stw	r6,4(r3)
    4388:	000a1200 	call	a120 <__malloc_unlock>
    438c:	00800044 	movi	r2,1
    4390:	003fe606 	br	432c <_malloc_trim_r+0x80>
    4394:	0006f5c0 	call	6f5c <_sbrk_r>
    4398:	99800217 	ldw	r6,8(r19)
    439c:	100f883a 	mov	r7,r2
    43a0:	9009883a 	mov	r4,r18
    43a4:	1187c83a 	sub	r3,r2,r6
    43a8:	008003c4 	movi	r2,15
    43ac:	19400054 	ori	r5,r3,1
    43b0:	10ffdc0e 	bge	r2,r3,4324 <_malloc_trim_r+0x78>
    43b4:	00800074 	movhi	r2,1
    43b8:	10b83004 	addi	r2,r2,-8000
    43bc:	10c00017 	ldw	r3,0(r2)
    43c0:	00800074 	movhi	r2,1
    43c4:	10b84604 	addi	r2,r2,-7912
    43c8:	31400115 	stw	r5,4(r6)
    43cc:	38c7c83a 	sub	r3,r7,r3
    43d0:	10c00015 	stw	r3,0(r2)
    43d4:	003fd306 	br	4324 <_malloc_trim_r+0x78>

000043d8 <_free_r>:
    43d8:	defffd04 	addi	sp,sp,-12
    43dc:	dc400115 	stw	r17,4(sp)
    43e0:	dc000015 	stw	r16,0(sp)
    43e4:	dfc00215 	stw	ra,8(sp)
    43e8:	2821883a 	mov	r16,r5
    43ec:	2023883a 	mov	r17,r4
    43f0:	28005a26 	beq	r5,zero,455c <_free_r+0x184>
    43f4:	000a1000 	call	a100 <__malloc_lock>
    43f8:	823ffe04 	addi	r8,r16,-8
    43fc:	41400117 	ldw	r5,4(r8)
    4400:	00bfff84 	movi	r2,-2
    4404:	02800074 	movhi	r10,1
    4408:	52b65c04 	addi	r10,r10,-9872
    440c:	288e703a 	and	r7,r5,r2
    4410:	41cd883a 	add	r6,r8,r7
    4414:	30c00117 	ldw	r3,4(r6)
    4418:	51000217 	ldw	r4,8(r10)
    441c:	00bfff04 	movi	r2,-4
    4420:	1892703a 	and	r9,r3,r2
    4424:	5017883a 	mov	r11,r10
    4428:	31006726 	beq	r6,r4,45c8 <_free_r+0x1f0>
    442c:	2880004c 	andi	r2,r5,1
    4430:	1005003a 	cmpeq	r2,r2,zero
    4434:	32400115 	stw	r9,4(r6)
    4438:	10001a1e 	bne	r2,zero,44a4 <_free_r+0xcc>
    443c:	000b883a 	mov	r5,zero
    4440:	3247883a 	add	r3,r6,r9
    4444:	18800117 	ldw	r2,4(r3)
    4448:	1080004c 	andi	r2,r2,1
    444c:	1000231e 	bne	r2,zero,44dc <_free_r+0x104>
    4450:	280ac03a 	cmpne	r5,r5,zero
    4454:	3a4f883a 	add	r7,r7,r9
    4458:	2800451e 	bne	r5,zero,4570 <_free_r+0x198>
    445c:	31000217 	ldw	r4,8(r6)
    4460:	00800074 	movhi	r2,1
    4464:	10b65e04 	addi	r2,r2,-9864
    4468:	20807b26 	beq	r4,r2,4658 <_free_r+0x280>
    446c:	30800317 	ldw	r2,12(r6)
    4470:	3a07883a 	add	r3,r7,r8
    4474:	19c00015 	stw	r7,0(r3)
    4478:	11000215 	stw	r4,8(r2)
    447c:	20800315 	stw	r2,12(r4)
    4480:	38800054 	ori	r2,r7,1
    4484:	40800115 	stw	r2,4(r8)
    4488:	28001a26 	beq	r5,zero,44f4 <_free_r+0x11c>
    448c:	8809883a 	mov	r4,r17
    4490:	dfc00217 	ldw	ra,8(sp)
    4494:	dc400117 	ldw	r17,4(sp)
    4498:	dc000017 	ldw	r16,0(sp)
    449c:	dec00304 	addi	sp,sp,12
    44a0:	000a1201 	jmpi	a120 <__malloc_unlock>
    44a4:	80bffe17 	ldw	r2,-8(r16)
    44a8:	50c00204 	addi	r3,r10,8
    44ac:	4091c83a 	sub	r8,r8,r2
    44b0:	41000217 	ldw	r4,8(r8)
    44b4:	388f883a 	add	r7,r7,r2
    44b8:	20c06126 	beq	r4,r3,4640 <_free_r+0x268>
    44bc:	40800317 	ldw	r2,12(r8)
    44c0:	3247883a 	add	r3,r6,r9
    44c4:	000b883a 	mov	r5,zero
    44c8:	11000215 	stw	r4,8(r2)
    44cc:	20800315 	stw	r2,12(r4)
    44d0:	18800117 	ldw	r2,4(r3)
    44d4:	1080004c 	andi	r2,r2,1
    44d8:	103fdd26 	beq	r2,zero,4450 <_free_r+0x78>
    44dc:	38800054 	ori	r2,r7,1
    44e0:	3a07883a 	add	r3,r7,r8
    44e4:	280ac03a 	cmpne	r5,r5,zero
    44e8:	40800115 	stw	r2,4(r8)
    44ec:	19c00015 	stw	r7,0(r3)
    44f0:	283fe61e 	bne	r5,zero,448c <_free_r+0xb4>
    44f4:	00807fc4 	movi	r2,511
    44f8:	11c01f2e 	bgeu	r2,r7,4578 <_free_r+0x1a0>
    44fc:	3806d27a 	srli	r3,r7,9
    4500:	1800481e 	bne	r3,zero,4624 <_free_r+0x24c>
    4504:	3804d0fa 	srli	r2,r7,3
    4508:	100690fa 	slli	r3,r2,3
    450c:	1acd883a 	add	r6,r3,r11
    4510:	31400217 	ldw	r5,8(r6)
    4514:	31405926 	beq	r6,r5,467c <_free_r+0x2a4>
    4518:	28800117 	ldw	r2,4(r5)
    451c:	00ffff04 	movi	r3,-4
    4520:	10c4703a 	and	r2,r2,r3
    4524:	3880022e 	bgeu	r7,r2,4530 <_free_r+0x158>
    4528:	29400217 	ldw	r5,8(r5)
    452c:	317ffa1e 	bne	r6,r5,4518 <_free_r+0x140>
    4530:	29800317 	ldw	r6,12(r5)
    4534:	41800315 	stw	r6,12(r8)
    4538:	41400215 	stw	r5,8(r8)
    453c:	8809883a 	mov	r4,r17
    4540:	2a000315 	stw	r8,12(r5)
    4544:	32000215 	stw	r8,8(r6)
    4548:	dfc00217 	ldw	ra,8(sp)
    454c:	dc400117 	ldw	r17,4(sp)
    4550:	dc000017 	ldw	r16,0(sp)
    4554:	dec00304 	addi	sp,sp,12
    4558:	000a1201 	jmpi	a120 <__malloc_unlock>
    455c:	dfc00217 	ldw	ra,8(sp)
    4560:	dc400117 	ldw	r17,4(sp)
    4564:	dc000017 	ldw	r16,0(sp)
    4568:	dec00304 	addi	sp,sp,12
    456c:	f800283a 	ret
    4570:	31000217 	ldw	r4,8(r6)
    4574:	003fbd06 	br	446c <_free_r+0x94>
    4578:	3806d0fa 	srli	r3,r7,3
    457c:	00800044 	movi	r2,1
    4580:	51400117 	ldw	r5,4(r10)
    4584:	180890fa 	slli	r4,r3,3
    4588:	1807d0ba 	srai	r3,r3,2
    458c:	22c9883a 	add	r4,r4,r11
    4590:	21800217 	ldw	r6,8(r4)
    4594:	10c4983a 	sll	r2,r2,r3
    4598:	41000315 	stw	r4,12(r8)
    459c:	41800215 	stw	r6,8(r8)
    45a0:	288ab03a 	or	r5,r5,r2
    45a4:	22000215 	stw	r8,8(r4)
    45a8:	8809883a 	mov	r4,r17
    45ac:	51400115 	stw	r5,4(r10)
    45b0:	32000315 	stw	r8,12(r6)
    45b4:	dfc00217 	ldw	ra,8(sp)
    45b8:	dc400117 	ldw	r17,4(sp)
    45bc:	dc000017 	ldw	r16,0(sp)
    45c0:	dec00304 	addi	sp,sp,12
    45c4:	000a1201 	jmpi	a120 <__malloc_unlock>
    45c8:	2880004c 	andi	r2,r5,1
    45cc:	3a4d883a 	add	r6,r7,r9
    45d0:	1000071e 	bne	r2,zero,45f0 <_free_r+0x218>
    45d4:	80bffe17 	ldw	r2,-8(r16)
    45d8:	4091c83a 	sub	r8,r8,r2
    45dc:	41000317 	ldw	r4,12(r8)
    45e0:	40c00217 	ldw	r3,8(r8)
    45e4:	308d883a 	add	r6,r6,r2
    45e8:	20c00215 	stw	r3,8(r4)
    45ec:	19000315 	stw	r4,12(r3)
    45f0:	00800074 	movhi	r2,1
    45f4:	10b82f04 	addi	r2,r2,-8004
    45f8:	11000017 	ldw	r4,0(r2)
    45fc:	30c00054 	ori	r3,r6,1
    4600:	52000215 	stw	r8,8(r10)
    4604:	40c00115 	stw	r3,4(r8)
    4608:	313fa036 	bltu	r6,r4,448c <_free_r+0xb4>
    460c:	00800074 	movhi	r2,1
    4610:	10b83e04 	addi	r2,r2,-7944
    4614:	11400017 	ldw	r5,0(r2)
    4618:	8809883a 	mov	r4,r17
    461c:	00042ac0 	call	42ac <_malloc_trim_r>
    4620:	003f9a06 	br	448c <_free_r+0xb4>
    4624:	00800104 	movi	r2,4
    4628:	10c0072e 	bgeu	r2,r3,4648 <_free_r+0x270>
    462c:	00800504 	movi	r2,20
    4630:	10c01936 	bltu	r2,r3,4698 <_free_r+0x2c0>
    4634:	188016c4 	addi	r2,r3,91
    4638:	100690fa 	slli	r3,r2,3
    463c:	003fb306 	br	450c <_free_r+0x134>
    4640:	01400044 	movi	r5,1
    4644:	003f7e06 	br	4440 <_free_r+0x68>
    4648:	3804d1ba 	srli	r2,r7,6
    464c:	10800e04 	addi	r2,r2,56
    4650:	100690fa 	slli	r3,r2,3
    4654:	003fad06 	br	450c <_free_r+0x134>
    4658:	22000315 	stw	r8,12(r4)
    465c:	22000215 	stw	r8,8(r4)
    4660:	3a05883a 	add	r2,r7,r8
    4664:	38c00054 	ori	r3,r7,1
    4668:	11c00015 	stw	r7,0(r2)
    466c:	41000215 	stw	r4,8(r8)
    4670:	40c00115 	stw	r3,4(r8)
    4674:	41000315 	stw	r4,12(r8)
    4678:	003f8406 	br	448c <_free_r+0xb4>
    467c:	1005d0ba 	srai	r2,r2,2
    4680:	00c00044 	movi	r3,1
    4684:	51000117 	ldw	r4,4(r10)
    4688:	1886983a 	sll	r3,r3,r2
    468c:	20c8b03a 	or	r4,r4,r3
    4690:	51000115 	stw	r4,4(r10)
    4694:	003fa706 	br	4534 <_free_r+0x15c>
    4698:	00801504 	movi	r2,84
    469c:	10c00436 	bltu	r2,r3,46b0 <_free_r+0x2d8>
    46a0:	3804d33a 	srli	r2,r7,12
    46a4:	10801b84 	addi	r2,r2,110
    46a8:	100690fa 	slli	r3,r2,3
    46ac:	003f9706 	br	450c <_free_r+0x134>
    46b0:	00805504 	movi	r2,340
    46b4:	10c00436 	bltu	r2,r3,46c8 <_free_r+0x2f0>
    46b8:	3804d3fa 	srli	r2,r7,15
    46bc:	10801dc4 	addi	r2,r2,119
    46c0:	100690fa 	slli	r3,r2,3
    46c4:	003f9106 	br	450c <_free_r+0x134>
    46c8:	00815504 	movi	r2,1364
    46cc:	10c0032e 	bgeu	r2,r3,46dc <_free_r+0x304>
    46d0:	00801f84 	movi	r2,126
    46d4:	00c0fc04 	movi	r3,1008
    46d8:	003f8c06 	br	450c <_free_r+0x134>
    46dc:	3804d4ba 	srli	r2,r7,18
    46e0:	10801f04 	addi	r2,r2,124
    46e4:	100690fa 	slli	r3,r2,3
    46e8:	003f8806 	br	450c <_free_r+0x134>

000046ec <__sfvwrite_r>:
    46ec:	30800217 	ldw	r2,8(r6)
    46f0:	defff504 	addi	sp,sp,-44
    46f4:	df000915 	stw	fp,36(sp)
    46f8:	dd800715 	stw	r22,28(sp)
    46fc:	dc800315 	stw	r18,12(sp)
    4700:	dfc00a15 	stw	ra,40(sp)
    4704:	ddc00815 	stw	r23,32(sp)
    4708:	dd400615 	stw	r21,24(sp)
    470c:	dd000515 	stw	r20,20(sp)
    4710:	dcc00415 	stw	r19,16(sp)
    4714:	dc400215 	stw	r17,8(sp)
    4718:	dc000115 	stw	r16,4(sp)
    471c:	302d883a 	mov	r22,r6
    4720:	2039883a 	mov	fp,r4
    4724:	2825883a 	mov	r18,r5
    4728:	10001c26 	beq	r2,zero,479c <__sfvwrite_r+0xb0>
    472c:	29c0030b 	ldhu	r7,12(r5)
    4730:	3880020c 	andi	r2,r7,8
    4734:	10002726 	beq	r2,zero,47d4 <__sfvwrite_r+0xe8>
    4738:	28800417 	ldw	r2,16(r5)
    473c:	10002526 	beq	r2,zero,47d4 <__sfvwrite_r+0xe8>
    4740:	3880008c 	andi	r2,r7,2
    4744:	b5400017 	ldw	r21,0(r22)
    4748:	10002826 	beq	r2,zero,47ec <__sfvwrite_r+0x100>
    474c:	0021883a 	mov	r16,zero
    4750:	0023883a 	mov	r17,zero
    4754:	880d883a 	mov	r6,r17
    4758:	e009883a 	mov	r4,fp
    475c:	00810004 	movi	r2,1024
    4760:	80006e26 	beq	r16,zero,491c <__sfvwrite_r+0x230>
    4764:	800f883a 	mov	r7,r16
    4768:	91400717 	ldw	r5,28(r18)
    476c:	1400012e 	bgeu	r2,r16,4774 <__sfvwrite_r+0x88>
    4770:	100f883a 	mov	r7,r2
    4774:	90c00917 	ldw	r3,36(r18)
    4778:	183ee83a 	callr	r3
    477c:	1007883a 	mov	r3,r2
    4780:	80a1c83a 	sub	r16,r16,r2
    4784:	88a3883a 	add	r17,r17,r2
    4788:	00806d0e 	bge	zero,r2,4940 <__sfvwrite_r+0x254>
    478c:	b0800217 	ldw	r2,8(r22)
    4790:	10c5c83a 	sub	r2,r2,r3
    4794:	b0800215 	stw	r2,8(r22)
    4798:	103fee1e 	bne	r2,zero,4754 <__sfvwrite_r+0x68>
    479c:	0009883a 	mov	r4,zero
    47a0:	2005883a 	mov	r2,r4
    47a4:	dfc00a17 	ldw	ra,40(sp)
    47a8:	df000917 	ldw	fp,36(sp)
    47ac:	ddc00817 	ldw	r23,32(sp)
    47b0:	dd800717 	ldw	r22,28(sp)
    47b4:	dd400617 	ldw	r21,24(sp)
    47b8:	dd000517 	ldw	r20,20(sp)
    47bc:	dcc00417 	ldw	r19,16(sp)
    47c0:	dc800317 	ldw	r18,12(sp)
    47c4:	dc400217 	ldw	r17,8(sp)
    47c8:	dc000117 	ldw	r16,4(sp)
    47cc:	dec00b04 	addi	sp,sp,44
    47d0:	f800283a 	ret
    47d4:	00024b40 	call	24b4 <__swsetup_r>
    47d8:	1000e41e 	bne	r2,zero,4b6c <__sfvwrite_r+0x480>
    47dc:	91c0030b 	ldhu	r7,12(r18)
    47e0:	b5400017 	ldw	r21,0(r22)
    47e4:	3880008c 	andi	r2,r7,2
    47e8:	103fd81e 	bne	r2,zero,474c <__sfvwrite_r+0x60>
    47ec:	3880004c 	andi	r2,r7,1
    47f0:	1005003a 	cmpeq	r2,r2,zero
    47f4:	10005726 	beq	r2,zero,4954 <__sfvwrite_r+0x268>
    47f8:	0029883a 	mov	r20,zero
    47fc:	002f883a 	mov	r23,zero
    4800:	a0004226 	beq	r20,zero,490c <__sfvwrite_r+0x220>
    4804:	3880800c 	andi	r2,r7,512
    4808:	94000217 	ldw	r16,8(r18)
    480c:	10008b26 	beq	r2,zero,4a3c <__sfvwrite_r+0x350>
    4810:	800d883a 	mov	r6,r16
    4814:	a400a536 	bltu	r20,r16,4aac <__sfvwrite_r+0x3c0>
    4818:	3881200c 	andi	r2,r7,1152
    481c:	10002726 	beq	r2,zero,48bc <__sfvwrite_r+0x1d0>
    4820:	90800517 	ldw	r2,20(r18)
    4824:	92000417 	ldw	r8,16(r18)
    4828:	91400017 	ldw	r5,0(r18)
    482c:	1087883a 	add	r3,r2,r2
    4830:	1887883a 	add	r3,r3,r2
    4834:	1808d7fa 	srli	r4,r3,31
    4838:	2a21c83a 	sub	r16,r5,r8
    483c:	80800044 	addi	r2,r16,1
    4840:	20c9883a 	add	r4,r4,r3
    4844:	2027d07a 	srai	r19,r4,1
    4848:	a085883a 	add	r2,r20,r2
    484c:	980d883a 	mov	r6,r19
    4850:	9880022e 	bgeu	r19,r2,485c <__sfvwrite_r+0x170>
    4854:	1027883a 	mov	r19,r2
    4858:	100d883a 	mov	r6,r2
    485c:	3881000c 	andi	r2,r7,1024
    4860:	1000b826 	beq	r2,zero,4b44 <__sfvwrite_r+0x458>
    4864:	300b883a 	mov	r5,r6
    4868:	e009883a 	mov	r4,fp
    486c:	0004f600 	call	4f60 <_malloc_r>
    4870:	10003126 	beq	r2,zero,4938 <__sfvwrite_r+0x24c>
    4874:	91400417 	ldw	r5,16(r18)
    4878:	1009883a 	mov	r4,r2
    487c:	800d883a 	mov	r6,r16
    4880:	1023883a 	mov	r17,r2
    4884:	00057840 	call	5784 <memcpy>
    4888:	90c0030b 	ldhu	r3,12(r18)
    488c:	00beffc4 	movi	r2,-1025
    4890:	1886703a 	and	r3,r3,r2
    4894:	18c02014 	ori	r3,r3,128
    4898:	90c0030d 	sth	r3,12(r18)
    489c:	9c07c83a 	sub	r3,r19,r16
    48a0:	8c05883a 	add	r2,r17,r16
    48a4:	a00d883a 	mov	r6,r20
    48a8:	a021883a 	mov	r16,r20
    48ac:	90800015 	stw	r2,0(r18)
    48b0:	90c00215 	stw	r3,8(r18)
    48b4:	94400415 	stw	r17,16(r18)
    48b8:	94c00515 	stw	r19,20(r18)
    48bc:	91000017 	ldw	r4,0(r18)
    48c0:	b80b883a 	mov	r5,r23
    48c4:	a023883a 	mov	r17,r20
    48c8:	00058240 	call	5824 <memmove>
    48cc:	90c00217 	ldw	r3,8(r18)
    48d0:	90800017 	ldw	r2,0(r18)
    48d4:	a027883a 	mov	r19,r20
    48d8:	1c07c83a 	sub	r3,r3,r16
    48dc:	1405883a 	add	r2,r2,r16
    48e0:	90c00215 	stw	r3,8(r18)
    48e4:	a021883a 	mov	r16,r20
    48e8:	90800015 	stw	r2,0(r18)
    48ec:	b0800217 	ldw	r2,8(r22)
    48f0:	1405c83a 	sub	r2,r2,r16
    48f4:	b0800215 	stw	r2,8(r22)
    48f8:	103fa826 	beq	r2,zero,479c <__sfvwrite_r+0xb0>
    48fc:	a469c83a 	sub	r20,r20,r17
    4900:	91c0030b 	ldhu	r7,12(r18)
    4904:	bcef883a 	add	r23,r23,r19
    4908:	a03fbe1e 	bne	r20,zero,4804 <__sfvwrite_r+0x118>
    490c:	adc00017 	ldw	r23,0(r21)
    4910:	ad000117 	ldw	r20,4(r21)
    4914:	ad400204 	addi	r21,r21,8
    4918:	003fb906 	br	4800 <__sfvwrite_r+0x114>
    491c:	ac400017 	ldw	r17,0(r21)
    4920:	ac000117 	ldw	r16,4(r21)
    4924:	ad400204 	addi	r21,r21,8
    4928:	003f8a06 	br	4754 <__sfvwrite_r+0x68>
    492c:	91400417 	ldw	r5,16(r18)
    4930:	e009883a 	mov	r4,fp
    4934:	00043d80 	call	43d8 <_free_r>
    4938:	00800304 	movi	r2,12
    493c:	e0800015 	stw	r2,0(fp)
    4940:	9080030b 	ldhu	r2,12(r18)
    4944:	013fffc4 	movi	r4,-1
    4948:	10801014 	ori	r2,r2,64
    494c:	9080030d 	sth	r2,12(r18)
    4950:	003f9306 	br	47a0 <__sfvwrite_r+0xb4>
    4954:	0027883a 	mov	r19,zero
    4958:	002f883a 	mov	r23,zero
    495c:	d8000015 	stw	zero,0(sp)
    4960:	0029883a 	mov	r20,zero
    4964:	98001e26 	beq	r19,zero,49e0 <__sfvwrite_r+0x2f4>
    4968:	d8c00017 	ldw	r3,0(sp)
    496c:	1804c03a 	cmpne	r2,r3,zero
    4970:	10005e26 	beq	r2,zero,4aec <__sfvwrite_r+0x400>
    4974:	9821883a 	mov	r16,r19
    4978:	a4c0012e 	bgeu	r20,r19,4980 <__sfvwrite_r+0x294>
    497c:	a021883a 	mov	r16,r20
    4980:	91000017 	ldw	r4,0(r18)
    4984:	90800417 	ldw	r2,16(r18)
    4988:	91800217 	ldw	r6,8(r18)
    498c:	91c00517 	ldw	r7,20(r18)
    4990:	1100022e 	bgeu	r2,r4,499c <__sfvwrite_r+0x2b0>
    4994:	31e3883a 	add	r17,r6,r7
    4998:	8c001616 	blt	r17,r16,49f4 <__sfvwrite_r+0x308>
    499c:	81c03816 	blt	r16,r7,4a80 <__sfvwrite_r+0x394>
    49a0:	90c00917 	ldw	r3,36(r18)
    49a4:	91400717 	ldw	r5,28(r18)
    49a8:	e009883a 	mov	r4,fp
    49ac:	b80d883a 	mov	r6,r23
    49b0:	183ee83a 	callr	r3
    49b4:	1023883a 	mov	r17,r2
    49b8:	00bfe10e 	bge	zero,r2,4940 <__sfvwrite_r+0x254>
    49bc:	a469c83a 	sub	r20,r20,r17
    49c0:	a0001826 	beq	r20,zero,4a24 <__sfvwrite_r+0x338>
    49c4:	b0800217 	ldw	r2,8(r22)
    49c8:	1445c83a 	sub	r2,r2,r17
    49cc:	b0800215 	stw	r2,8(r22)
    49d0:	103f7226 	beq	r2,zero,479c <__sfvwrite_r+0xb0>
    49d4:	9c67c83a 	sub	r19,r19,r17
    49d8:	bc6f883a 	add	r23,r23,r17
    49dc:	983fe21e 	bne	r19,zero,4968 <__sfvwrite_r+0x27c>
    49e0:	adc00017 	ldw	r23,0(r21)
    49e4:	acc00117 	ldw	r19,4(r21)
    49e8:	ad400204 	addi	r21,r21,8
    49ec:	d8000015 	stw	zero,0(sp)
    49f0:	003fdc06 	br	4964 <__sfvwrite_r+0x278>
    49f4:	b80b883a 	mov	r5,r23
    49f8:	880d883a 	mov	r6,r17
    49fc:	00058240 	call	5824 <memmove>
    4a00:	90c00017 	ldw	r3,0(r18)
    4a04:	e009883a 	mov	r4,fp
    4a08:	900b883a 	mov	r5,r18
    4a0c:	1c47883a 	add	r3,r3,r17
    4a10:	90c00015 	stw	r3,0(r18)
    4a14:	0003dbc0 	call	3dbc <_fflush_r>
    4a18:	103fc91e 	bne	r2,zero,4940 <__sfvwrite_r+0x254>
    4a1c:	a469c83a 	sub	r20,r20,r17
    4a20:	a03fe81e 	bne	r20,zero,49c4 <__sfvwrite_r+0x2d8>
    4a24:	e009883a 	mov	r4,fp
    4a28:	900b883a 	mov	r5,r18
    4a2c:	0003dbc0 	call	3dbc <_fflush_r>
    4a30:	103fc31e 	bne	r2,zero,4940 <__sfvwrite_r+0x254>
    4a34:	d8000015 	stw	zero,0(sp)
    4a38:	003fe206 	br	49c4 <__sfvwrite_r+0x2d8>
    4a3c:	91000017 	ldw	r4,0(r18)
    4a40:	90800417 	ldw	r2,16(r18)
    4a44:	1100022e 	bgeu	r2,r4,4a50 <__sfvwrite_r+0x364>
    4a48:	8023883a 	mov	r17,r16
    4a4c:	85003136 	bltu	r16,r20,4b14 <__sfvwrite_r+0x428>
    4a50:	91c00517 	ldw	r7,20(r18)
    4a54:	a1c01836 	bltu	r20,r7,4ab8 <__sfvwrite_r+0x3cc>
    4a58:	90c00917 	ldw	r3,36(r18)
    4a5c:	91400717 	ldw	r5,28(r18)
    4a60:	e009883a 	mov	r4,fp
    4a64:	b80d883a 	mov	r6,r23
    4a68:	183ee83a 	callr	r3
    4a6c:	1021883a 	mov	r16,r2
    4a70:	00bfb30e 	bge	zero,r2,4940 <__sfvwrite_r+0x254>
    4a74:	1023883a 	mov	r17,r2
    4a78:	1027883a 	mov	r19,r2
    4a7c:	003f9b06 	br	48ec <__sfvwrite_r+0x200>
    4a80:	b80b883a 	mov	r5,r23
    4a84:	800d883a 	mov	r6,r16
    4a88:	00058240 	call	5824 <memmove>
    4a8c:	90c00217 	ldw	r3,8(r18)
    4a90:	90800017 	ldw	r2,0(r18)
    4a94:	8023883a 	mov	r17,r16
    4a98:	1c07c83a 	sub	r3,r3,r16
    4a9c:	1405883a 	add	r2,r2,r16
    4aa0:	90c00215 	stw	r3,8(r18)
    4aa4:	90800015 	stw	r2,0(r18)
    4aa8:	003fc406 	br	49bc <__sfvwrite_r+0x2d0>
    4aac:	a00d883a 	mov	r6,r20
    4ab0:	a021883a 	mov	r16,r20
    4ab4:	003f8106 	br	48bc <__sfvwrite_r+0x1d0>
    4ab8:	b80b883a 	mov	r5,r23
    4abc:	a00d883a 	mov	r6,r20
    4ac0:	00058240 	call	5824 <memmove>
    4ac4:	90c00217 	ldw	r3,8(r18)
    4ac8:	90800017 	ldw	r2,0(r18)
    4acc:	a021883a 	mov	r16,r20
    4ad0:	1d07c83a 	sub	r3,r3,r20
    4ad4:	1505883a 	add	r2,r2,r20
    4ad8:	a023883a 	mov	r17,r20
    4adc:	a027883a 	mov	r19,r20
    4ae0:	90c00215 	stw	r3,8(r18)
    4ae4:	90800015 	stw	r2,0(r18)
    4ae8:	003f8006 	br	48ec <__sfvwrite_r+0x200>
    4aec:	b809883a 	mov	r4,r23
    4af0:	01400284 	movi	r5,10
    4af4:	980d883a 	mov	r6,r19
    4af8:	00056a00 	call	56a0 <memchr>
    4afc:	10001726 	beq	r2,zero,4b5c <__sfvwrite_r+0x470>
    4b00:	15c5c83a 	sub	r2,r2,r23
    4b04:	15000044 	addi	r20,r2,1
    4b08:	00800044 	movi	r2,1
    4b0c:	d8800015 	stw	r2,0(sp)
    4b10:	003f9806 	br	4974 <__sfvwrite_r+0x288>
    4b14:	b80b883a 	mov	r5,r23
    4b18:	800d883a 	mov	r6,r16
    4b1c:	00058240 	call	5824 <memmove>
    4b20:	90c00017 	ldw	r3,0(r18)
    4b24:	e009883a 	mov	r4,fp
    4b28:	900b883a 	mov	r5,r18
    4b2c:	1c07883a 	add	r3,r3,r16
    4b30:	90c00015 	stw	r3,0(r18)
    4b34:	8027883a 	mov	r19,r16
    4b38:	0003dbc0 	call	3dbc <_fflush_r>
    4b3c:	103f6b26 	beq	r2,zero,48ec <__sfvwrite_r+0x200>
    4b40:	003f7f06 	br	4940 <__sfvwrite_r+0x254>
    4b44:	400b883a 	mov	r5,r8
    4b48:	e009883a 	mov	r4,fp
    4b4c:	00068f80 	call	68f8 <_realloc_r>
    4b50:	103f7626 	beq	r2,zero,492c <__sfvwrite_r+0x240>
    4b54:	1023883a 	mov	r17,r2
    4b58:	003f5006 	br	489c <__sfvwrite_r+0x1b0>
    4b5c:	00c00044 	movi	r3,1
    4b60:	9d000044 	addi	r20,r19,1
    4b64:	d8c00015 	stw	r3,0(sp)
    4b68:	003f8206 	br	4974 <__sfvwrite_r+0x288>
    4b6c:	9080030b 	ldhu	r2,12(r18)
    4b70:	00c00244 	movi	r3,9
    4b74:	013fffc4 	movi	r4,-1
    4b78:	10801014 	ori	r2,r2,64
    4b7c:	9080030d 	sth	r2,12(r18)
    4b80:	e0c00015 	stw	r3,0(fp)
    4b84:	003f0606 	br	47a0 <__sfvwrite_r+0xb4>

00004b88 <_fwalk_reent>:
    4b88:	defff704 	addi	sp,sp,-36
    4b8c:	dcc00315 	stw	r19,12(sp)
    4b90:	24c0b804 	addi	r19,r4,736
    4b94:	dd800615 	stw	r22,24(sp)
    4b98:	dd400515 	stw	r21,20(sp)
    4b9c:	dfc00815 	stw	ra,32(sp)
    4ba0:	ddc00715 	stw	r23,28(sp)
    4ba4:	dd000415 	stw	r20,16(sp)
    4ba8:	dc800215 	stw	r18,8(sp)
    4bac:	dc400115 	stw	r17,4(sp)
    4bb0:	dc000015 	stw	r16,0(sp)
    4bb4:	202b883a 	mov	r21,r4
    4bb8:	282d883a 	mov	r22,r5
    4bbc:	00040440 	call	4044 <__sfp_lock_acquire>
    4bc0:	98002126 	beq	r19,zero,4c48 <_fwalk_reent+0xc0>
    4bc4:	002f883a 	mov	r23,zero
    4bc8:	9c800117 	ldw	r18,4(r19)
    4bcc:	9c000217 	ldw	r16,8(r19)
    4bd0:	90bfffc4 	addi	r2,r18,-1
    4bd4:	10000d16 	blt	r2,zero,4c0c <_fwalk_reent+0x84>
    4bd8:	0023883a 	mov	r17,zero
    4bdc:	053fffc4 	movi	r20,-1
    4be0:	8080030f 	ldh	r2,12(r16)
    4be4:	8c400044 	addi	r17,r17,1
    4be8:	10000626 	beq	r2,zero,4c04 <_fwalk_reent+0x7c>
    4bec:	8080038f 	ldh	r2,14(r16)
    4bf0:	800b883a 	mov	r5,r16
    4bf4:	a809883a 	mov	r4,r21
    4bf8:	15000226 	beq	r2,r20,4c04 <_fwalk_reent+0x7c>
    4bfc:	b03ee83a 	callr	r22
    4c00:	b8aeb03a 	or	r23,r23,r2
    4c04:	84001704 	addi	r16,r16,92
    4c08:	947ff51e 	bne	r18,r17,4be0 <_fwalk_reent+0x58>
    4c0c:	9cc00017 	ldw	r19,0(r19)
    4c10:	983fed1e 	bne	r19,zero,4bc8 <_fwalk_reent+0x40>
    4c14:	00040480 	call	4048 <__sfp_lock_release>
    4c18:	b805883a 	mov	r2,r23
    4c1c:	dfc00817 	ldw	ra,32(sp)
    4c20:	ddc00717 	ldw	r23,28(sp)
    4c24:	dd800617 	ldw	r22,24(sp)
    4c28:	dd400517 	ldw	r21,20(sp)
    4c2c:	dd000417 	ldw	r20,16(sp)
    4c30:	dcc00317 	ldw	r19,12(sp)
    4c34:	dc800217 	ldw	r18,8(sp)
    4c38:	dc400117 	ldw	r17,4(sp)
    4c3c:	dc000017 	ldw	r16,0(sp)
    4c40:	dec00904 	addi	sp,sp,36
    4c44:	f800283a 	ret
    4c48:	002f883a 	mov	r23,zero
    4c4c:	003ff106 	br	4c14 <_fwalk_reent+0x8c>

00004c50 <_fwalk>:
    4c50:	defff804 	addi	sp,sp,-32
    4c54:	dcc00315 	stw	r19,12(sp)
    4c58:	24c0b804 	addi	r19,r4,736
    4c5c:	dd400515 	stw	r21,20(sp)
    4c60:	dfc00715 	stw	ra,28(sp)
    4c64:	dd800615 	stw	r22,24(sp)
    4c68:	dd000415 	stw	r20,16(sp)
    4c6c:	dc800215 	stw	r18,8(sp)
    4c70:	dc400115 	stw	r17,4(sp)
    4c74:	dc000015 	stw	r16,0(sp)
    4c78:	282b883a 	mov	r21,r5
    4c7c:	00040440 	call	4044 <__sfp_lock_acquire>
    4c80:	98001f26 	beq	r19,zero,4d00 <_fwalk+0xb0>
    4c84:	002d883a 	mov	r22,zero
    4c88:	9c800117 	ldw	r18,4(r19)
    4c8c:	9c000217 	ldw	r16,8(r19)
    4c90:	90bfffc4 	addi	r2,r18,-1
    4c94:	10000c16 	blt	r2,zero,4cc8 <_fwalk+0x78>
    4c98:	0023883a 	mov	r17,zero
    4c9c:	053fffc4 	movi	r20,-1
    4ca0:	8080030f 	ldh	r2,12(r16)
    4ca4:	8c400044 	addi	r17,r17,1
    4ca8:	10000526 	beq	r2,zero,4cc0 <_fwalk+0x70>
    4cac:	8080038f 	ldh	r2,14(r16)
    4cb0:	8009883a 	mov	r4,r16
    4cb4:	15000226 	beq	r2,r20,4cc0 <_fwalk+0x70>
    4cb8:	a83ee83a 	callr	r21
    4cbc:	b0acb03a 	or	r22,r22,r2
    4cc0:	84001704 	addi	r16,r16,92
    4cc4:	947ff61e 	bne	r18,r17,4ca0 <_fwalk+0x50>
    4cc8:	9cc00017 	ldw	r19,0(r19)
    4ccc:	983fee1e 	bne	r19,zero,4c88 <_fwalk+0x38>
    4cd0:	00040480 	call	4048 <__sfp_lock_release>
    4cd4:	b005883a 	mov	r2,r22
    4cd8:	dfc00717 	ldw	ra,28(sp)
    4cdc:	dd800617 	ldw	r22,24(sp)
    4ce0:	dd400517 	ldw	r21,20(sp)
    4ce4:	dd000417 	ldw	r20,16(sp)
    4ce8:	dcc00317 	ldw	r19,12(sp)
    4cec:	dc800217 	ldw	r18,8(sp)
    4cf0:	dc400117 	ldw	r17,4(sp)
    4cf4:	dc000017 	ldw	r16,0(sp)
    4cf8:	dec00804 	addi	sp,sp,32
    4cfc:	f800283a 	ret
    4d00:	002d883a 	mov	r22,zero
    4d04:	003ff206 	br	4cd0 <_fwalk+0x80>

00004d08 <__locale_charset>:
    4d08:	d0a00317 	ldw	r2,-32756(gp)
    4d0c:	f800283a 	ret

00004d10 <_localeconv_r>:
    4d10:	00800074 	movhi	r2,1
    4d14:	10b4b304 	addi	r2,r2,-11572
    4d18:	f800283a 	ret

00004d1c <localeconv>:
    4d1c:	00800074 	movhi	r2,1
    4d20:	10b82b04 	addi	r2,r2,-8020
    4d24:	11000017 	ldw	r4,0(r2)
    4d28:	0004d101 	jmpi	4d10 <_localeconv_r>

00004d2c <_setlocale_r>:
    4d2c:	defffc04 	addi	sp,sp,-16
    4d30:	00c00074 	movhi	r3,1
    4d34:	18f4ae04 	addi	r3,r3,-11592
    4d38:	dc800215 	stw	r18,8(sp)
    4d3c:	dc400115 	stw	r17,4(sp)
    4d40:	dc000015 	stw	r16,0(sp)
    4d44:	2023883a 	mov	r17,r4
    4d48:	2825883a 	mov	r18,r5
    4d4c:	dfc00315 	stw	ra,12(sp)
    4d50:	3021883a 	mov	r16,r6
    4d54:	3009883a 	mov	r4,r6
    4d58:	180b883a 	mov	r5,r3
    4d5c:	30000926 	beq	r6,zero,4d84 <_setlocale_r+0x58>
    4d60:	00071180 	call	7118 <strcmp>
    4d64:	8009883a 	mov	r4,r16
    4d68:	01400074 	movhi	r5,1
    4d6c:	29749904 	addi	r5,r5,-11676
    4d70:	10000b1e 	bne	r2,zero,4da0 <_setlocale_r+0x74>
    4d74:	8c000d15 	stw	r16,52(r17)
    4d78:	8c800c15 	stw	r18,48(r17)
    4d7c:	00c00074 	movhi	r3,1
    4d80:	18f4ae04 	addi	r3,r3,-11592
    4d84:	1805883a 	mov	r2,r3
    4d88:	dfc00317 	ldw	ra,12(sp)
    4d8c:	dc800217 	ldw	r18,8(sp)
    4d90:	dc400117 	ldw	r17,4(sp)
    4d94:	dc000017 	ldw	r16,0(sp)
    4d98:	dec00404 	addi	sp,sp,16
    4d9c:	f800283a 	ret
    4da0:	00071180 	call	7118 <strcmp>
    4da4:	0007883a 	mov	r3,zero
    4da8:	103ff226 	beq	r2,zero,4d74 <_setlocale_r+0x48>
    4dac:	003ff506 	br	4d84 <_setlocale_r+0x58>

00004db0 <setlocale>:
    4db0:	01800074 	movhi	r6,1
    4db4:	31b82b04 	addi	r6,r6,-8020
    4db8:	2007883a 	mov	r3,r4
    4dbc:	31000017 	ldw	r4,0(r6)
    4dc0:	280d883a 	mov	r6,r5
    4dc4:	180b883a 	mov	r5,r3
    4dc8:	0004d2c1 	jmpi	4d2c <_setlocale_r>

00004dcc <__smakebuf_r>:
    4dcc:	2880030b 	ldhu	r2,12(r5)
    4dd0:	deffed04 	addi	sp,sp,-76
    4dd4:	dc401015 	stw	r17,64(sp)
    4dd8:	1080008c 	andi	r2,r2,2
    4ddc:	dc000f15 	stw	r16,60(sp)
    4de0:	dfc01215 	stw	ra,72(sp)
    4de4:	dc801115 	stw	r18,68(sp)
    4de8:	2821883a 	mov	r16,r5
    4dec:	2023883a 	mov	r17,r4
    4df0:	10000b26 	beq	r2,zero,4e20 <__smakebuf_r+0x54>
    4df4:	28c010c4 	addi	r3,r5,67
    4df8:	00800044 	movi	r2,1
    4dfc:	28800515 	stw	r2,20(r5)
    4e00:	28c00415 	stw	r3,16(r5)
    4e04:	28c00015 	stw	r3,0(r5)
    4e08:	dfc01217 	ldw	ra,72(sp)
    4e0c:	dc801117 	ldw	r18,68(sp)
    4e10:	dc401017 	ldw	r17,64(sp)
    4e14:	dc000f17 	ldw	r16,60(sp)
    4e18:	dec01304 	addi	sp,sp,76
    4e1c:	f800283a 	ret
    4e20:	2940038f 	ldh	r5,14(r5)
    4e24:	28002116 	blt	r5,zero,4eac <__smakebuf_r+0xe0>
    4e28:	d80d883a 	mov	r6,sp
    4e2c:	00074940 	call	7494 <_fstat_r>
    4e30:	10001e16 	blt	r2,zero,4eac <__smakebuf_r+0xe0>
    4e34:	d8800117 	ldw	r2,4(sp)
    4e38:	00e00014 	movui	r3,32768
    4e3c:	113c000c 	andi	r4,r2,61440
    4e40:	20c03126 	beq	r4,r3,4f08 <__smakebuf_r+0x13c>
    4e44:	8080030b 	ldhu	r2,12(r16)
    4e48:	00c80004 	movi	r3,8192
    4e4c:	10820014 	ori	r2,r2,2048
    4e50:	8080030d 	sth	r2,12(r16)
    4e54:	20c01e26 	beq	r4,r3,4ed0 <__smakebuf_r+0x104>
    4e58:	04810004 	movi	r18,1024
    4e5c:	8809883a 	mov	r4,r17
    4e60:	900b883a 	mov	r5,r18
    4e64:	0004f600 	call	4f60 <_malloc_r>
    4e68:	1009883a 	mov	r4,r2
    4e6c:	10003126 	beq	r2,zero,4f34 <__smakebuf_r+0x168>
    4e70:	80c0030b 	ldhu	r3,12(r16)
    4e74:	00800034 	movhi	r2,0
    4e78:	10904e04 	addi	r2,r2,16696
    4e7c:	88800f15 	stw	r2,60(r17)
    4e80:	18c02014 	ori	r3,r3,128
    4e84:	84800515 	stw	r18,20(r16)
    4e88:	80c0030d 	sth	r3,12(r16)
    4e8c:	81000415 	stw	r4,16(r16)
    4e90:	81000015 	stw	r4,0(r16)
    4e94:	dfc01217 	ldw	ra,72(sp)
    4e98:	dc801117 	ldw	r18,68(sp)
    4e9c:	dc401017 	ldw	r17,64(sp)
    4ea0:	dc000f17 	ldw	r16,60(sp)
    4ea4:	dec01304 	addi	sp,sp,76
    4ea8:	f800283a 	ret
    4eac:	80c0030b 	ldhu	r3,12(r16)
    4eb0:	1880200c 	andi	r2,r3,128
    4eb4:	10000426 	beq	r2,zero,4ec8 <__smakebuf_r+0xfc>
    4eb8:	04801004 	movi	r18,64
    4ebc:	18820014 	ori	r2,r3,2048
    4ec0:	8080030d 	sth	r2,12(r16)
    4ec4:	003fe506 	br	4e5c <__smakebuf_r+0x90>
    4ec8:	04810004 	movi	r18,1024
    4ecc:	003ffb06 	br	4ebc <__smakebuf_r+0xf0>
    4ed0:	8140038f 	ldh	r5,14(r16)
    4ed4:	8809883a 	mov	r4,r17
    4ed8:	00075080 	call	7508 <_isatty_r>
    4edc:	103fde26 	beq	r2,zero,4e58 <__smakebuf_r+0x8c>
    4ee0:	8080030b 	ldhu	r2,12(r16)
    4ee4:	80c010c4 	addi	r3,r16,67
    4ee8:	04810004 	movi	r18,1024
    4eec:	10800054 	ori	r2,r2,1
    4ef0:	8080030d 	sth	r2,12(r16)
    4ef4:	00800044 	movi	r2,1
    4ef8:	80c00415 	stw	r3,16(r16)
    4efc:	80800515 	stw	r2,20(r16)
    4f00:	80c00015 	stw	r3,0(r16)
    4f04:	003fd506 	br	4e5c <__smakebuf_r+0x90>
    4f08:	80c00a17 	ldw	r3,40(r16)
    4f0c:	00800034 	movhi	r2,0
    4f10:	109bf504 	addi	r2,r2,28628
    4f14:	18bfcb1e 	bne	r3,r2,4e44 <__smakebuf_r+0x78>
    4f18:	8080030b 	ldhu	r2,12(r16)
    4f1c:	00c10004 	movi	r3,1024
    4f20:	1825883a 	mov	r18,r3
    4f24:	10c4b03a 	or	r2,r2,r3
    4f28:	8080030d 	sth	r2,12(r16)
    4f2c:	80c01315 	stw	r3,76(r16)
    4f30:	003fca06 	br	4e5c <__smakebuf_r+0x90>
    4f34:	8100030b 	ldhu	r4,12(r16)
    4f38:	2080800c 	andi	r2,r4,512
    4f3c:	103fb21e 	bne	r2,zero,4e08 <__smakebuf_r+0x3c>
    4f40:	80c010c4 	addi	r3,r16,67
    4f44:	21000094 	ori	r4,r4,2
    4f48:	00800044 	movi	r2,1
    4f4c:	80800515 	stw	r2,20(r16)
    4f50:	8100030d 	sth	r4,12(r16)
    4f54:	80c00415 	stw	r3,16(r16)
    4f58:	80c00015 	stw	r3,0(r16)
    4f5c:	003faa06 	br	4e08 <__smakebuf_r+0x3c>

00004f60 <_malloc_r>:
    4f60:	defff604 	addi	sp,sp,-40
    4f64:	28c002c4 	addi	r3,r5,11
    4f68:	00800584 	movi	r2,22
    4f6c:	dc800215 	stw	r18,8(sp)
    4f70:	dfc00915 	stw	ra,36(sp)
    4f74:	df000815 	stw	fp,32(sp)
    4f78:	ddc00715 	stw	r23,28(sp)
    4f7c:	dd800615 	stw	r22,24(sp)
    4f80:	dd400515 	stw	r21,20(sp)
    4f84:	dd000415 	stw	r20,16(sp)
    4f88:	dcc00315 	stw	r19,12(sp)
    4f8c:	dc400115 	stw	r17,4(sp)
    4f90:	dc000015 	stw	r16,0(sp)
    4f94:	2025883a 	mov	r18,r4
    4f98:	10c01236 	bltu	r2,r3,4fe4 <_malloc_r+0x84>
    4f9c:	04400404 	movi	r17,16
    4fa0:	8940142e 	bgeu	r17,r5,4ff4 <_malloc_r+0x94>
    4fa4:	00800304 	movi	r2,12
    4fa8:	0007883a 	mov	r3,zero
    4fac:	90800015 	stw	r2,0(r18)
    4fb0:	1805883a 	mov	r2,r3
    4fb4:	dfc00917 	ldw	ra,36(sp)
    4fb8:	df000817 	ldw	fp,32(sp)
    4fbc:	ddc00717 	ldw	r23,28(sp)
    4fc0:	dd800617 	ldw	r22,24(sp)
    4fc4:	dd400517 	ldw	r21,20(sp)
    4fc8:	dd000417 	ldw	r20,16(sp)
    4fcc:	dcc00317 	ldw	r19,12(sp)
    4fd0:	dc800217 	ldw	r18,8(sp)
    4fd4:	dc400117 	ldw	r17,4(sp)
    4fd8:	dc000017 	ldw	r16,0(sp)
    4fdc:	dec00a04 	addi	sp,sp,40
    4fe0:	f800283a 	ret
    4fe4:	00bffe04 	movi	r2,-8
    4fe8:	18a2703a 	and	r17,r3,r2
    4fec:	883fed16 	blt	r17,zero,4fa4 <_malloc_r+0x44>
    4ff0:	897fec36 	bltu	r17,r5,4fa4 <_malloc_r+0x44>
    4ff4:	9009883a 	mov	r4,r18
    4ff8:	000a1000 	call	a100 <__malloc_lock>
    4ffc:	00807dc4 	movi	r2,503
    5000:	14402b2e 	bgeu	r2,r17,50b0 <_malloc_r+0x150>
    5004:	8806d27a 	srli	r3,r17,9
    5008:	18003f1e 	bne	r3,zero,5108 <_malloc_r+0x1a8>
    500c:	880cd0fa 	srli	r6,r17,3
    5010:	300490fa 	slli	r2,r6,3
    5014:	02c00074 	movhi	r11,1
    5018:	5af65c04 	addi	r11,r11,-9872
    501c:	12cb883a 	add	r5,r2,r11
    5020:	2c000317 	ldw	r16,12(r5)
    5024:	580f883a 	mov	r7,r11
    5028:	2c00041e 	bne	r5,r16,503c <_malloc_r+0xdc>
    502c:	00000a06 	br	5058 <_malloc_r+0xf8>
    5030:	1800860e 	bge	r3,zero,524c <_malloc_r+0x2ec>
    5034:	84000317 	ldw	r16,12(r16)
    5038:	2c000726 	beq	r5,r16,5058 <_malloc_r+0xf8>
    503c:	80800117 	ldw	r2,4(r16)
    5040:	00ffff04 	movi	r3,-4
    5044:	10c8703a 	and	r4,r2,r3
    5048:	2447c83a 	sub	r3,r4,r17
    504c:	008003c4 	movi	r2,15
    5050:	10fff70e 	bge	r2,r3,5030 <_malloc_r+0xd0>
    5054:	31bfffc4 	addi	r6,r6,-1
    5058:	32400044 	addi	r9,r6,1
    505c:	02800074 	movhi	r10,1
    5060:	52b65e04 	addi	r10,r10,-9864
    5064:	54000217 	ldw	r16,8(r10)
    5068:	8280a026 	beq	r16,r10,52ec <_malloc_r+0x38c>
    506c:	80800117 	ldw	r2,4(r16)
    5070:	00ffff04 	movi	r3,-4
    5074:	10ca703a 	and	r5,r2,r3
    5078:	2c4dc83a 	sub	r6,r5,r17
    507c:	008003c4 	movi	r2,15
    5080:	11808316 	blt	r2,r6,5290 <_malloc_r+0x330>
    5084:	52800315 	stw	r10,12(r10)
    5088:	52800215 	stw	r10,8(r10)
    508c:	30002916 	blt	r6,zero,5134 <_malloc_r+0x1d4>
    5090:	8147883a 	add	r3,r16,r5
    5094:	18800117 	ldw	r2,4(r3)
    5098:	9009883a 	mov	r4,r18
    509c:	10800054 	ori	r2,r2,1
    50a0:	18800115 	stw	r2,4(r3)
    50a4:	000a1200 	call	a120 <__malloc_unlock>
    50a8:	80c00204 	addi	r3,r16,8
    50ac:	003fc006 	br	4fb0 <_malloc_r+0x50>
    50b0:	02c00074 	movhi	r11,1
    50b4:	5af65c04 	addi	r11,r11,-9872
    50b8:	8ac5883a 	add	r2,r17,r11
    50bc:	14000317 	ldw	r16,12(r2)
    50c0:	580f883a 	mov	r7,r11
    50c4:	8806d0fa 	srli	r3,r17,3
    50c8:	14006c26 	beq	r2,r16,527c <_malloc_r+0x31c>
    50cc:	80c00117 	ldw	r3,4(r16)
    50d0:	00bfff04 	movi	r2,-4
    50d4:	81800317 	ldw	r6,12(r16)
    50d8:	1886703a 	and	r3,r3,r2
    50dc:	80c7883a 	add	r3,r16,r3
    50e0:	18800117 	ldw	r2,4(r3)
    50e4:	81400217 	ldw	r5,8(r16)
    50e8:	9009883a 	mov	r4,r18
    50ec:	10800054 	ori	r2,r2,1
    50f0:	18800115 	stw	r2,4(r3)
    50f4:	31400215 	stw	r5,8(r6)
    50f8:	29800315 	stw	r6,12(r5)
    50fc:	000a1200 	call	a120 <__malloc_unlock>
    5100:	80c00204 	addi	r3,r16,8
    5104:	003faa06 	br	4fb0 <_malloc_r+0x50>
    5108:	00800104 	movi	r2,4
    510c:	10c0052e 	bgeu	r2,r3,5124 <_malloc_r+0x1c4>
    5110:	00800504 	movi	r2,20
    5114:	10c07836 	bltu	r2,r3,52f8 <_malloc_r+0x398>
    5118:	198016c4 	addi	r6,r3,91
    511c:	300490fa 	slli	r2,r6,3
    5120:	003fbc06 	br	5014 <_malloc_r+0xb4>
    5124:	8804d1ba 	srli	r2,r17,6
    5128:	11800e04 	addi	r6,r2,56
    512c:	300490fa 	slli	r2,r6,3
    5130:	003fb806 	br	5014 <_malloc_r+0xb4>
    5134:	00807fc4 	movi	r2,511
    5138:	1140bb36 	bltu	r2,r5,5428 <_malloc_r+0x4c8>
    513c:	2806d0fa 	srli	r3,r5,3
    5140:	573ffe04 	addi	fp,r10,-8
    5144:	00800044 	movi	r2,1
    5148:	180890fa 	slli	r4,r3,3
    514c:	1807d0ba 	srai	r3,r3,2
    5150:	e1c00117 	ldw	r7,4(fp)
    5154:	5909883a 	add	r4,r11,r4
    5158:	21400217 	ldw	r5,8(r4)
    515c:	10c4983a 	sll	r2,r2,r3
    5160:	81000315 	stw	r4,12(r16)
    5164:	81400215 	stw	r5,8(r16)
    5168:	388eb03a 	or	r7,r7,r2
    516c:	2c000315 	stw	r16,12(r5)
    5170:	24000215 	stw	r16,8(r4)
    5174:	e1c00115 	stw	r7,4(fp)
    5178:	4807883a 	mov	r3,r9
    517c:	4800cd16 	blt	r9,zero,54b4 <_malloc_r+0x554>
    5180:	1807d0ba 	srai	r3,r3,2
    5184:	00800044 	movi	r2,1
    5188:	10c8983a 	sll	r4,r2,r3
    518c:	39004436 	bltu	r7,r4,52a0 <_malloc_r+0x340>
    5190:	21c4703a 	and	r2,r4,r7
    5194:	10000a1e 	bne	r2,zero,51c0 <_malloc_r+0x260>
    5198:	2109883a 	add	r4,r4,r4
    519c:	00bfff04 	movi	r2,-4
    51a0:	4884703a 	and	r2,r9,r2
    51a4:	3906703a 	and	r3,r7,r4
    51a8:	12400104 	addi	r9,r2,4
    51ac:	1800041e 	bne	r3,zero,51c0 <_malloc_r+0x260>
    51b0:	2109883a 	add	r4,r4,r4
    51b4:	3904703a 	and	r2,r7,r4
    51b8:	4a400104 	addi	r9,r9,4
    51bc:	103ffc26 	beq	r2,zero,51b0 <_malloc_r+0x250>
    51c0:	480490fa 	slli	r2,r9,3
    51c4:	4819883a 	mov	r12,r9
    51c8:	023fff04 	movi	r8,-4
    51cc:	589b883a 	add	r13,r11,r2
    51d0:	6807883a 	mov	r3,r13
    51d4:	014003c4 	movi	r5,15
    51d8:	1c000317 	ldw	r16,12(r3)
    51dc:	1c00041e 	bne	r3,r16,51f0 <_malloc_r+0x290>
    51e0:	0000a706 	br	5480 <_malloc_r+0x520>
    51e4:	3000ab0e 	bge	r6,zero,5494 <_malloc_r+0x534>
    51e8:	84000317 	ldw	r16,12(r16)
    51ec:	1c00a426 	beq	r3,r16,5480 <_malloc_r+0x520>
    51f0:	80800117 	ldw	r2,4(r16)
    51f4:	1204703a 	and	r2,r2,r8
    51f8:	144dc83a 	sub	r6,r2,r17
    51fc:	29bff90e 	bge	r5,r6,51e4 <_malloc_r+0x284>
    5200:	81000317 	ldw	r4,12(r16)
    5204:	80c00217 	ldw	r3,8(r16)
    5208:	89400054 	ori	r5,r17,1
    520c:	8445883a 	add	r2,r16,r17
    5210:	20c00215 	stw	r3,8(r4)
    5214:	19000315 	stw	r4,12(r3)
    5218:	81400115 	stw	r5,4(r16)
    521c:	1187883a 	add	r3,r2,r6
    5220:	31000054 	ori	r4,r6,1
    5224:	50800315 	stw	r2,12(r10)
    5228:	50800215 	stw	r2,8(r10)
    522c:	19800015 	stw	r6,0(r3)
    5230:	11000115 	stw	r4,4(r2)
    5234:	12800215 	stw	r10,8(r2)
    5238:	12800315 	stw	r10,12(r2)
    523c:	9009883a 	mov	r4,r18
    5240:	000a1200 	call	a120 <__malloc_unlock>
    5244:	80c00204 	addi	r3,r16,8
    5248:	003f5906 	br	4fb0 <_malloc_r+0x50>
    524c:	8109883a 	add	r4,r16,r4
    5250:	20800117 	ldw	r2,4(r4)
    5254:	80c00217 	ldw	r3,8(r16)
    5258:	81400317 	ldw	r5,12(r16)
    525c:	10800054 	ori	r2,r2,1
    5260:	20800115 	stw	r2,4(r4)
    5264:	28c00215 	stw	r3,8(r5)
    5268:	19400315 	stw	r5,12(r3)
    526c:	9009883a 	mov	r4,r18
    5270:	000a1200 	call	a120 <__malloc_unlock>
    5274:	80c00204 	addi	r3,r16,8
    5278:	003f4d06 	br	4fb0 <_malloc_r+0x50>
    527c:	80800204 	addi	r2,r16,8
    5280:	14000317 	ldw	r16,12(r2)
    5284:	143f911e 	bne	r2,r16,50cc <_malloc_r+0x16c>
    5288:	1a400084 	addi	r9,r3,2
    528c:	003f7306 	br	505c <_malloc_r+0xfc>
    5290:	88c00054 	ori	r3,r17,1
    5294:	8445883a 	add	r2,r16,r17
    5298:	80c00115 	stw	r3,4(r16)
    529c:	003fdf06 	br	521c <_malloc_r+0x2bc>
    52a0:	e4000217 	ldw	r16,8(fp)
    52a4:	00bfff04 	movi	r2,-4
    52a8:	80c00117 	ldw	r3,4(r16)
    52ac:	802d883a 	mov	r22,r16
    52b0:	18aa703a 	and	r21,r3,r2
    52b4:	ac401636 	bltu	r21,r17,5310 <_malloc_r+0x3b0>
    52b8:	ac49c83a 	sub	r4,r21,r17
    52bc:	008003c4 	movi	r2,15
    52c0:	1100130e 	bge	r2,r4,5310 <_malloc_r+0x3b0>
    52c4:	88800054 	ori	r2,r17,1
    52c8:	8447883a 	add	r3,r16,r17
    52cc:	80800115 	stw	r2,4(r16)
    52d0:	20800054 	ori	r2,r4,1
    52d4:	18800115 	stw	r2,4(r3)
    52d8:	e0c00215 	stw	r3,8(fp)
    52dc:	9009883a 	mov	r4,r18
    52e0:	000a1200 	call	a120 <__malloc_unlock>
    52e4:	80c00204 	addi	r3,r16,8
    52e8:	003f3106 	br	4fb0 <_malloc_r+0x50>
    52ec:	39c00117 	ldw	r7,4(r7)
    52f0:	573ffe04 	addi	fp,r10,-8
    52f4:	003fa006 	br	5178 <_malloc_r+0x218>
    52f8:	00801504 	movi	r2,84
    52fc:	10c06736 	bltu	r2,r3,549c <_malloc_r+0x53c>
    5300:	8804d33a 	srli	r2,r17,12
    5304:	11801b84 	addi	r6,r2,110
    5308:	300490fa 	slli	r2,r6,3
    530c:	003f4106 	br	5014 <_malloc_r+0xb4>
    5310:	d0a01317 	ldw	r2,-32692(gp)
    5314:	d0e00517 	ldw	r3,-32748(gp)
    5318:	053fffc4 	movi	r20,-1
    531c:	10800404 	addi	r2,r2,16
    5320:	88a7883a 	add	r19,r17,r2
    5324:	1d000326 	beq	r3,r20,5334 <_malloc_r+0x3d4>
    5328:	98c3ffc4 	addi	r3,r19,4095
    532c:	00bc0004 	movi	r2,-4096
    5330:	18a6703a 	and	r19,r3,r2
    5334:	9009883a 	mov	r4,r18
    5338:	980b883a 	mov	r5,r19
    533c:	0006f5c0 	call	6f5c <_sbrk_r>
    5340:	1009883a 	mov	r4,r2
    5344:	15000426 	beq	r2,r20,5358 <_malloc_r+0x3f8>
    5348:	854b883a 	add	r5,r16,r21
    534c:	1029883a 	mov	r20,r2
    5350:	11405a2e 	bgeu	r2,r5,54bc <_malloc_r+0x55c>
    5354:	87000c26 	beq	r16,fp,5388 <_malloc_r+0x428>
    5358:	e4000217 	ldw	r16,8(fp)
    535c:	80c00117 	ldw	r3,4(r16)
    5360:	00bfff04 	movi	r2,-4
    5364:	1884703a 	and	r2,r3,r2
    5368:	14400336 	bltu	r2,r17,5378 <_malloc_r+0x418>
    536c:	1449c83a 	sub	r4,r2,r17
    5370:	008003c4 	movi	r2,15
    5374:	113fd316 	blt	r2,r4,52c4 <_malloc_r+0x364>
    5378:	9009883a 	mov	r4,r18
    537c:	000a1200 	call	a120 <__malloc_unlock>
    5380:	0007883a 	mov	r3,zero
    5384:	003f0a06 	br	4fb0 <_malloc_r+0x50>
    5388:	05c00074 	movhi	r23,1
    538c:	bdf84604 	addi	r23,r23,-7912
    5390:	b8800017 	ldw	r2,0(r23)
    5394:	988d883a 	add	r6,r19,r2
    5398:	b9800015 	stw	r6,0(r23)
    539c:	d0e00517 	ldw	r3,-32748(gp)
    53a0:	00bfffc4 	movi	r2,-1
    53a4:	18808e26 	beq	r3,r2,55e0 <_malloc_r+0x680>
    53a8:	2145c83a 	sub	r2,r4,r5
    53ac:	3085883a 	add	r2,r6,r2
    53b0:	b8800015 	stw	r2,0(r23)
    53b4:	20c001cc 	andi	r3,r4,7
    53b8:	18005f1e 	bne	r3,zero,5538 <_malloc_r+0x5d8>
    53bc:	000b883a 	mov	r5,zero
    53c0:	a4c5883a 	add	r2,r20,r19
    53c4:	1083ffcc 	andi	r2,r2,4095
    53c8:	00c40004 	movi	r3,4096
    53cc:	1887c83a 	sub	r3,r3,r2
    53d0:	28e7883a 	add	r19,r5,r3
    53d4:	9009883a 	mov	r4,r18
    53d8:	980b883a 	mov	r5,r19
    53dc:	0006f5c0 	call	6f5c <_sbrk_r>
    53e0:	1007883a 	mov	r3,r2
    53e4:	00bfffc4 	movi	r2,-1
    53e8:	18807a26 	beq	r3,r2,55d4 <_malloc_r+0x674>
    53ec:	1d05c83a 	sub	r2,r3,r20
    53f0:	9885883a 	add	r2,r19,r2
    53f4:	10c00054 	ori	r3,r2,1
    53f8:	b8800017 	ldw	r2,0(r23)
    53fc:	a021883a 	mov	r16,r20
    5400:	a0c00115 	stw	r3,4(r20)
    5404:	9885883a 	add	r2,r19,r2
    5408:	b8800015 	stw	r2,0(r23)
    540c:	e5000215 	stw	r20,8(fp)
    5410:	b7003626 	beq	r22,fp,54ec <_malloc_r+0x58c>
    5414:	018003c4 	movi	r6,15
    5418:	35404b36 	bltu	r6,r21,5548 <_malloc_r+0x5e8>
    541c:	00800044 	movi	r2,1
    5420:	a0800115 	stw	r2,4(r20)
    5424:	003fcd06 	br	535c <_malloc_r+0x3fc>
    5428:	2808d27a 	srli	r4,r5,9
    542c:	2000371e 	bne	r4,zero,550c <_malloc_r+0x5ac>
    5430:	2808d0fa 	srli	r4,r5,3
    5434:	200690fa 	slli	r3,r4,3
    5438:	1ad1883a 	add	r8,r3,r11
    543c:	41800217 	ldw	r6,8(r8)
    5440:	41805b26 	beq	r8,r6,55b0 <_malloc_r+0x650>
    5444:	30800117 	ldw	r2,4(r6)
    5448:	00ffff04 	movi	r3,-4
    544c:	10c4703a 	and	r2,r2,r3
    5450:	2880022e 	bgeu	r5,r2,545c <_malloc_r+0x4fc>
    5454:	31800217 	ldw	r6,8(r6)
    5458:	41bffa1e 	bne	r8,r6,5444 <_malloc_r+0x4e4>
    545c:	32000317 	ldw	r8,12(r6)
    5460:	39c00117 	ldw	r7,4(r7)
    5464:	82000315 	stw	r8,12(r16)
    5468:	81800215 	stw	r6,8(r16)
    546c:	07000074 	movhi	fp,1
    5470:	e7365c04 	addi	fp,fp,-9872
    5474:	34000315 	stw	r16,12(r6)
    5478:	44000215 	stw	r16,8(r8)
    547c:	003f3e06 	br	5178 <_malloc_r+0x218>
    5480:	63000044 	addi	r12,r12,1
    5484:	608000cc 	andi	r2,r12,3
    5488:	10005d26 	beq	r2,zero,5600 <_malloc_r+0x6a0>
    548c:	18c00204 	addi	r3,r3,8
    5490:	003f5106 	br	51d8 <_malloc_r+0x278>
    5494:	8089883a 	add	r4,r16,r2
    5498:	003f6d06 	br	5250 <_malloc_r+0x2f0>
    549c:	00805504 	movi	r2,340
    54a0:	10c02036 	bltu	r2,r3,5524 <_malloc_r+0x5c4>
    54a4:	8804d3fa 	srli	r2,r17,15
    54a8:	11801dc4 	addi	r6,r2,119
    54ac:	300490fa 	slli	r2,r6,3
    54b0:	003ed806 	br	5014 <_malloc_r+0xb4>
    54b4:	48c000c4 	addi	r3,r9,3
    54b8:	003f3106 	br	5180 <_malloc_r+0x220>
    54bc:	05c00074 	movhi	r23,1
    54c0:	bdf84604 	addi	r23,r23,-7912
    54c4:	b8800017 	ldw	r2,0(r23)
    54c8:	988d883a 	add	r6,r19,r2
    54cc:	b9800015 	stw	r6,0(r23)
    54d0:	293fb21e 	bne	r5,r4,539c <_malloc_r+0x43c>
    54d4:	2083ffcc 	andi	r2,r4,4095
    54d8:	103fb01e 	bne	r2,zero,539c <_malloc_r+0x43c>
    54dc:	e4000217 	ldw	r16,8(fp)
    54e0:	9d45883a 	add	r2,r19,r21
    54e4:	10800054 	ori	r2,r2,1
    54e8:	80800115 	stw	r2,4(r16)
    54ec:	b8c00017 	ldw	r3,0(r23)
    54f0:	d0a01417 	ldw	r2,-32688(gp)
    54f4:	10c0012e 	bgeu	r2,r3,54fc <_malloc_r+0x59c>
    54f8:	d0e01415 	stw	r3,-32688(gp)
    54fc:	d0a01517 	ldw	r2,-32684(gp)
    5500:	10ff962e 	bgeu	r2,r3,535c <_malloc_r+0x3fc>
    5504:	d0e01515 	stw	r3,-32684(gp)
    5508:	003f9406 	br	535c <_malloc_r+0x3fc>
    550c:	00800104 	movi	r2,4
    5510:	11001e36 	bltu	r2,r4,558c <_malloc_r+0x62c>
    5514:	2804d1ba 	srli	r2,r5,6
    5518:	11000e04 	addi	r4,r2,56
    551c:	200690fa 	slli	r3,r4,3
    5520:	003fc506 	br	5438 <_malloc_r+0x4d8>
    5524:	00815504 	movi	r2,1364
    5528:	10c01d2e 	bgeu	r2,r3,55a0 <_malloc_r+0x640>
    552c:	01801f84 	movi	r6,126
    5530:	0080fc04 	movi	r2,1008
    5534:	003eb706 	br	5014 <_malloc_r+0xb4>
    5538:	00800204 	movi	r2,8
    553c:	10cbc83a 	sub	r5,r2,r3
    5540:	2169883a 	add	r20,r4,r5
    5544:	003f9e06 	br	53c0 <_malloc_r+0x460>
    5548:	00bffe04 	movi	r2,-8
    554c:	a93ffd04 	addi	r4,r21,-12
    5550:	2088703a 	and	r4,r4,r2
    5554:	b10b883a 	add	r5,r22,r4
    5558:	00c00144 	movi	r3,5
    555c:	28c00215 	stw	r3,8(r5)
    5560:	28c00115 	stw	r3,4(r5)
    5564:	b0800117 	ldw	r2,4(r22)
    5568:	1080004c 	andi	r2,r2,1
    556c:	2084b03a 	or	r2,r4,r2
    5570:	b0800115 	stw	r2,4(r22)
    5574:	313fdd2e 	bgeu	r6,r4,54ec <_malloc_r+0x58c>
    5578:	b1400204 	addi	r5,r22,8
    557c:	9009883a 	mov	r4,r18
    5580:	00043d80 	call	43d8 <_free_r>
    5584:	e4000217 	ldw	r16,8(fp)
    5588:	003fd806 	br	54ec <_malloc_r+0x58c>
    558c:	00800504 	movi	r2,20
    5590:	11001536 	bltu	r2,r4,55e8 <_malloc_r+0x688>
    5594:	210016c4 	addi	r4,r4,91
    5598:	200690fa 	slli	r3,r4,3
    559c:	003fa606 	br	5438 <_malloc_r+0x4d8>
    55a0:	8804d4ba 	srli	r2,r17,18
    55a4:	11801f04 	addi	r6,r2,124
    55a8:	300490fa 	slli	r2,r6,3
    55ac:	003e9906 	br	5014 <_malloc_r+0xb4>
    55b0:	2009d0ba 	srai	r4,r4,2
    55b4:	01400074 	movhi	r5,1
    55b8:	29765c04 	addi	r5,r5,-9872
    55bc:	00c00044 	movi	r3,1
    55c0:	28800117 	ldw	r2,4(r5)
    55c4:	1906983a 	sll	r3,r3,r4
    55c8:	10c4b03a 	or	r2,r2,r3
    55cc:	28800115 	stw	r2,4(r5)
    55d0:	003fa306 	br	5460 <_malloc_r+0x500>
    55d4:	0027883a 	mov	r19,zero
    55d8:	00c00044 	movi	r3,1
    55dc:	003f8606 	br	53f8 <_malloc_r+0x498>
    55e0:	d1200515 	stw	r4,-32748(gp)
    55e4:	003f7306 	br	53b4 <_malloc_r+0x454>
    55e8:	00801504 	movi	r2,84
    55ec:	11001936 	bltu	r2,r4,5654 <_malloc_r+0x6f4>
    55f0:	2804d33a 	srli	r2,r5,12
    55f4:	11001b84 	addi	r4,r2,110
    55f8:	200690fa 	slli	r3,r4,3
    55fc:	003f8e06 	br	5438 <_malloc_r+0x4d8>
    5600:	480b883a 	mov	r5,r9
    5604:	6807883a 	mov	r3,r13
    5608:	288000cc 	andi	r2,r5,3
    560c:	18fffe04 	addi	r3,r3,-8
    5610:	297fffc4 	addi	r5,r5,-1
    5614:	10001526 	beq	r2,zero,566c <_malloc_r+0x70c>
    5618:	18800217 	ldw	r2,8(r3)
    561c:	10fffa26 	beq	r2,r3,5608 <_malloc_r+0x6a8>
    5620:	2109883a 	add	r4,r4,r4
    5624:	393f1e36 	bltu	r7,r4,52a0 <_malloc_r+0x340>
    5628:	203f1d26 	beq	r4,zero,52a0 <_malloc_r+0x340>
    562c:	21c4703a 	and	r2,r4,r7
    5630:	10000226 	beq	r2,zero,563c <_malloc_r+0x6dc>
    5634:	6013883a 	mov	r9,r12
    5638:	003ee106 	br	51c0 <_malloc_r+0x260>
    563c:	2109883a 	add	r4,r4,r4
    5640:	3904703a 	and	r2,r7,r4
    5644:	63000104 	addi	r12,r12,4
    5648:	103ffc26 	beq	r2,zero,563c <_malloc_r+0x6dc>
    564c:	6013883a 	mov	r9,r12
    5650:	003edb06 	br	51c0 <_malloc_r+0x260>
    5654:	00805504 	movi	r2,340
    5658:	11000836 	bltu	r2,r4,567c <_malloc_r+0x71c>
    565c:	2804d3fa 	srli	r2,r5,15
    5660:	11001dc4 	addi	r4,r2,119
    5664:	200690fa 	slli	r3,r4,3
    5668:	003f7306 	br	5438 <_malloc_r+0x4d8>
    566c:	0104303a 	nor	r2,zero,r4
    5670:	388e703a 	and	r7,r7,r2
    5674:	e1c00115 	stw	r7,4(fp)
    5678:	003fe906 	br	5620 <_malloc_r+0x6c0>
    567c:	00815504 	movi	r2,1364
    5680:	1100032e 	bgeu	r2,r4,5690 <_malloc_r+0x730>
    5684:	01001f84 	movi	r4,126
    5688:	00c0fc04 	movi	r3,1008
    568c:	003f6a06 	br	5438 <_malloc_r+0x4d8>
    5690:	2804d4ba 	srli	r2,r5,18
    5694:	11001f04 	addi	r4,r2,124
    5698:	200690fa 	slli	r3,r4,3
    569c:	003f6606 	br	5438 <_malloc_r+0x4d8>

000056a0 <memchr>:
    56a0:	008000c4 	movi	r2,3
    56a4:	29403fcc 	andi	r5,r5,255
    56a8:	2007883a 	mov	r3,r4
    56ac:	1180022e 	bgeu	r2,r6,56b8 <memchr+0x18>
    56b0:	2084703a 	and	r2,r4,r2
    56b4:	10000b26 	beq	r2,zero,56e4 <memchr+0x44>
    56b8:	313fffc4 	addi	r4,r6,-1
    56bc:	3000051e 	bne	r6,zero,56d4 <memchr+0x34>
    56c0:	00002c06 	br	5774 <memchr+0xd4>
    56c4:	213fffc4 	addi	r4,r4,-1
    56c8:	00bfffc4 	movi	r2,-1
    56cc:	18c00044 	addi	r3,r3,1
    56d0:	20802826 	beq	r4,r2,5774 <memchr+0xd4>
    56d4:	18800003 	ldbu	r2,0(r3)
    56d8:	28bffa1e 	bne	r5,r2,56c4 <memchr+0x24>
    56dc:	1805883a 	mov	r2,r3
    56e0:	f800283a 	ret
    56e4:	0011883a 	mov	r8,zero
    56e8:	0007883a 	mov	r3,zero
    56ec:	01c00104 	movi	r7,4
    56f0:	4004923a 	slli	r2,r8,8
    56f4:	18c00044 	addi	r3,r3,1
    56f8:	1151883a 	add	r8,r2,r5
    56fc:	19fffc1e 	bne	r3,r7,56f0 <memchr+0x50>
    5700:	02bfbff4 	movhi	r10,65279
    5704:	52bfbfc4 	addi	r10,r10,-257
    5708:	02602074 	movhi	r9,32897
    570c:	4a602004 	addi	r9,r9,-32640
    5710:	02c000c4 	movi	r11,3
    5714:	20800017 	ldw	r2,0(r4)
    5718:	31bfff04 	addi	r6,r6,-4
    571c:	200f883a 	mov	r7,r4
    5720:	1204f03a 	xor	r2,r2,r8
    5724:	1287883a 	add	r3,r2,r10
    5728:	1a46703a 	and	r3,r3,r9
    572c:	0084303a 	nor	r2,zero,r2
    5730:	10c4703a 	and	r2,r2,r3
    5734:	10000b26 	beq	r2,zero,5764 <memchr+0xc4>
    5738:	20800003 	ldbu	r2,0(r4)
    573c:	28800f26 	beq	r5,r2,577c <memchr+0xdc>
    5740:	20800043 	ldbu	r2,1(r4)
    5744:	21c00044 	addi	r7,r4,1
    5748:	28800c26 	beq	r5,r2,577c <memchr+0xdc>
    574c:	20800083 	ldbu	r2,2(r4)
    5750:	21c00084 	addi	r7,r4,2
    5754:	28800926 	beq	r5,r2,577c <memchr+0xdc>
    5758:	208000c3 	ldbu	r2,3(r4)
    575c:	21c000c4 	addi	r7,r4,3
    5760:	28800626 	beq	r5,r2,577c <memchr+0xdc>
    5764:	21000104 	addi	r4,r4,4
    5768:	59bfea36 	bltu	r11,r6,5714 <memchr+0x74>
    576c:	2007883a 	mov	r3,r4
    5770:	003fd106 	br	56b8 <memchr+0x18>
    5774:	0005883a 	mov	r2,zero
    5778:	f800283a 	ret
    577c:	3805883a 	mov	r2,r7
    5780:	f800283a 	ret

00005784 <memcpy>:
    5784:	01c003c4 	movi	r7,15
    5788:	2007883a 	mov	r3,r4
    578c:	3980032e 	bgeu	r7,r6,579c <memcpy+0x18>
    5790:	2904b03a 	or	r2,r5,r4
    5794:	108000cc 	andi	r2,r2,3
    5798:	10000926 	beq	r2,zero,57c0 <memcpy+0x3c>
    579c:	30000626 	beq	r6,zero,57b8 <memcpy+0x34>
    57a0:	30cd883a 	add	r6,r6,r3
    57a4:	28800003 	ldbu	r2,0(r5)
    57a8:	29400044 	addi	r5,r5,1
    57ac:	18800005 	stb	r2,0(r3)
    57b0:	18c00044 	addi	r3,r3,1
    57b4:	30fffb1e 	bne	r6,r3,57a4 <memcpy+0x20>
    57b8:	2005883a 	mov	r2,r4
    57bc:	f800283a 	ret
    57c0:	3811883a 	mov	r8,r7
    57c4:	200f883a 	mov	r7,r4
    57c8:	28c00017 	ldw	r3,0(r5)
    57cc:	31bffc04 	addi	r6,r6,-16
    57d0:	38c00015 	stw	r3,0(r7)
    57d4:	28800117 	ldw	r2,4(r5)
    57d8:	38800115 	stw	r2,4(r7)
    57dc:	28c00217 	ldw	r3,8(r5)
    57e0:	38c00215 	stw	r3,8(r7)
    57e4:	28800317 	ldw	r2,12(r5)
    57e8:	29400404 	addi	r5,r5,16
    57ec:	38800315 	stw	r2,12(r7)
    57f0:	39c00404 	addi	r7,r7,16
    57f4:	41bff436 	bltu	r8,r6,57c8 <memcpy+0x44>
    57f8:	008000c4 	movi	r2,3
    57fc:	1180072e 	bgeu	r2,r6,581c <memcpy+0x98>
    5800:	1007883a 	mov	r3,r2
    5804:	28800017 	ldw	r2,0(r5)
    5808:	31bfff04 	addi	r6,r6,-4
    580c:	29400104 	addi	r5,r5,4
    5810:	38800015 	stw	r2,0(r7)
    5814:	39c00104 	addi	r7,r7,4
    5818:	19bffa36 	bltu	r3,r6,5804 <memcpy+0x80>
    581c:	3807883a 	mov	r3,r7
    5820:	003fde06 	br	579c <memcpy+0x18>

00005824 <memmove>:
    5824:	2807883a 	mov	r3,r5
    5828:	2011883a 	mov	r8,r4
    582c:	29000c2e 	bgeu	r5,r4,5860 <memmove+0x3c>
    5830:	298f883a 	add	r7,r5,r6
    5834:	21c00a2e 	bgeu	r4,r7,5860 <memmove+0x3c>
    5838:	30000726 	beq	r6,zero,5858 <memmove+0x34>
    583c:	2187883a 	add	r3,r4,r6
    5840:	198dc83a 	sub	r6,r3,r6
    5844:	39ffffc4 	addi	r7,r7,-1
    5848:	38800003 	ldbu	r2,0(r7)
    584c:	18ffffc4 	addi	r3,r3,-1
    5850:	18800005 	stb	r2,0(r3)
    5854:	19bffb1e 	bne	r3,r6,5844 <memmove+0x20>
    5858:	2005883a 	mov	r2,r4
    585c:	f800283a 	ret
    5860:	01c003c4 	movi	r7,15
    5864:	39800a36 	bltu	r7,r6,5890 <memmove+0x6c>
    5868:	303ffb26 	beq	r6,zero,5858 <memmove+0x34>
    586c:	400f883a 	mov	r7,r8
    5870:	320d883a 	add	r6,r6,r8
    5874:	28800003 	ldbu	r2,0(r5)
    5878:	29400044 	addi	r5,r5,1
    587c:	38800005 	stb	r2,0(r7)
    5880:	39c00044 	addi	r7,r7,1
    5884:	39bffb1e 	bne	r7,r6,5874 <memmove+0x50>
    5888:	2005883a 	mov	r2,r4
    588c:	f800283a 	ret
    5890:	1904b03a 	or	r2,r3,r4
    5894:	108000cc 	andi	r2,r2,3
    5898:	103ff31e 	bne	r2,zero,5868 <memmove+0x44>
    589c:	3811883a 	mov	r8,r7
    58a0:	180b883a 	mov	r5,r3
    58a4:	200f883a 	mov	r7,r4
    58a8:	28c00017 	ldw	r3,0(r5)
    58ac:	31bffc04 	addi	r6,r6,-16
    58b0:	38c00015 	stw	r3,0(r7)
    58b4:	28800117 	ldw	r2,4(r5)
    58b8:	38800115 	stw	r2,4(r7)
    58bc:	28c00217 	ldw	r3,8(r5)
    58c0:	38c00215 	stw	r3,8(r7)
    58c4:	28800317 	ldw	r2,12(r5)
    58c8:	29400404 	addi	r5,r5,16
    58cc:	38800315 	stw	r2,12(r7)
    58d0:	39c00404 	addi	r7,r7,16
    58d4:	41bff436 	bltu	r8,r6,58a8 <memmove+0x84>
    58d8:	008000c4 	movi	r2,3
    58dc:	1180072e 	bgeu	r2,r6,58fc <memmove+0xd8>
    58e0:	1007883a 	mov	r3,r2
    58e4:	28800017 	ldw	r2,0(r5)
    58e8:	31bfff04 	addi	r6,r6,-4
    58ec:	29400104 	addi	r5,r5,4
    58f0:	38800015 	stw	r2,0(r7)
    58f4:	39c00104 	addi	r7,r7,4
    58f8:	19bffa36 	bltu	r3,r6,58e4 <memmove+0xc0>
    58fc:	3811883a 	mov	r8,r7
    5900:	003fd906 	br	5868 <memmove+0x44>

00005904 <_Bfree>:
    5904:	28000826 	beq	r5,zero,5928 <_Bfree+0x24>
    5908:	28800117 	ldw	r2,4(r5)
    590c:	21001317 	ldw	r4,76(r4)
    5910:	1085883a 	add	r2,r2,r2
    5914:	1085883a 	add	r2,r2,r2
    5918:	1105883a 	add	r2,r2,r4
    591c:	10c00017 	ldw	r3,0(r2)
    5920:	28c00015 	stw	r3,0(r5)
    5924:	11400015 	stw	r5,0(r2)
    5928:	f800283a 	ret

0000592c <__hi0bits>:
    592c:	20bfffec 	andhi	r2,r4,65535
    5930:	10001426 	beq	r2,zero,5984 <__hi0bits+0x58>
    5934:	0007883a 	mov	r3,zero
    5938:	20bfc02c 	andhi	r2,r4,65280
    593c:	1000021e 	bne	r2,zero,5948 <__hi0bits+0x1c>
    5940:	2008923a 	slli	r4,r4,8
    5944:	18c00204 	addi	r3,r3,8
    5948:	20bc002c 	andhi	r2,r4,61440
    594c:	1000021e 	bne	r2,zero,5958 <__hi0bits+0x2c>
    5950:	2008913a 	slli	r4,r4,4
    5954:	18c00104 	addi	r3,r3,4
    5958:	20b0002c 	andhi	r2,r4,49152
    595c:	1000031e 	bne	r2,zero,596c <__hi0bits+0x40>
    5960:	2105883a 	add	r2,r4,r4
    5964:	18c00084 	addi	r3,r3,2
    5968:	1089883a 	add	r4,r2,r2
    596c:	20000316 	blt	r4,zero,597c <__hi0bits+0x50>
    5970:	2090002c 	andhi	r2,r4,16384
    5974:	10000626 	beq	r2,zero,5990 <__hi0bits+0x64>
    5978:	18c00044 	addi	r3,r3,1
    597c:	1805883a 	mov	r2,r3
    5980:	f800283a 	ret
    5984:	2008943a 	slli	r4,r4,16
    5988:	00c00404 	movi	r3,16
    598c:	003fea06 	br	5938 <__hi0bits+0xc>
    5990:	00c00804 	movi	r3,32
    5994:	1805883a 	mov	r2,r3
    5998:	f800283a 	ret

0000599c <__lo0bits>:
    599c:	20c00017 	ldw	r3,0(r4)
    59a0:	188001cc 	andi	r2,r3,7
    59a4:	10000a26 	beq	r2,zero,59d0 <__lo0bits+0x34>
    59a8:	1880004c 	andi	r2,r3,1
    59ac:	1005003a 	cmpeq	r2,r2,zero
    59b0:	10002126 	beq	r2,zero,5a38 <__lo0bits+0x9c>
    59b4:	1880008c 	andi	r2,r3,2
    59b8:	1000251e 	bne	r2,zero,5a50 <__lo0bits+0xb4>
    59bc:	1804d0ba 	srli	r2,r3,2
    59c0:	01400084 	movi	r5,2
    59c4:	20800015 	stw	r2,0(r4)
    59c8:	2805883a 	mov	r2,r5
    59cc:	f800283a 	ret
    59d0:	18bfffcc 	andi	r2,r3,65535
    59d4:	10001526 	beq	r2,zero,5a2c <__lo0bits+0x90>
    59d8:	000b883a 	mov	r5,zero
    59dc:	18803fcc 	andi	r2,r3,255
    59e0:	1000021e 	bne	r2,zero,59ec <__lo0bits+0x50>
    59e4:	1806d23a 	srli	r3,r3,8
    59e8:	29400204 	addi	r5,r5,8
    59ec:	188003cc 	andi	r2,r3,15
    59f0:	1000021e 	bne	r2,zero,59fc <__lo0bits+0x60>
    59f4:	1806d13a 	srli	r3,r3,4
    59f8:	29400104 	addi	r5,r5,4
    59fc:	188000cc 	andi	r2,r3,3
    5a00:	1000021e 	bne	r2,zero,5a0c <__lo0bits+0x70>
    5a04:	1806d0ba 	srli	r3,r3,2
    5a08:	29400084 	addi	r5,r5,2
    5a0c:	1880004c 	andi	r2,r3,1
    5a10:	1000031e 	bne	r2,zero,5a20 <__lo0bits+0x84>
    5a14:	1806d07a 	srli	r3,r3,1
    5a18:	18000a26 	beq	r3,zero,5a44 <__lo0bits+0xa8>
    5a1c:	29400044 	addi	r5,r5,1
    5a20:	2805883a 	mov	r2,r5
    5a24:	20c00015 	stw	r3,0(r4)
    5a28:	f800283a 	ret
    5a2c:	1806d43a 	srli	r3,r3,16
    5a30:	01400404 	movi	r5,16
    5a34:	003fe906 	br	59dc <__lo0bits+0x40>
    5a38:	000b883a 	mov	r5,zero
    5a3c:	2805883a 	mov	r2,r5
    5a40:	f800283a 	ret
    5a44:	01400804 	movi	r5,32
    5a48:	2805883a 	mov	r2,r5
    5a4c:	f800283a 	ret
    5a50:	1804d07a 	srli	r2,r3,1
    5a54:	01400044 	movi	r5,1
    5a58:	20800015 	stw	r2,0(r4)
    5a5c:	003fda06 	br	59c8 <__lo0bits+0x2c>

00005a60 <__mcmp>:
    5a60:	20800417 	ldw	r2,16(r4)
    5a64:	28c00417 	ldw	r3,16(r5)
    5a68:	10cfc83a 	sub	r7,r2,r3
    5a6c:	38000c1e 	bne	r7,zero,5aa0 <__mcmp+0x40>
    5a70:	18c5883a 	add	r2,r3,r3
    5a74:	1085883a 	add	r2,r2,r2
    5a78:	10c00504 	addi	r3,r2,20
    5a7c:	21000504 	addi	r4,r4,20
    5a80:	28cb883a 	add	r5,r5,r3
    5a84:	2085883a 	add	r2,r4,r2
    5a88:	10bfff04 	addi	r2,r2,-4
    5a8c:	297fff04 	addi	r5,r5,-4
    5a90:	11800017 	ldw	r6,0(r2)
    5a94:	28c00017 	ldw	r3,0(r5)
    5a98:	30c0031e 	bne	r6,r3,5aa8 <__mcmp+0x48>
    5a9c:	20bffa36 	bltu	r4,r2,5a88 <__mcmp+0x28>
    5aa0:	3805883a 	mov	r2,r7
    5aa4:	f800283a 	ret
    5aa8:	30c00336 	bltu	r6,r3,5ab8 <__mcmp+0x58>
    5aac:	01c00044 	movi	r7,1
    5ab0:	3805883a 	mov	r2,r7
    5ab4:	f800283a 	ret
    5ab8:	01ffffc4 	movi	r7,-1
    5abc:	003ff806 	br	5aa0 <__mcmp+0x40>

00005ac0 <__ulp>:
    5ac0:	295ffc2c 	andhi	r5,r5,32752
    5ac4:	013f3034 	movhi	r4,64704
    5ac8:	290b883a 	add	r5,r5,r4
    5acc:	0145c83a 	sub	r2,zero,r5
    5ad0:	1007d53a 	srai	r3,r2,20
    5ad4:	000d883a 	mov	r6,zero
    5ad8:	0140040e 	bge	zero,r5,5aec <__ulp+0x2c>
    5adc:	280f883a 	mov	r7,r5
    5ae0:	3807883a 	mov	r3,r7
    5ae4:	3005883a 	mov	r2,r6
    5ae8:	f800283a 	ret
    5aec:	008004c4 	movi	r2,19
    5af0:	193ffb04 	addi	r4,r3,-20
    5af4:	10c00c0e 	bge	r2,r3,5b28 <__ulp+0x68>
    5af8:	008007c4 	movi	r2,31
    5afc:	1107c83a 	sub	r3,r2,r4
    5b00:	00800784 	movi	r2,30
    5b04:	01400044 	movi	r5,1
    5b08:	11000216 	blt	r2,r4,5b14 <__ulp+0x54>
    5b0c:	00800044 	movi	r2,1
    5b10:	10ca983a 	sll	r5,r2,r3
    5b14:	000f883a 	mov	r7,zero
    5b18:	280d883a 	mov	r6,r5
    5b1c:	3807883a 	mov	r3,r7
    5b20:	3005883a 	mov	r2,r6
    5b24:	f800283a 	ret
    5b28:	00800234 	movhi	r2,8
    5b2c:	10cfd83a 	sra	r7,r2,r3
    5b30:	000d883a 	mov	r6,zero
    5b34:	3005883a 	mov	r2,r6
    5b38:	3807883a 	mov	r3,r7
    5b3c:	f800283a 	ret

00005b40 <__b2d>:
    5b40:	20800417 	ldw	r2,16(r4)
    5b44:	defff904 	addi	sp,sp,-28
    5b48:	dd000415 	stw	r20,16(sp)
    5b4c:	1085883a 	add	r2,r2,r2
    5b50:	25000504 	addi	r20,r4,20
    5b54:	1085883a 	add	r2,r2,r2
    5b58:	dc000015 	stw	r16,0(sp)
    5b5c:	a0a1883a 	add	r16,r20,r2
    5b60:	dd400515 	stw	r21,20(sp)
    5b64:	857fff17 	ldw	r21,-4(r16)
    5b68:	dc400115 	stw	r17,4(sp)
    5b6c:	dfc00615 	stw	ra,24(sp)
    5b70:	a809883a 	mov	r4,r21
    5b74:	2823883a 	mov	r17,r5
    5b78:	dcc00315 	stw	r19,12(sp)
    5b7c:	dc800215 	stw	r18,8(sp)
    5b80:	000592c0 	call	592c <__hi0bits>
    5b84:	100b883a 	mov	r5,r2
    5b88:	00800804 	movi	r2,32
    5b8c:	1145c83a 	sub	r2,r2,r5
    5b90:	88800015 	stw	r2,0(r17)
    5b94:	00800284 	movi	r2,10
    5b98:	80ffff04 	addi	r3,r16,-4
    5b9c:	11401416 	blt	r2,r5,5bf0 <__b2d+0xb0>
    5ba0:	008002c4 	movi	r2,11
    5ba4:	1149c83a 	sub	r4,r2,r5
    5ba8:	a0c02736 	bltu	r20,r3,5c48 <__b2d+0x108>
    5bac:	000d883a 	mov	r6,zero
    5bb0:	28800544 	addi	r2,r5,21
    5bb4:	a906d83a 	srl	r3,r21,r4
    5bb8:	a884983a 	sll	r2,r21,r2
    5bbc:	1ccffc34 	orhi	r19,r3,16368
    5bc0:	11a4b03a 	or	r18,r2,r6
    5bc4:	9005883a 	mov	r2,r18
    5bc8:	9807883a 	mov	r3,r19
    5bcc:	dfc00617 	ldw	ra,24(sp)
    5bd0:	dd400517 	ldw	r21,20(sp)
    5bd4:	dd000417 	ldw	r20,16(sp)
    5bd8:	dcc00317 	ldw	r19,12(sp)
    5bdc:	dc800217 	ldw	r18,8(sp)
    5be0:	dc400117 	ldw	r17,4(sp)
    5be4:	dc000017 	ldw	r16,0(sp)
    5be8:	dec00704 	addi	sp,sp,28
    5bec:	f800283a 	ret
    5bf0:	a0c00e36 	bltu	r20,r3,5c2c <__b2d+0xec>
    5bf4:	293ffd44 	addi	r4,r5,-11
    5bf8:	000d883a 	mov	r6,zero
    5bfc:	20000f26 	beq	r4,zero,5c3c <__b2d+0xfc>
    5c00:	00800804 	movi	r2,32
    5c04:	110bc83a 	sub	r5,r2,r4
    5c08:	a0c01236 	bltu	r20,r3,5c54 <__b2d+0x114>
    5c0c:	000f883a 	mov	r7,zero
    5c10:	a904983a 	sll	r2,r21,r4
    5c14:	3146d83a 	srl	r3,r6,r5
    5c18:	3108983a 	sll	r4,r6,r4
    5c1c:	108ffc34 	orhi	r2,r2,16368
    5c20:	18a6b03a 	or	r19,r3,r2
    5c24:	3924b03a 	or	r18,r7,r4
    5c28:	003fe606 	br	5bc4 <__b2d+0x84>
    5c2c:	293ffd44 	addi	r4,r5,-11
    5c30:	81bffe17 	ldw	r6,-8(r16)
    5c34:	80fffe04 	addi	r3,r16,-8
    5c38:	203ff11e 	bne	r4,zero,5c00 <__b2d+0xc0>
    5c3c:	accffc34 	orhi	r19,r21,16368
    5c40:	3025883a 	mov	r18,r6
    5c44:	003fdf06 	br	5bc4 <__b2d+0x84>
    5c48:	18bfff17 	ldw	r2,-4(r3)
    5c4c:	110cd83a 	srl	r6,r2,r4
    5c50:	003fd706 	br	5bb0 <__b2d+0x70>
    5c54:	18bfff17 	ldw	r2,-4(r3)
    5c58:	114ed83a 	srl	r7,r2,r5
    5c5c:	003fec06 	br	5c10 <__b2d+0xd0>

00005c60 <__ratio>:
    5c60:	defff904 	addi	sp,sp,-28
    5c64:	dc400215 	stw	r17,8(sp)
    5c68:	2823883a 	mov	r17,r5
    5c6c:	d80b883a 	mov	r5,sp
    5c70:	dfc00615 	stw	ra,24(sp)
    5c74:	dd000515 	stw	r20,20(sp)
    5c78:	dcc00415 	stw	r19,16(sp)
    5c7c:	dc800315 	stw	r18,12(sp)
    5c80:	2025883a 	mov	r18,r4
    5c84:	0005b400 	call	5b40 <__b2d>
    5c88:	8809883a 	mov	r4,r17
    5c8c:	d9400104 	addi	r5,sp,4
    5c90:	1027883a 	mov	r19,r2
    5c94:	1829883a 	mov	r20,r3
    5c98:	0005b400 	call	5b40 <__b2d>
    5c9c:	89000417 	ldw	r4,16(r17)
    5ca0:	91c00417 	ldw	r7,16(r18)
    5ca4:	d9800117 	ldw	r6,4(sp)
    5ca8:	180b883a 	mov	r5,r3
    5cac:	390fc83a 	sub	r7,r7,r4
    5cb0:	1009883a 	mov	r4,r2
    5cb4:	d8800017 	ldw	r2,0(sp)
    5cb8:	380e917a 	slli	r7,r7,5
    5cbc:	2011883a 	mov	r8,r4
    5cc0:	1185c83a 	sub	r2,r2,r6
    5cc4:	11c5883a 	add	r2,r2,r7
    5cc8:	1006953a 	slli	r3,r2,20
    5ccc:	2813883a 	mov	r9,r5
    5cd0:	00800d0e 	bge	zero,r2,5d08 <__ratio+0xa8>
    5cd4:	1d29883a 	add	r20,r3,r20
    5cd8:	a00b883a 	mov	r5,r20
    5cdc:	480f883a 	mov	r7,r9
    5ce0:	9809883a 	mov	r4,r19
    5ce4:	400d883a 	mov	r6,r8
    5ce8:	0008abc0 	call	8abc <__divdf3>
    5cec:	dfc00617 	ldw	ra,24(sp)
    5cf0:	dd000517 	ldw	r20,20(sp)
    5cf4:	dcc00417 	ldw	r19,16(sp)
    5cf8:	dc800317 	ldw	r18,12(sp)
    5cfc:	dc400217 	ldw	r17,8(sp)
    5d00:	dec00704 	addi	sp,sp,28
    5d04:	f800283a 	ret
    5d08:	28d3c83a 	sub	r9,r5,r3
    5d0c:	003ff206 	br	5cd8 <__ratio+0x78>

00005d10 <_mprec_log10>:
    5d10:	defffe04 	addi	sp,sp,-8
    5d14:	008005c4 	movi	r2,23
    5d18:	dc000015 	stw	r16,0(sp)
    5d1c:	dfc00115 	stw	ra,4(sp)
    5d20:	2021883a 	mov	r16,r4
    5d24:	11000c16 	blt	r2,r4,5d58 <_mprec_log10+0x48>
    5d28:	200490fa 	slli	r2,r4,3
    5d2c:	00c00074 	movhi	r3,1
    5d30:	18f4bf04 	addi	r3,r3,-11524
    5d34:	10c5883a 	add	r2,r2,r3
    5d38:	12400117 	ldw	r9,4(r2)
    5d3c:	12000017 	ldw	r8,0(r2)
    5d40:	4807883a 	mov	r3,r9
    5d44:	4005883a 	mov	r2,r8
    5d48:	dfc00117 	ldw	ra,4(sp)
    5d4c:	dc000017 	ldw	r16,0(sp)
    5d50:	dec00204 	addi	sp,sp,8
    5d54:	f800283a 	ret
    5d58:	0011883a 	mov	r8,zero
    5d5c:	024ffc34 	movhi	r9,16368
    5d60:	0005883a 	mov	r2,zero
    5d64:	00d00934 	movhi	r3,16420
    5d68:	480b883a 	mov	r5,r9
    5d6c:	4009883a 	mov	r4,r8
    5d70:	180f883a 	mov	r7,r3
    5d74:	100d883a 	mov	r6,r2
    5d78:	00086f80 	call	86f8 <__muldf3>
    5d7c:	843fffc4 	addi	r16,r16,-1
    5d80:	1011883a 	mov	r8,r2
    5d84:	1813883a 	mov	r9,r3
    5d88:	803ff51e 	bne	r16,zero,5d60 <_mprec_log10+0x50>
    5d8c:	4005883a 	mov	r2,r8
    5d90:	4807883a 	mov	r3,r9
    5d94:	dfc00117 	ldw	ra,4(sp)
    5d98:	dc000017 	ldw	r16,0(sp)
    5d9c:	dec00204 	addi	sp,sp,8
    5da0:	f800283a 	ret

00005da4 <__copybits>:
    5da4:	297fffc4 	addi	r5,r5,-1
    5da8:	30800417 	ldw	r2,16(r6)
    5dac:	280bd17a 	srai	r5,r5,5
    5db0:	31800504 	addi	r6,r6,20
    5db4:	1085883a 	add	r2,r2,r2
    5db8:	294b883a 	add	r5,r5,r5
    5dbc:	294b883a 	add	r5,r5,r5
    5dc0:	1085883a 	add	r2,r2,r2
    5dc4:	290b883a 	add	r5,r5,r4
    5dc8:	3087883a 	add	r3,r6,r2
    5dcc:	29400104 	addi	r5,r5,4
    5dd0:	30c0052e 	bgeu	r6,r3,5de8 <__copybits+0x44>
    5dd4:	30800017 	ldw	r2,0(r6)
    5dd8:	31800104 	addi	r6,r6,4
    5ddc:	20800015 	stw	r2,0(r4)
    5de0:	21000104 	addi	r4,r4,4
    5de4:	30fffb36 	bltu	r6,r3,5dd4 <__copybits+0x30>
    5de8:	2140032e 	bgeu	r4,r5,5df8 <__copybits+0x54>
    5dec:	20000015 	stw	zero,0(r4)
    5df0:	21000104 	addi	r4,r4,4
    5df4:	217ffd36 	bltu	r4,r5,5dec <__copybits+0x48>
    5df8:	f800283a 	ret

00005dfc <__any_on>:
    5dfc:	20800417 	ldw	r2,16(r4)
    5e00:	2807d17a 	srai	r3,r5,5
    5e04:	21000504 	addi	r4,r4,20
    5e08:	10c00d0e 	bge	r2,r3,5e40 <__any_on+0x44>
    5e0c:	1085883a 	add	r2,r2,r2
    5e10:	1085883a 	add	r2,r2,r2
    5e14:	208d883a 	add	r6,r4,r2
    5e18:	2180182e 	bgeu	r4,r6,5e7c <__any_on+0x80>
    5e1c:	30bfff17 	ldw	r2,-4(r6)
    5e20:	30ffff04 	addi	r3,r6,-4
    5e24:	1000041e 	bne	r2,zero,5e38 <__any_on+0x3c>
    5e28:	20c0142e 	bgeu	r4,r3,5e7c <__any_on+0x80>
    5e2c:	18ffff04 	addi	r3,r3,-4
    5e30:	18800017 	ldw	r2,0(r3)
    5e34:	103ffc26 	beq	r2,zero,5e28 <__any_on+0x2c>
    5e38:	00800044 	movi	r2,1
    5e3c:	f800283a 	ret
    5e40:	18800a0e 	bge	r3,r2,5e6c <__any_on+0x70>
    5e44:	294007cc 	andi	r5,r5,31
    5e48:	28000826 	beq	r5,zero,5e6c <__any_on+0x70>
    5e4c:	18c5883a 	add	r2,r3,r3
    5e50:	1085883a 	add	r2,r2,r2
    5e54:	208d883a 	add	r6,r4,r2
    5e58:	30c00017 	ldw	r3,0(r6)
    5e5c:	1944d83a 	srl	r2,r3,r5
    5e60:	1144983a 	sll	r2,r2,r5
    5e64:	18bff41e 	bne	r3,r2,5e38 <__any_on+0x3c>
    5e68:	003feb06 	br	5e18 <__any_on+0x1c>
    5e6c:	18c5883a 	add	r2,r3,r3
    5e70:	1085883a 	add	r2,r2,r2
    5e74:	208d883a 	add	r6,r4,r2
    5e78:	003fe706 	br	5e18 <__any_on+0x1c>
    5e7c:	0005883a 	mov	r2,zero
    5e80:	f800283a 	ret

00005e84 <_Balloc>:
    5e84:	20c01317 	ldw	r3,76(r4)
    5e88:	defffb04 	addi	sp,sp,-20
    5e8c:	dcc00315 	stw	r19,12(sp)
    5e90:	dc800215 	stw	r18,8(sp)
    5e94:	dfc00415 	stw	ra,16(sp)
    5e98:	2825883a 	mov	r18,r5
    5e9c:	dc400115 	stw	r17,4(sp)
    5ea0:	dc000015 	stw	r16,0(sp)
    5ea4:	2027883a 	mov	r19,r4
    5ea8:	01800404 	movi	r6,16
    5eac:	01400104 	movi	r5,4
    5eb0:	18001726 	beq	r3,zero,5f10 <_Balloc+0x8c>
    5eb4:	01400044 	movi	r5,1
    5eb8:	9485883a 	add	r2,r18,r18
    5ebc:	2ca2983a 	sll	r17,r5,r18
    5ec0:	1085883a 	add	r2,r2,r2
    5ec4:	10c7883a 	add	r3,r2,r3
    5ec8:	1c000017 	ldw	r16,0(r3)
    5ecc:	8c4d883a 	add	r6,r17,r17
    5ed0:	318d883a 	add	r6,r6,r6
    5ed4:	9809883a 	mov	r4,r19
    5ed8:	31800504 	addi	r6,r6,20
    5edc:	80001226 	beq	r16,zero,5f28 <_Balloc+0xa4>
    5ee0:	80800017 	ldw	r2,0(r16)
    5ee4:	18800015 	stw	r2,0(r3)
    5ee8:	80000415 	stw	zero,16(r16)
    5eec:	80000315 	stw	zero,12(r16)
    5ef0:	8005883a 	mov	r2,r16
    5ef4:	dfc00417 	ldw	ra,16(sp)
    5ef8:	dcc00317 	ldw	r19,12(sp)
    5efc:	dc800217 	ldw	r18,8(sp)
    5f00:	dc400117 	ldw	r17,4(sp)
    5f04:	dc000017 	ldw	r16,0(sp)
    5f08:	dec00504 	addi	sp,sp,20
    5f0c:	f800283a 	ret
    5f10:	000724c0 	call	724c <_calloc_r>
    5f14:	1007883a 	mov	r3,r2
    5f18:	0021883a 	mov	r16,zero
    5f1c:	98801315 	stw	r2,76(r19)
    5f20:	103fe41e 	bne	r2,zero,5eb4 <_Balloc+0x30>
    5f24:	003ff206 	br	5ef0 <_Balloc+0x6c>
    5f28:	000724c0 	call	724c <_calloc_r>
    5f2c:	103ff026 	beq	r2,zero,5ef0 <_Balloc+0x6c>
    5f30:	1021883a 	mov	r16,r2
    5f34:	14800115 	stw	r18,4(r2)
    5f38:	14400215 	stw	r17,8(r2)
    5f3c:	003fea06 	br	5ee8 <_Balloc+0x64>

00005f40 <__d2b>:
    5f40:	defff504 	addi	sp,sp,-44
    5f44:	dcc00515 	stw	r19,20(sp)
    5f48:	04c00044 	movi	r19,1
    5f4c:	dc000215 	stw	r16,8(sp)
    5f50:	2821883a 	mov	r16,r5
    5f54:	980b883a 	mov	r5,r19
    5f58:	ddc00915 	stw	r23,36(sp)
    5f5c:	dd800815 	stw	r22,32(sp)
    5f60:	dd400715 	stw	r21,28(sp)
    5f64:	dd000615 	stw	r20,24(sp)
    5f68:	dc800415 	stw	r18,16(sp)
    5f6c:	dc400315 	stw	r17,12(sp)
    5f70:	dfc00a15 	stw	ra,40(sp)
    5f74:	3023883a 	mov	r17,r6
    5f78:	382d883a 	mov	r22,r7
    5f7c:	ddc00b17 	ldw	r23,44(sp)
    5f80:	0005e840 	call	5e84 <_Balloc>
    5f84:	1025883a 	mov	r18,r2
    5f88:	00a00034 	movhi	r2,32768
    5f8c:	10bfffc4 	addi	r2,r2,-1
    5f90:	8888703a 	and	r4,r17,r2
    5f94:	202ad53a 	srli	r21,r4,20
    5f98:	00800434 	movhi	r2,16
    5f9c:	10bfffc4 	addi	r2,r2,-1
    5fa0:	8886703a 	and	r3,r17,r2
    5fa4:	a829003a 	cmpeq	r20,r21,zero
    5fa8:	800b883a 	mov	r5,r16
    5fac:	d8c00115 	stw	r3,4(sp)
    5fb0:	94000504 	addi	r16,r18,20
    5fb4:	a000021e 	bne	r20,zero,5fc0 <__d2b+0x80>
    5fb8:	18c00434 	orhi	r3,r3,16
    5fbc:	d8c00115 	stw	r3,4(sp)
    5fc0:	28002726 	beq	r5,zero,6060 <__d2b+0x120>
    5fc4:	d809883a 	mov	r4,sp
    5fc8:	d9400015 	stw	r5,0(sp)
    5fcc:	000599c0 	call	599c <__lo0bits>
    5fd0:	100d883a 	mov	r6,r2
    5fd4:	10003526 	beq	r2,zero,60ac <__d2b+0x16c>
    5fd8:	d8c00117 	ldw	r3,4(sp)
    5fdc:	00800804 	movi	r2,32
    5fe0:	1185c83a 	sub	r2,r2,r6
    5fe4:	d9000017 	ldw	r4,0(sp)
    5fe8:	1886983a 	sll	r3,r3,r2
    5fec:	1906b03a 	or	r3,r3,r4
    5ff0:	90c00515 	stw	r3,20(r18)
    5ff4:	d8c00117 	ldw	r3,4(sp)
    5ff8:	1986d83a 	srl	r3,r3,r6
    5ffc:	d8c00115 	stw	r3,4(sp)
    6000:	180b003a 	cmpeq	r5,r3,zero
    6004:	00800084 	movi	r2,2
    6008:	114bc83a 	sub	r5,r2,r5
    600c:	80c00115 	stw	r3,4(r16)
    6010:	91400415 	stw	r5,16(r18)
    6014:	a0001a1e 	bne	r20,zero,6080 <__d2b+0x140>
    6018:	3545883a 	add	r2,r6,r21
    601c:	10bef344 	addi	r2,r2,-1075
    6020:	00c00d44 	movi	r3,53
    6024:	b0800015 	stw	r2,0(r22)
    6028:	1987c83a 	sub	r3,r3,r6
    602c:	b8c00015 	stw	r3,0(r23)
    6030:	9005883a 	mov	r2,r18
    6034:	dfc00a17 	ldw	ra,40(sp)
    6038:	ddc00917 	ldw	r23,36(sp)
    603c:	dd800817 	ldw	r22,32(sp)
    6040:	dd400717 	ldw	r21,28(sp)
    6044:	dd000617 	ldw	r20,24(sp)
    6048:	dcc00517 	ldw	r19,20(sp)
    604c:	dc800417 	ldw	r18,16(sp)
    6050:	dc400317 	ldw	r17,12(sp)
    6054:	dc000217 	ldw	r16,8(sp)
    6058:	dec00b04 	addi	sp,sp,44
    605c:	f800283a 	ret
    6060:	d9000104 	addi	r4,sp,4
    6064:	000599c0 	call	599c <__lo0bits>
    6068:	11800804 	addi	r6,r2,32
    606c:	d8800117 	ldw	r2,4(sp)
    6070:	94c00415 	stw	r19,16(r18)
    6074:	980b883a 	mov	r5,r19
    6078:	90800515 	stw	r2,20(r18)
    607c:	a03fe626 	beq	r20,zero,6018 <__d2b+0xd8>
    6080:	2945883a 	add	r2,r5,r5
    6084:	1085883a 	add	r2,r2,r2
    6088:	1405883a 	add	r2,r2,r16
    608c:	113fff17 	ldw	r4,-4(r2)
    6090:	30fef384 	addi	r3,r6,-1074
    6094:	2820917a 	slli	r16,r5,5
    6098:	b0c00015 	stw	r3,0(r22)
    609c:	000592c0 	call	592c <__hi0bits>
    60a0:	80a1c83a 	sub	r16,r16,r2
    60a4:	bc000015 	stw	r16,0(r23)
    60a8:	003fe106 	br	6030 <__d2b+0xf0>
    60ac:	d8800017 	ldw	r2,0(sp)
    60b0:	90800515 	stw	r2,20(r18)
    60b4:	d8c00117 	ldw	r3,4(sp)
    60b8:	003fd106 	br	6000 <__d2b+0xc0>

000060bc <__mdiff>:
    60bc:	defffb04 	addi	sp,sp,-20
    60c0:	dc000015 	stw	r16,0(sp)
    60c4:	2821883a 	mov	r16,r5
    60c8:	dc800215 	stw	r18,8(sp)
    60cc:	300b883a 	mov	r5,r6
    60d0:	2025883a 	mov	r18,r4
    60d4:	8009883a 	mov	r4,r16
    60d8:	dc400115 	stw	r17,4(sp)
    60dc:	dfc00415 	stw	ra,16(sp)
    60e0:	dcc00315 	stw	r19,12(sp)
    60e4:	3023883a 	mov	r17,r6
    60e8:	0005a600 	call	5a60 <__mcmp>
    60ec:	10004226 	beq	r2,zero,61f8 <__mdiff+0x13c>
    60f0:	10005016 	blt	r2,zero,6234 <__mdiff+0x178>
    60f4:	0027883a 	mov	r19,zero
    60f8:	81400117 	ldw	r5,4(r16)
    60fc:	9009883a 	mov	r4,r18
    6100:	0005e840 	call	5e84 <_Balloc>
    6104:	1019883a 	mov	r12,r2
    6108:	82800417 	ldw	r10,16(r16)
    610c:	88800417 	ldw	r2,16(r17)
    6110:	81800504 	addi	r6,r16,20
    6114:	5287883a 	add	r3,r10,r10
    6118:	1085883a 	add	r2,r2,r2
    611c:	18c7883a 	add	r3,r3,r3
    6120:	1085883a 	add	r2,r2,r2
    6124:	8a000504 	addi	r8,r17,20
    6128:	64c00315 	stw	r19,12(r12)
    612c:	30db883a 	add	r13,r6,r3
    6130:	4097883a 	add	r11,r8,r2
    6134:	61c00504 	addi	r7,r12,20
    6138:	0013883a 	mov	r9,zero
    613c:	31000017 	ldw	r4,0(r6)
    6140:	41400017 	ldw	r5,0(r8)
    6144:	42000104 	addi	r8,r8,4
    6148:	20bfffcc 	andi	r2,r4,65535
    614c:	28ffffcc 	andi	r3,r5,65535
    6150:	10c5c83a 	sub	r2,r2,r3
    6154:	1245883a 	add	r2,r2,r9
    6158:	2008d43a 	srli	r4,r4,16
    615c:	280ad43a 	srli	r5,r5,16
    6160:	1007d43a 	srai	r3,r2,16
    6164:	3880000d 	sth	r2,0(r7)
    6168:	2149c83a 	sub	r4,r4,r5
    616c:	20c9883a 	add	r4,r4,r3
    6170:	3900008d 	sth	r4,2(r7)
    6174:	31800104 	addi	r6,r6,4
    6178:	39c00104 	addi	r7,r7,4
    617c:	2013d43a 	srai	r9,r4,16
    6180:	42ffee36 	bltu	r8,r11,613c <__mdiff+0x80>
    6184:	33400c2e 	bgeu	r6,r13,61b8 <__mdiff+0xfc>
    6188:	30800017 	ldw	r2,0(r6)
    618c:	31800104 	addi	r6,r6,4
    6190:	10ffffcc 	andi	r3,r2,65535
    6194:	1a47883a 	add	r3,r3,r9
    6198:	1004d43a 	srli	r2,r2,16
    619c:	1809d43a 	srai	r4,r3,16
    61a0:	38c0000d 	sth	r3,0(r7)
    61a4:	1105883a 	add	r2,r2,r4
    61a8:	3880008d 	sth	r2,2(r7)
    61ac:	1013d43a 	srai	r9,r2,16
    61b0:	39c00104 	addi	r7,r7,4
    61b4:	337ff436 	bltu	r6,r13,6188 <__mdiff+0xcc>
    61b8:	38bfff17 	ldw	r2,-4(r7)
    61bc:	38ffff04 	addi	r3,r7,-4
    61c0:	1000041e 	bne	r2,zero,61d4 <__mdiff+0x118>
    61c4:	18ffff04 	addi	r3,r3,-4
    61c8:	18800017 	ldw	r2,0(r3)
    61cc:	52bfffc4 	addi	r10,r10,-1
    61d0:	103ffc26 	beq	r2,zero,61c4 <__mdiff+0x108>
    61d4:	6005883a 	mov	r2,r12
    61d8:	62800415 	stw	r10,16(r12)
    61dc:	dfc00417 	ldw	ra,16(sp)
    61e0:	dcc00317 	ldw	r19,12(sp)
    61e4:	dc800217 	ldw	r18,8(sp)
    61e8:	dc400117 	ldw	r17,4(sp)
    61ec:	dc000017 	ldw	r16,0(sp)
    61f0:	dec00504 	addi	sp,sp,20
    61f4:	f800283a 	ret
    61f8:	9009883a 	mov	r4,r18
    61fc:	000b883a 	mov	r5,zero
    6200:	0005e840 	call	5e84 <_Balloc>
    6204:	1019883a 	mov	r12,r2
    6208:	00800044 	movi	r2,1
    620c:	60800415 	stw	r2,16(r12)
    6210:	6005883a 	mov	r2,r12
    6214:	60000515 	stw	zero,20(r12)
    6218:	dfc00417 	ldw	ra,16(sp)
    621c:	dcc00317 	ldw	r19,12(sp)
    6220:	dc800217 	ldw	r18,8(sp)
    6224:	dc400117 	ldw	r17,4(sp)
    6228:	dc000017 	ldw	r16,0(sp)
    622c:	dec00504 	addi	sp,sp,20
    6230:	f800283a 	ret
    6234:	880d883a 	mov	r6,r17
    6238:	04c00044 	movi	r19,1
    623c:	8023883a 	mov	r17,r16
    6240:	3021883a 	mov	r16,r6
    6244:	003fac06 	br	60f8 <__mdiff+0x3c>

00006248 <__lshift>:
    6248:	defff904 	addi	sp,sp,-28
    624c:	28800417 	ldw	r2,16(r5)
    6250:	dc000015 	stw	r16,0(sp)
    6254:	3021d17a 	srai	r16,r6,5
    6258:	28c00217 	ldw	r3,8(r5)
    625c:	10800044 	addi	r2,r2,1
    6260:	dc400115 	stw	r17,4(sp)
    6264:	80a3883a 	add	r17,r16,r2
    6268:	dd400515 	stw	r21,20(sp)
    626c:	dd000415 	stw	r20,16(sp)
    6270:	dc800215 	stw	r18,8(sp)
    6274:	dfc00615 	stw	ra,24(sp)
    6278:	2825883a 	mov	r18,r5
    627c:	dcc00315 	stw	r19,12(sp)
    6280:	3029883a 	mov	r20,r6
    6284:	202b883a 	mov	r21,r4
    6288:	29400117 	ldw	r5,4(r5)
    628c:	1c40030e 	bge	r3,r17,629c <__lshift+0x54>
    6290:	18c7883a 	add	r3,r3,r3
    6294:	29400044 	addi	r5,r5,1
    6298:	1c7ffd16 	blt	r3,r17,6290 <__lshift+0x48>
    629c:	a809883a 	mov	r4,r21
    62a0:	0005e840 	call	5e84 <_Balloc>
    62a4:	1027883a 	mov	r19,r2
    62a8:	11400504 	addi	r5,r2,20
    62ac:	0400090e 	bge	zero,r16,62d4 <__lshift+0x8c>
    62b0:	2805883a 	mov	r2,r5
    62b4:	0007883a 	mov	r3,zero
    62b8:	18c00044 	addi	r3,r3,1
    62bc:	10000015 	stw	zero,0(r2)
    62c0:	10800104 	addi	r2,r2,4
    62c4:	80fffc1e 	bne	r16,r3,62b8 <__lshift+0x70>
    62c8:	8405883a 	add	r2,r16,r16
    62cc:	1085883a 	add	r2,r2,r2
    62d0:	288b883a 	add	r5,r5,r2
    62d4:	90800417 	ldw	r2,16(r18)
    62d8:	91000504 	addi	r4,r18,20
    62dc:	a18007cc 	andi	r6,r20,31
    62e0:	1085883a 	add	r2,r2,r2
    62e4:	1085883a 	add	r2,r2,r2
    62e8:	208f883a 	add	r7,r4,r2
    62ec:	30001e26 	beq	r6,zero,6368 <__lshift+0x120>
    62f0:	00800804 	movi	r2,32
    62f4:	1191c83a 	sub	r8,r2,r6
    62f8:	0007883a 	mov	r3,zero
    62fc:	20800017 	ldw	r2,0(r4)
    6300:	1184983a 	sll	r2,r2,r6
    6304:	1884b03a 	or	r2,r3,r2
    6308:	28800015 	stw	r2,0(r5)
    630c:	20c00017 	ldw	r3,0(r4)
    6310:	21000104 	addi	r4,r4,4
    6314:	29400104 	addi	r5,r5,4
    6318:	1a06d83a 	srl	r3,r3,r8
    631c:	21fff736 	bltu	r4,r7,62fc <__lshift+0xb4>
    6320:	28c00015 	stw	r3,0(r5)
    6324:	18000126 	beq	r3,zero,632c <__lshift+0xe4>
    6328:	8c400044 	addi	r17,r17,1
    632c:	88bfffc4 	addi	r2,r17,-1
    6330:	98800415 	stw	r2,16(r19)
    6334:	a809883a 	mov	r4,r21
    6338:	900b883a 	mov	r5,r18
    633c:	00059040 	call	5904 <_Bfree>
    6340:	9805883a 	mov	r2,r19
    6344:	dfc00617 	ldw	ra,24(sp)
    6348:	dd400517 	ldw	r21,20(sp)
    634c:	dd000417 	ldw	r20,16(sp)
    6350:	dcc00317 	ldw	r19,12(sp)
    6354:	dc800217 	ldw	r18,8(sp)
    6358:	dc400117 	ldw	r17,4(sp)
    635c:	dc000017 	ldw	r16,0(sp)
    6360:	dec00704 	addi	sp,sp,28
    6364:	f800283a 	ret
    6368:	20800017 	ldw	r2,0(r4)
    636c:	21000104 	addi	r4,r4,4
    6370:	28800015 	stw	r2,0(r5)
    6374:	29400104 	addi	r5,r5,4
    6378:	21ffec2e 	bgeu	r4,r7,632c <__lshift+0xe4>
    637c:	20800017 	ldw	r2,0(r4)
    6380:	21000104 	addi	r4,r4,4
    6384:	28800015 	stw	r2,0(r5)
    6388:	29400104 	addi	r5,r5,4
    638c:	21fff636 	bltu	r4,r7,6368 <__lshift+0x120>
    6390:	003fe606 	br	632c <__lshift+0xe4>

00006394 <__multiply>:
    6394:	defff904 	addi	sp,sp,-28
    6398:	dcc00315 	stw	r19,12(sp)
    639c:	dc800215 	stw	r18,8(sp)
    63a0:	2cc00417 	ldw	r19,16(r5)
    63a4:	34800417 	ldw	r18,16(r6)
    63a8:	dd000415 	stw	r20,16(sp)
    63ac:	dc400115 	stw	r17,4(sp)
    63b0:	dfc00615 	stw	ra,24(sp)
    63b4:	dd400515 	stw	r21,20(sp)
    63b8:	dc000015 	stw	r16,0(sp)
    63bc:	2823883a 	mov	r17,r5
    63c0:	3029883a 	mov	r20,r6
    63c4:	9c80040e 	bge	r19,r18,63d8 <__multiply+0x44>
    63c8:	9027883a 	mov	r19,r18
    63cc:	2c800417 	ldw	r18,16(r5)
    63d0:	2829883a 	mov	r20,r5
    63d4:	3023883a 	mov	r17,r6
    63d8:	88800217 	ldw	r2,8(r17)
    63dc:	9ca1883a 	add	r16,r19,r18
    63e0:	89400117 	ldw	r5,4(r17)
    63e4:	1400010e 	bge	r2,r16,63ec <__multiply+0x58>
    63e8:	29400044 	addi	r5,r5,1
    63ec:	0005e840 	call	5e84 <_Balloc>
    63f0:	102b883a 	mov	r21,r2
    63f4:	8405883a 	add	r2,r16,r16
    63f8:	1085883a 	add	r2,r2,r2
    63fc:	a9000504 	addi	r4,r21,20
    6400:	209d883a 	add	r14,r4,r2
    6404:	2380042e 	bgeu	r4,r14,6418 <__multiply+0x84>
    6408:	2005883a 	mov	r2,r4
    640c:	10000015 	stw	zero,0(r2)
    6410:	10800104 	addi	r2,r2,4
    6414:	13bffd36 	bltu	r2,r14,640c <__multiply+0x78>
    6418:	9485883a 	add	r2,r18,r18
    641c:	9cc7883a 	add	r3,r19,r19
    6420:	a1800504 	addi	r6,r20,20
    6424:	1085883a 	add	r2,r2,r2
    6428:	8b400504 	addi	r13,r17,20
    642c:	18c7883a 	add	r3,r3,r3
    6430:	309f883a 	add	r15,r6,r2
    6434:	68d7883a 	add	r11,r13,r3
    6438:	33c03b2e 	bgeu	r6,r15,6528 <__multiply+0x194>
    643c:	2019883a 	mov	r12,r4
    6440:	30800017 	ldw	r2,0(r6)
    6444:	127fffcc 	andi	r9,r2,65535
    6448:	48001826 	beq	r9,zero,64ac <__multiply+0x118>
    644c:	6811883a 	mov	r8,r13
    6450:	600f883a 	mov	r7,r12
    6454:	0015883a 	mov	r10,zero
    6458:	40c00017 	ldw	r3,0(r8)
    645c:	39400017 	ldw	r5,0(r7)
    6460:	42000104 	addi	r8,r8,4
    6464:	193fffcc 	andi	r4,r3,65535
    6468:	4909383a 	mul	r4,r9,r4
    646c:	1806d43a 	srli	r3,r3,16
    6470:	28bfffcc 	andi	r2,r5,65535
    6474:	5085883a 	add	r2,r10,r2
    6478:	2089883a 	add	r4,r4,r2
    647c:	48c7383a 	mul	r3,r9,r3
    6480:	280ad43a 	srli	r5,r5,16
    6484:	2004d43a 	srli	r2,r4,16
    6488:	3900000d 	sth	r4,0(r7)
    648c:	1947883a 	add	r3,r3,r5
    6490:	10c5883a 	add	r2,r2,r3
    6494:	3880008d 	sth	r2,2(r7)
    6498:	1014d43a 	srli	r10,r2,16
    649c:	39c00104 	addi	r7,r7,4
    64a0:	42ffed36 	bltu	r8,r11,6458 <__multiply+0xc4>
    64a4:	3a800015 	stw	r10,0(r7)
    64a8:	30800017 	ldw	r2,0(r6)
    64ac:	1012d43a 	srli	r9,r2,16
    64b0:	48001926 	beq	r9,zero,6518 <__multiply+0x184>
    64b4:	60800017 	ldw	r2,0(r12)
    64b8:	6811883a 	mov	r8,r13
    64bc:	600f883a 	mov	r7,r12
    64c0:	0015883a 	mov	r10,zero
    64c4:	100b883a 	mov	r5,r2
    64c8:	41000017 	ldw	r4,0(r8)
    64cc:	2806d43a 	srli	r3,r5,16
    64d0:	3880000d 	sth	r2,0(r7)
    64d4:	20bfffcc 	andi	r2,r4,65535
    64d8:	4885383a 	mul	r2,r9,r2
    64dc:	50c7883a 	add	r3,r10,r3
    64e0:	2008d43a 	srli	r4,r4,16
    64e4:	10c5883a 	add	r2,r2,r3
    64e8:	3880008d 	sth	r2,2(r7)
    64ec:	39c00104 	addi	r7,r7,4
    64f0:	39400017 	ldw	r5,0(r7)
    64f4:	4909383a 	mul	r4,r9,r4
    64f8:	1004d43a 	srli	r2,r2,16
    64fc:	28ffffcc 	andi	r3,r5,65535
    6500:	20c9883a 	add	r4,r4,r3
    6504:	1105883a 	add	r2,r2,r4
    6508:	42000104 	addi	r8,r8,4
    650c:	1014d43a 	srli	r10,r2,16
    6510:	42ffed36 	bltu	r8,r11,64c8 <__multiply+0x134>
    6514:	38800015 	stw	r2,0(r7)
    6518:	31800104 	addi	r6,r6,4
    651c:	33c0022e 	bgeu	r6,r15,6528 <__multiply+0x194>
    6520:	63000104 	addi	r12,r12,4
    6524:	003fc606 	br	6440 <__multiply+0xac>
    6528:	0400090e 	bge	zero,r16,6550 <__multiply+0x1bc>
    652c:	70bfff17 	ldw	r2,-4(r14)
    6530:	70ffff04 	addi	r3,r14,-4
    6534:	10000326 	beq	r2,zero,6544 <__multiply+0x1b0>
    6538:	00000506 	br	6550 <__multiply+0x1bc>
    653c:	18800017 	ldw	r2,0(r3)
    6540:	1000031e 	bne	r2,zero,6550 <__multiply+0x1bc>
    6544:	843fffc4 	addi	r16,r16,-1
    6548:	18ffff04 	addi	r3,r3,-4
    654c:	803ffb1e 	bne	r16,zero,653c <__multiply+0x1a8>
    6550:	a805883a 	mov	r2,r21
    6554:	ac000415 	stw	r16,16(r21)
    6558:	dfc00617 	ldw	ra,24(sp)
    655c:	dd400517 	ldw	r21,20(sp)
    6560:	dd000417 	ldw	r20,16(sp)
    6564:	dcc00317 	ldw	r19,12(sp)
    6568:	dc800217 	ldw	r18,8(sp)
    656c:	dc400117 	ldw	r17,4(sp)
    6570:	dc000017 	ldw	r16,0(sp)
    6574:	dec00704 	addi	sp,sp,28
    6578:	f800283a 	ret

0000657c <__i2b>:
    657c:	defffd04 	addi	sp,sp,-12
    6580:	dc000015 	stw	r16,0(sp)
    6584:	04000044 	movi	r16,1
    6588:	dc800115 	stw	r18,4(sp)
    658c:	2825883a 	mov	r18,r5
    6590:	800b883a 	mov	r5,r16
    6594:	dfc00215 	stw	ra,8(sp)
    6598:	0005e840 	call	5e84 <_Balloc>
    659c:	14000415 	stw	r16,16(r2)
    65a0:	14800515 	stw	r18,20(r2)
    65a4:	dfc00217 	ldw	ra,8(sp)
    65a8:	dc800117 	ldw	r18,4(sp)
    65ac:	dc000017 	ldw	r16,0(sp)
    65b0:	dec00304 	addi	sp,sp,12
    65b4:	f800283a 	ret

000065b8 <__multadd>:
    65b8:	defffa04 	addi	sp,sp,-24
    65bc:	dc800215 	stw	r18,8(sp)
    65c0:	2c800417 	ldw	r18,16(r5)
    65c4:	dd000415 	stw	r20,16(sp)
    65c8:	dcc00315 	stw	r19,12(sp)
    65cc:	dc000015 	stw	r16,0(sp)
    65d0:	dfc00515 	stw	ra,20(sp)
    65d4:	3821883a 	mov	r16,r7
    65d8:	dc400115 	stw	r17,4(sp)
    65dc:	2827883a 	mov	r19,r5
    65e0:	2029883a 	mov	r20,r4
    65e4:	2a000504 	addi	r8,r5,20
    65e8:	000f883a 	mov	r7,zero
    65ec:	40800017 	ldw	r2,0(r8)
    65f0:	39c00044 	addi	r7,r7,1
    65f4:	10ffffcc 	andi	r3,r2,65535
    65f8:	1987383a 	mul	r3,r3,r6
    65fc:	1004d43a 	srli	r2,r2,16
    6600:	1c07883a 	add	r3,r3,r16
    6604:	180ad43a 	srli	r5,r3,16
    6608:	1185383a 	mul	r2,r2,r6
    660c:	18ffffcc 	andi	r3,r3,65535
    6610:	1145883a 	add	r2,r2,r5
    6614:	1008943a 	slli	r4,r2,16
    6618:	1020d43a 	srli	r16,r2,16
    661c:	20c9883a 	add	r4,r4,r3
    6620:	41000015 	stw	r4,0(r8)
    6624:	42000104 	addi	r8,r8,4
    6628:	3cbff016 	blt	r7,r18,65ec <__multadd+0x34>
    662c:	80000826 	beq	r16,zero,6650 <__multadd+0x98>
    6630:	98800217 	ldw	r2,8(r19)
    6634:	90800f0e 	bge	r18,r2,6674 <__multadd+0xbc>
    6638:	9485883a 	add	r2,r18,r18
    663c:	1085883a 	add	r2,r2,r2
    6640:	14c5883a 	add	r2,r2,r19
    6644:	90c00044 	addi	r3,r18,1
    6648:	14000515 	stw	r16,20(r2)
    664c:	98c00415 	stw	r3,16(r19)
    6650:	9805883a 	mov	r2,r19
    6654:	dfc00517 	ldw	ra,20(sp)
    6658:	dd000417 	ldw	r20,16(sp)
    665c:	dcc00317 	ldw	r19,12(sp)
    6660:	dc800217 	ldw	r18,8(sp)
    6664:	dc400117 	ldw	r17,4(sp)
    6668:	dc000017 	ldw	r16,0(sp)
    666c:	dec00604 	addi	sp,sp,24
    6670:	f800283a 	ret
    6674:	99400117 	ldw	r5,4(r19)
    6678:	a009883a 	mov	r4,r20
    667c:	29400044 	addi	r5,r5,1
    6680:	0005e840 	call	5e84 <_Balloc>
    6684:	99800417 	ldw	r6,16(r19)
    6688:	99400304 	addi	r5,r19,12
    668c:	11000304 	addi	r4,r2,12
    6690:	318d883a 	add	r6,r6,r6
    6694:	318d883a 	add	r6,r6,r6
    6698:	31800204 	addi	r6,r6,8
    669c:	1023883a 	mov	r17,r2
    66a0:	00057840 	call	5784 <memcpy>
    66a4:	980b883a 	mov	r5,r19
    66a8:	a009883a 	mov	r4,r20
    66ac:	00059040 	call	5904 <_Bfree>
    66b0:	8827883a 	mov	r19,r17
    66b4:	003fe006 	br	6638 <__multadd+0x80>

000066b8 <__pow5mult>:
    66b8:	defffa04 	addi	sp,sp,-24
    66bc:	308000cc 	andi	r2,r6,3
    66c0:	dd000415 	stw	r20,16(sp)
    66c4:	dcc00315 	stw	r19,12(sp)
    66c8:	dc000015 	stw	r16,0(sp)
    66cc:	dfc00515 	stw	ra,20(sp)
    66d0:	dc800215 	stw	r18,8(sp)
    66d4:	dc400115 	stw	r17,4(sp)
    66d8:	3021883a 	mov	r16,r6
    66dc:	2027883a 	mov	r19,r4
    66e0:	2829883a 	mov	r20,r5
    66e4:	10002b1e 	bne	r2,zero,6794 <__pow5mult+0xdc>
    66e8:	8025d0ba 	srai	r18,r16,2
    66ec:	90001b26 	beq	r18,zero,675c <__pow5mult+0xa4>
    66f0:	9c001217 	ldw	r16,72(r19)
    66f4:	8000081e 	bne	r16,zero,6718 <__pow5mult+0x60>
    66f8:	00003006 	br	67bc <__pow5mult+0x104>
    66fc:	800b883a 	mov	r5,r16
    6700:	800d883a 	mov	r6,r16
    6704:	9809883a 	mov	r4,r19
    6708:	90001426 	beq	r18,zero,675c <__pow5mult+0xa4>
    670c:	80800017 	ldw	r2,0(r16)
    6710:	10001b26 	beq	r2,zero,6780 <__pow5mult+0xc8>
    6714:	1021883a 	mov	r16,r2
    6718:	9080004c 	andi	r2,r18,1
    671c:	1005003a 	cmpeq	r2,r2,zero
    6720:	9025d07a 	srai	r18,r18,1
    6724:	800d883a 	mov	r6,r16
    6728:	9809883a 	mov	r4,r19
    672c:	a00b883a 	mov	r5,r20
    6730:	103ff21e 	bne	r2,zero,66fc <__pow5mult+0x44>
    6734:	00063940 	call	6394 <__multiply>
    6738:	a00b883a 	mov	r5,r20
    673c:	9809883a 	mov	r4,r19
    6740:	1023883a 	mov	r17,r2
    6744:	00059040 	call	5904 <_Bfree>
    6748:	8829883a 	mov	r20,r17
    674c:	800b883a 	mov	r5,r16
    6750:	800d883a 	mov	r6,r16
    6754:	9809883a 	mov	r4,r19
    6758:	903fec1e 	bne	r18,zero,670c <__pow5mult+0x54>
    675c:	a005883a 	mov	r2,r20
    6760:	dfc00517 	ldw	ra,20(sp)
    6764:	dd000417 	ldw	r20,16(sp)
    6768:	dcc00317 	ldw	r19,12(sp)
    676c:	dc800217 	ldw	r18,8(sp)
    6770:	dc400117 	ldw	r17,4(sp)
    6774:	dc000017 	ldw	r16,0(sp)
    6778:	dec00604 	addi	sp,sp,24
    677c:	f800283a 	ret
    6780:	00063940 	call	6394 <__multiply>
    6784:	80800015 	stw	r2,0(r16)
    6788:	1021883a 	mov	r16,r2
    678c:	10000015 	stw	zero,0(r2)
    6790:	003fe106 	br	6718 <__pow5mult+0x60>
    6794:	1085883a 	add	r2,r2,r2
    6798:	00c00074 	movhi	r3,1
    679c:	18f50504 	addi	r3,r3,-11244
    67a0:	1085883a 	add	r2,r2,r2
    67a4:	10c5883a 	add	r2,r2,r3
    67a8:	11bfff17 	ldw	r6,-4(r2)
    67ac:	000f883a 	mov	r7,zero
    67b0:	00065b80 	call	65b8 <__multadd>
    67b4:	1029883a 	mov	r20,r2
    67b8:	003fcb06 	br	66e8 <__pow5mult+0x30>
    67bc:	9809883a 	mov	r4,r19
    67c0:	01409c44 	movi	r5,625
    67c4:	000657c0 	call	657c <__i2b>
    67c8:	98801215 	stw	r2,72(r19)
    67cc:	1021883a 	mov	r16,r2
    67d0:	10000015 	stw	zero,0(r2)
    67d4:	003fd006 	br	6718 <__pow5mult+0x60>

000067d8 <__s2b>:
    67d8:	defff904 	addi	sp,sp,-28
    67dc:	dcc00315 	stw	r19,12(sp)
    67e0:	dc800215 	stw	r18,8(sp)
    67e4:	2827883a 	mov	r19,r5
    67e8:	2025883a 	mov	r18,r4
    67ec:	01400244 	movi	r5,9
    67f0:	39000204 	addi	r4,r7,8
    67f4:	dd000415 	stw	r20,16(sp)
    67f8:	dc400115 	stw	r17,4(sp)
    67fc:	dfc00615 	stw	ra,24(sp)
    6800:	dd400515 	stw	r21,20(sp)
    6804:	dc000015 	stw	r16,0(sp)
    6808:	3829883a 	mov	r20,r7
    680c:	3023883a 	mov	r17,r6
    6810:	000939c0 	call	939c <__divsi3>
    6814:	00c00044 	movi	r3,1
    6818:	1880350e 	bge	r3,r2,68f0 <__s2b+0x118>
    681c:	000b883a 	mov	r5,zero
    6820:	18c7883a 	add	r3,r3,r3
    6824:	29400044 	addi	r5,r5,1
    6828:	18bffd16 	blt	r3,r2,6820 <__s2b+0x48>
    682c:	9009883a 	mov	r4,r18
    6830:	0005e840 	call	5e84 <_Balloc>
    6834:	1011883a 	mov	r8,r2
    6838:	d8800717 	ldw	r2,28(sp)
    683c:	00c00044 	movi	r3,1
    6840:	01800244 	movi	r6,9
    6844:	40800515 	stw	r2,20(r8)
    6848:	40c00415 	stw	r3,16(r8)
    684c:	3440260e 	bge	r6,r17,68e8 <__s2b+0x110>
    6850:	3021883a 	mov	r16,r6
    6854:	99ab883a 	add	r21,r19,r6
    6858:	9c05883a 	add	r2,r19,r16
    685c:	11c00007 	ldb	r7,0(r2)
    6860:	400b883a 	mov	r5,r8
    6864:	9009883a 	mov	r4,r18
    6868:	39fff404 	addi	r7,r7,-48
    686c:	01800284 	movi	r6,10
    6870:	00065b80 	call	65b8 <__multadd>
    6874:	84000044 	addi	r16,r16,1
    6878:	1011883a 	mov	r8,r2
    687c:	8c3ff61e 	bne	r17,r16,6858 <__s2b+0x80>
    6880:	ac45883a 	add	r2,r21,r17
    6884:	117ffe04 	addi	r5,r2,-8
    6888:	880d883a 	mov	r6,r17
    688c:	35000c0e 	bge	r6,r20,68c0 <__s2b+0xe8>
    6890:	a185c83a 	sub	r2,r20,r6
    6894:	2821883a 	mov	r16,r5
    6898:	28a3883a 	add	r17,r5,r2
    689c:	81c00007 	ldb	r7,0(r16)
    68a0:	400b883a 	mov	r5,r8
    68a4:	9009883a 	mov	r4,r18
    68a8:	39fff404 	addi	r7,r7,-48
    68ac:	01800284 	movi	r6,10
    68b0:	00065b80 	call	65b8 <__multadd>
    68b4:	84000044 	addi	r16,r16,1
    68b8:	1011883a 	mov	r8,r2
    68bc:	847ff71e 	bne	r16,r17,689c <__s2b+0xc4>
    68c0:	4005883a 	mov	r2,r8
    68c4:	dfc00617 	ldw	ra,24(sp)
    68c8:	dd400517 	ldw	r21,20(sp)
    68cc:	dd000417 	ldw	r20,16(sp)
    68d0:	dcc00317 	ldw	r19,12(sp)
    68d4:	dc800217 	ldw	r18,8(sp)
    68d8:	dc400117 	ldw	r17,4(sp)
    68dc:	dc000017 	ldw	r16,0(sp)
    68e0:	dec00704 	addi	sp,sp,28
    68e4:	f800283a 	ret
    68e8:	99400284 	addi	r5,r19,10
    68ec:	003fe706 	br	688c <__s2b+0xb4>
    68f0:	000b883a 	mov	r5,zero
    68f4:	003fcd06 	br	682c <__s2b+0x54>

000068f8 <_realloc_r>:
    68f8:	defff404 	addi	sp,sp,-48
    68fc:	dd800815 	stw	r22,32(sp)
    6900:	dc800415 	stw	r18,16(sp)
    6904:	dc400315 	stw	r17,12(sp)
    6908:	dfc00b15 	stw	ra,44(sp)
    690c:	df000a15 	stw	fp,40(sp)
    6910:	ddc00915 	stw	r23,36(sp)
    6914:	dd400715 	stw	r21,28(sp)
    6918:	dd000615 	stw	r20,24(sp)
    691c:	dcc00515 	stw	r19,20(sp)
    6920:	dc000215 	stw	r16,8(sp)
    6924:	2825883a 	mov	r18,r5
    6928:	3023883a 	mov	r17,r6
    692c:	202d883a 	mov	r22,r4
    6930:	2800c926 	beq	r5,zero,6c58 <_realloc_r+0x360>
    6934:	000a1000 	call	a100 <__malloc_lock>
    6938:	943ffe04 	addi	r16,r18,-8
    693c:	88c002c4 	addi	r3,r17,11
    6940:	00800584 	movi	r2,22
    6944:	82000117 	ldw	r8,4(r16)
    6948:	10c01b2e 	bgeu	r2,r3,69b8 <_realloc_r+0xc0>
    694c:	00bffe04 	movi	r2,-8
    6950:	188e703a 	and	r7,r3,r2
    6954:	3839883a 	mov	fp,r7
    6958:	38001a16 	blt	r7,zero,69c4 <_realloc_r+0xcc>
    695c:	e4401936 	bltu	fp,r17,69c4 <_realloc_r+0xcc>
    6960:	013fff04 	movi	r4,-4
    6964:	4126703a 	and	r19,r8,r4
    6968:	99c02616 	blt	r19,r7,6a04 <_realloc_r+0x10c>
    696c:	802b883a 	mov	r21,r16
    6970:	9829883a 	mov	r20,r19
    6974:	84000204 	addi	r16,r16,8
    6978:	a80f883a 	mov	r7,r21
    697c:	a70dc83a 	sub	r6,r20,fp
    6980:	008003c4 	movi	r2,15
    6984:	1180c136 	bltu	r2,r6,6c8c <_realloc_r+0x394>
    6988:	38800117 	ldw	r2,4(r7)
    698c:	a549883a 	add	r4,r20,r21
    6990:	1080004c 	andi	r2,r2,1
    6994:	a084b03a 	or	r2,r20,r2
    6998:	38800115 	stw	r2,4(r7)
    699c:	20c00117 	ldw	r3,4(r4)
    69a0:	18c00054 	ori	r3,r3,1
    69a4:	20c00115 	stw	r3,4(r4)
    69a8:	b009883a 	mov	r4,r22
    69ac:	000a1200 	call	a120 <__malloc_unlock>
    69b0:	8023883a 	mov	r17,r16
    69b4:	00000606 	br	69d0 <_realloc_r+0xd8>
    69b8:	01c00404 	movi	r7,16
    69bc:	3839883a 	mov	fp,r7
    69c0:	e47fe72e 	bgeu	fp,r17,6960 <_realloc_r+0x68>
    69c4:	00800304 	movi	r2,12
    69c8:	0023883a 	mov	r17,zero
    69cc:	b0800015 	stw	r2,0(r22)
    69d0:	8805883a 	mov	r2,r17
    69d4:	dfc00b17 	ldw	ra,44(sp)
    69d8:	df000a17 	ldw	fp,40(sp)
    69dc:	ddc00917 	ldw	r23,36(sp)
    69e0:	dd800817 	ldw	r22,32(sp)
    69e4:	dd400717 	ldw	r21,28(sp)
    69e8:	dd000617 	ldw	r20,24(sp)
    69ec:	dcc00517 	ldw	r19,20(sp)
    69f0:	dc800417 	ldw	r18,16(sp)
    69f4:	dc400317 	ldw	r17,12(sp)
    69f8:	dc000217 	ldw	r16,8(sp)
    69fc:	dec00c04 	addi	sp,sp,48
    6a00:	f800283a 	ret
    6a04:	00800074 	movhi	r2,1
    6a08:	10b65c04 	addi	r2,r2,-9872
    6a0c:	12400217 	ldw	r9,8(r2)
    6a10:	84cd883a 	add	r6,r16,r19
    6a14:	802b883a 	mov	r21,r16
    6a18:	3240b926 	beq	r6,r9,6d00 <_realloc_r+0x408>
    6a1c:	31400117 	ldw	r5,4(r6)
    6a20:	00bfff84 	movi	r2,-2
    6a24:	2884703a 	and	r2,r5,r2
    6a28:	1185883a 	add	r2,r2,r6
    6a2c:	10c00117 	ldw	r3,4(r2)
    6a30:	18c0004c 	andi	r3,r3,1
    6a34:	1807003a 	cmpeq	r3,r3,zero
    6a38:	1800a326 	beq	r3,zero,6cc8 <_realloc_r+0x3d0>
    6a3c:	2908703a 	and	r4,r5,r4
    6a40:	9929883a 	add	r20,r19,r4
    6a44:	a1c0a30e 	bge	r20,r7,6cd4 <_realloc_r+0x3dc>
    6a48:	4080004c 	andi	r2,r8,1
    6a4c:	1000551e 	bne	r2,zero,6ba4 <_realloc_r+0x2ac>
    6a50:	80800017 	ldw	r2,0(r16)
    6a54:	80afc83a 	sub	r23,r16,r2
    6a58:	b8c00117 	ldw	r3,4(r23)
    6a5c:	00bfff04 	movi	r2,-4
    6a60:	1884703a 	and	r2,r3,r2
    6a64:	30002e26 	beq	r6,zero,6b20 <_realloc_r+0x228>
    6a68:	3240b926 	beq	r6,r9,6d50 <_realloc_r+0x458>
    6a6c:	98a9883a 	add	r20,r19,r2
    6a70:	2509883a 	add	r4,r4,r20
    6a74:	d9000015 	stw	r4,0(sp)
    6a78:	21c02a16 	blt	r4,r7,6b24 <_realloc_r+0x22c>
    6a7c:	30800317 	ldw	r2,12(r6)
    6a80:	30c00217 	ldw	r3,8(r6)
    6a84:	01400904 	movi	r5,36
    6a88:	99bfff04 	addi	r6,r19,-4
    6a8c:	18800315 	stw	r2,12(r3)
    6a90:	10c00215 	stw	r3,8(r2)
    6a94:	b9000317 	ldw	r4,12(r23)
    6a98:	b8800217 	ldw	r2,8(r23)
    6a9c:	b82b883a 	mov	r21,r23
    6aa0:	bc000204 	addi	r16,r23,8
    6aa4:	20800215 	stw	r2,8(r4)
    6aa8:	11000315 	stw	r4,12(r2)
    6aac:	2980e436 	bltu	r5,r6,6e40 <_realloc_r+0x548>
    6ab0:	008004c4 	movi	r2,19
    6ab4:	9009883a 	mov	r4,r18
    6ab8:	8011883a 	mov	r8,r16
    6abc:	11800f2e 	bgeu	r2,r6,6afc <_realloc_r+0x204>
    6ac0:	90800017 	ldw	r2,0(r18)
    6ac4:	ba000404 	addi	r8,r23,16
    6ac8:	91000204 	addi	r4,r18,8
    6acc:	b8800215 	stw	r2,8(r23)
    6ad0:	90c00117 	ldw	r3,4(r18)
    6ad4:	008006c4 	movi	r2,27
    6ad8:	b8c00315 	stw	r3,12(r23)
    6adc:	1180072e 	bgeu	r2,r6,6afc <_realloc_r+0x204>
    6ae0:	90c00217 	ldw	r3,8(r18)
    6ae4:	ba000604 	addi	r8,r23,24
    6ae8:	91000404 	addi	r4,r18,16
    6aec:	b8c00415 	stw	r3,16(r23)
    6af0:	90800317 	ldw	r2,12(r18)
    6af4:	b8800515 	stw	r2,20(r23)
    6af8:	3140e726 	beq	r6,r5,6e98 <_realloc_r+0x5a0>
    6afc:	20800017 	ldw	r2,0(r4)
    6b00:	dd000017 	ldw	r20,0(sp)
    6b04:	b80f883a 	mov	r7,r23
    6b08:	40800015 	stw	r2,0(r8)
    6b0c:	20c00117 	ldw	r3,4(r4)
    6b10:	40c00115 	stw	r3,4(r8)
    6b14:	20800217 	ldw	r2,8(r4)
    6b18:	40800215 	stw	r2,8(r8)
    6b1c:	003f9706 	br	697c <_realloc_r+0x84>
    6b20:	98a9883a 	add	r20,r19,r2
    6b24:	a1c01f16 	blt	r20,r7,6ba4 <_realloc_r+0x2ac>
    6b28:	b8c00317 	ldw	r3,12(r23)
    6b2c:	b8800217 	ldw	r2,8(r23)
    6b30:	99bfff04 	addi	r6,r19,-4
    6b34:	01400904 	movi	r5,36
    6b38:	b82b883a 	mov	r21,r23
    6b3c:	18800215 	stw	r2,8(r3)
    6b40:	10c00315 	stw	r3,12(r2)
    6b44:	bc000204 	addi	r16,r23,8
    6b48:	2980c336 	bltu	r5,r6,6e58 <_realloc_r+0x560>
    6b4c:	008004c4 	movi	r2,19
    6b50:	9009883a 	mov	r4,r18
    6b54:	8011883a 	mov	r8,r16
    6b58:	11800f2e 	bgeu	r2,r6,6b98 <_realloc_r+0x2a0>
    6b5c:	90800017 	ldw	r2,0(r18)
    6b60:	ba000404 	addi	r8,r23,16
    6b64:	91000204 	addi	r4,r18,8
    6b68:	b8800215 	stw	r2,8(r23)
    6b6c:	90c00117 	ldw	r3,4(r18)
    6b70:	008006c4 	movi	r2,27
    6b74:	b8c00315 	stw	r3,12(r23)
    6b78:	1180072e 	bgeu	r2,r6,6b98 <_realloc_r+0x2a0>
    6b7c:	90c00217 	ldw	r3,8(r18)
    6b80:	ba000604 	addi	r8,r23,24
    6b84:	91000404 	addi	r4,r18,16
    6b88:	b8c00415 	stw	r3,16(r23)
    6b8c:	90800317 	ldw	r2,12(r18)
    6b90:	b8800515 	stw	r2,20(r23)
    6b94:	3140c726 	beq	r6,r5,6eb4 <_realloc_r+0x5bc>
    6b98:	20800017 	ldw	r2,0(r4)
    6b9c:	b80f883a 	mov	r7,r23
    6ba0:	003fd906 	br	6b08 <_realloc_r+0x210>
    6ba4:	880b883a 	mov	r5,r17
    6ba8:	b009883a 	mov	r4,r22
    6bac:	0004f600 	call	4f60 <_malloc_r>
    6bb0:	1023883a 	mov	r17,r2
    6bb4:	10002526 	beq	r2,zero,6c4c <_realloc_r+0x354>
    6bb8:	80800117 	ldw	r2,4(r16)
    6bbc:	00ffff84 	movi	r3,-2
    6bc0:	893ffe04 	addi	r4,r17,-8
    6bc4:	10c4703a 	and	r2,r2,r3
    6bc8:	8085883a 	add	r2,r16,r2
    6bcc:	20809526 	beq	r4,r2,6e24 <_realloc_r+0x52c>
    6bd0:	99bfff04 	addi	r6,r19,-4
    6bd4:	01c00904 	movi	r7,36
    6bd8:	39804536 	bltu	r7,r6,6cf0 <_realloc_r+0x3f8>
    6bdc:	008004c4 	movi	r2,19
    6be0:	9009883a 	mov	r4,r18
    6be4:	880b883a 	mov	r5,r17
    6be8:	11800f2e 	bgeu	r2,r6,6c28 <_realloc_r+0x330>
    6bec:	90800017 	ldw	r2,0(r18)
    6bf0:	89400204 	addi	r5,r17,8
    6bf4:	91000204 	addi	r4,r18,8
    6bf8:	88800015 	stw	r2,0(r17)
    6bfc:	90c00117 	ldw	r3,4(r18)
    6c00:	008006c4 	movi	r2,27
    6c04:	88c00115 	stw	r3,4(r17)
    6c08:	1180072e 	bgeu	r2,r6,6c28 <_realloc_r+0x330>
    6c0c:	90c00217 	ldw	r3,8(r18)
    6c10:	89400404 	addi	r5,r17,16
    6c14:	91000404 	addi	r4,r18,16
    6c18:	88c00215 	stw	r3,8(r17)
    6c1c:	90800317 	ldw	r2,12(r18)
    6c20:	88800315 	stw	r2,12(r17)
    6c24:	31c09126 	beq	r6,r7,6e6c <_realloc_r+0x574>
    6c28:	20800017 	ldw	r2,0(r4)
    6c2c:	28800015 	stw	r2,0(r5)
    6c30:	20c00117 	ldw	r3,4(r4)
    6c34:	28c00115 	stw	r3,4(r5)
    6c38:	20800217 	ldw	r2,8(r4)
    6c3c:	28800215 	stw	r2,8(r5)
    6c40:	900b883a 	mov	r5,r18
    6c44:	b009883a 	mov	r4,r22
    6c48:	00043d80 	call	43d8 <_free_r>
    6c4c:	b009883a 	mov	r4,r22
    6c50:	000a1200 	call	a120 <__malloc_unlock>
    6c54:	003f5e06 	br	69d0 <_realloc_r+0xd8>
    6c58:	300b883a 	mov	r5,r6
    6c5c:	dfc00b17 	ldw	ra,44(sp)
    6c60:	df000a17 	ldw	fp,40(sp)
    6c64:	ddc00917 	ldw	r23,36(sp)
    6c68:	dd800817 	ldw	r22,32(sp)
    6c6c:	dd400717 	ldw	r21,28(sp)
    6c70:	dd000617 	ldw	r20,24(sp)
    6c74:	dcc00517 	ldw	r19,20(sp)
    6c78:	dc800417 	ldw	r18,16(sp)
    6c7c:	dc400317 	ldw	r17,12(sp)
    6c80:	dc000217 	ldw	r16,8(sp)
    6c84:	dec00c04 	addi	sp,sp,48
    6c88:	0004f601 	jmpi	4f60 <_malloc_r>
    6c8c:	38800117 	ldw	r2,4(r7)
    6c90:	e54b883a 	add	r5,fp,r21
    6c94:	31000054 	ori	r4,r6,1
    6c98:	1080004c 	andi	r2,r2,1
    6c9c:	1704b03a 	or	r2,r2,fp
    6ca0:	38800115 	stw	r2,4(r7)
    6ca4:	29000115 	stw	r4,4(r5)
    6ca8:	2987883a 	add	r3,r5,r6
    6cac:	18800117 	ldw	r2,4(r3)
    6cb0:	29400204 	addi	r5,r5,8
    6cb4:	b009883a 	mov	r4,r22
    6cb8:	10800054 	ori	r2,r2,1
    6cbc:	18800115 	stw	r2,4(r3)
    6cc0:	00043d80 	call	43d8 <_free_r>
    6cc4:	003f3806 	br	69a8 <_realloc_r+0xb0>
    6cc8:	000d883a 	mov	r6,zero
    6ccc:	0009883a 	mov	r4,zero
    6cd0:	003f5d06 	br	6a48 <_realloc_r+0x150>
    6cd4:	30c00217 	ldw	r3,8(r6)
    6cd8:	30800317 	ldw	r2,12(r6)
    6cdc:	800f883a 	mov	r7,r16
    6ce0:	84000204 	addi	r16,r16,8
    6ce4:	10c00215 	stw	r3,8(r2)
    6ce8:	18800315 	stw	r2,12(r3)
    6cec:	003f2306 	br	697c <_realloc_r+0x84>
    6cf0:	8809883a 	mov	r4,r17
    6cf4:	900b883a 	mov	r5,r18
    6cf8:	00058240 	call	5824 <memmove>
    6cfc:	003fd006 	br	6c40 <_realloc_r+0x348>
    6d00:	30800117 	ldw	r2,4(r6)
    6d04:	e0c00404 	addi	r3,fp,16
    6d08:	1108703a 	and	r4,r2,r4
    6d0c:	9905883a 	add	r2,r19,r4
    6d10:	10ff4d16 	blt	r2,r3,6a48 <_realloc_r+0x150>
    6d14:	1705c83a 	sub	r2,r2,fp
    6d18:	870b883a 	add	r5,r16,fp
    6d1c:	10800054 	ori	r2,r2,1
    6d20:	28800115 	stw	r2,4(r5)
    6d24:	80c00117 	ldw	r3,4(r16)
    6d28:	00800074 	movhi	r2,1
    6d2c:	10b65c04 	addi	r2,r2,-9872
    6d30:	b009883a 	mov	r4,r22
    6d34:	18c0004c 	andi	r3,r3,1
    6d38:	e0c6b03a 	or	r3,fp,r3
    6d3c:	11400215 	stw	r5,8(r2)
    6d40:	80c00115 	stw	r3,4(r16)
    6d44:	000a1200 	call	a120 <__malloc_unlock>
    6d48:	84400204 	addi	r17,r16,8
    6d4c:	003f2006 	br	69d0 <_realloc_r+0xd8>
    6d50:	98a9883a 	add	r20,r19,r2
    6d54:	2509883a 	add	r4,r4,r20
    6d58:	e0800404 	addi	r2,fp,16
    6d5c:	d9000115 	stw	r4,4(sp)
    6d60:	20bf7016 	blt	r4,r2,6b24 <_realloc_r+0x22c>
    6d64:	b8c00317 	ldw	r3,12(r23)
    6d68:	b8800217 	ldw	r2,8(r23)
    6d6c:	99bfff04 	addi	r6,r19,-4
    6d70:	01400904 	movi	r5,36
    6d74:	18800215 	stw	r2,8(r3)
    6d78:	10c00315 	stw	r3,12(r2)
    6d7c:	bc400204 	addi	r17,r23,8
    6d80:	29804136 	bltu	r5,r6,6e88 <_realloc_r+0x590>
    6d84:	008004c4 	movi	r2,19
    6d88:	9009883a 	mov	r4,r18
    6d8c:	880f883a 	mov	r7,r17
    6d90:	11800f2e 	bgeu	r2,r6,6dd0 <_realloc_r+0x4d8>
    6d94:	90800017 	ldw	r2,0(r18)
    6d98:	b9c00404 	addi	r7,r23,16
    6d9c:	91000204 	addi	r4,r18,8
    6da0:	b8800215 	stw	r2,8(r23)
    6da4:	90c00117 	ldw	r3,4(r18)
    6da8:	008006c4 	movi	r2,27
    6dac:	b8c00315 	stw	r3,12(r23)
    6db0:	1180072e 	bgeu	r2,r6,6dd0 <_realloc_r+0x4d8>
    6db4:	90c00217 	ldw	r3,8(r18)
    6db8:	b9c00604 	addi	r7,r23,24
    6dbc:	91000404 	addi	r4,r18,16
    6dc0:	b8c00415 	stw	r3,16(r23)
    6dc4:	90800317 	ldw	r2,12(r18)
    6dc8:	b8800515 	stw	r2,20(r23)
    6dcc:	31404026 	beq	r6,r5,6ed0 <_realloc_r+0x5d8>
    6dd0:	20800017 	ldw	r2,0(r4)
    6dd4:	38800015 	stw	r2,0(r7)
    6dd8:	20c00117 	ldw	r3,4(r4)
    6ddc:	38c00115 	stw	r3,4(r7)
    6de0:	20800217 	ldw	r2,8(r4)
    6de4:	38800215 	stw	r2,8(r7)
    6de8:	d8c00117 	ldw	r3,4(sp)
    6dec:	bf0b883a 	add	r5,r23,fp
    6df0:	b009883a 	mov	r4,r22
    6df4:	1f05c83a 	sub	r2,r3,fp
    6df8:	10800054 	ori	r2,r2,1
    6dfc:	28800115 	stw	r2,4(r5)
    6e00:	b8c00117 	ldw	r3,4(r23)
    6e04:	00800074 	movhi	r2,1
    6e08:	10b65c04 	addi	r2,r2,-9872
    6e0c:	11400215 	stw	r5,8(r2)
    6e10:	18c0004c 	andi	r3,r3,1
    6e14:	e0c6b03a 	or	r3,fp,r3
    6e18:	b8c00115 	stw	r3,4(r23)
    6e1c:	000a1200 	call	a120 <__malloc_unlock>
    6e20:	003eeb06 	br	69d0 <_realloc_r+0xd8>
    6e24:	20800117 	ldw	r2,4(r4)
    6e28:	00ffff04 	movi	r3,-4
    6e2c:	800f883a 	mov	r7,r16
    6e30:	10c4703a 	and	r2,r2,r3
    6e34:	98a9883a 	add	r20,r19,r2
    6e38:	84000204 	addi	r16,r16,8
    6e3c:	003ecf06 	br	697c <_realloc_r+0x84>
    6e40:	900b883a 	mov	r5,r18
    6e44:	8009883a 	mov	r4,r16
    6e48:	00058240 	call	5824 <memmove>
    6e4c:	dd000017 	ldw	r20,0(sp)
    6e50:	b80f883a 	mov	r7,r23
    6e54:	003ec906 	br	697c <_realloc_r+0x84>
    6e58:	900b883a 	mov	r5,r18
    6e5c:	8009883a 	mov	r4,r16
    6e60:	00058240 	call	5824 <memmove>
    6e64:	b80f883a 	mov	r7,r23
    6e68:	003ec406 	br	697c <_realloc_r+0x84>
    6e6c:	90c00417 	ldw	r3,16(r18)
    6e70:	89400604 	addi	r5,r17,24
    6e74:	91000604 	addi	r4,r18,24
    6e78:	88c00415 	stw	r3,16(r17)
    6e7c:	90800517 	ldw	r2,20(r18)
    6e80:	88800515 	stw	r2,20(r17)
    6e84:	003f6806 	br	6c28 <_realloc_r+0x330>
    6e88:	900b883a 	mov	r5,r18
    6e8c:	8809883a 	mov	r4,r17
    6e90:	00058240 	call	5824 <memmove>
    6e94:	003fd406 	br	6de8 <_realloc_r+0x4f0>
    6e98:	90c00417 	ldw	r3,16(r18)
    6e9c:	91000604 	addi	r4,r18,24
    6ea0:	ba000804 	addi	r8,r23,32
    6ea4:	b8c00615 	stw	r3,24(r23)
    6ea8:	90800517 	ldw	r2,20(r18)
    6eac:	b8800715 	stw	r2,28(r23)
    6eb0:	003f1206 	br	6afc <_realloc_r+0x204>
    6eb4:	90c00417 	ldw	r3,16(r18)
    6eb8:	91000604 	addi	r4,r18,24
    6ebc:	ba000804 	addi	r8,r23,32
    6ec0:	b8c00615 	stw	r3,24(r23)
    6ec4:	90800517 	ldw	r2,20(r18)
    6ec8:	b8800715 	stw	r2,28(r23)
    6ecc:	003f3206 	br	6b98 <_realloc_r+0x2a0>
    6ed0:	90c00417 	ldw	r3,16(r18)
    6ed4:	91000604 	addi	r4,r18,24
    6ed8:	b9c00804 	addi	r7,r23,32
    6edc:	b8c00615 	stw	r3,24(r23)
    6ee0:	90800517 	ldw	r2,20(r18)
    6ee4:	b8800715 	stw	r2,28(r23)
    6ee8:	003fb906 	br	6dd0 <_realloc_r+0x4d8>

00006eec <__isinfd>:
    6eec:	200d883a 	mov	r6,r4
    6ef0:	0109c83a 	sub	r4,zero,r4
    6ef4:	2188b03a 	or	r4,r4,r6
    6ef8:	2008d7fa 	srli	r4,r4,31
    6efc:	00a00034 	movhi	r2,32768
    6f00:	10bfffc4 	addi	r2,r2,-1
    6f04:	1144703a 	and	r2,r2,r5
    6f08:	2088b03a 	or	r4,r4,r2
    6f0c:	009ffc34 	movhi	r2,32752
    6f10:	1105c83a 	sub	r2,r2,r4
    6f14:	0087c83a 	sub	r3,zero,r2
    6f18:	10c4b03a 	or	r2,r2,r3
    6f1c:	1004d7fa 	srli	r2,r2,31
    6f20:	00c00044 	movi	r3,1
    6f24:	1885c83a 	sub	r2,r3,r2
    6f28:	f800283a 	ret

00006f2c <__isnand>:
    6f2c:	200d883a 	mov	r6,r4
    6f30:	0109c83a 	sub	r4,zero,r4
    6f34:	2188b03a 	or	r4,r4,r6
    6f38:	2008d7fa 	srli	r4,r4,31
    6f3c:	00a00034 	movhi	r2,32768
    6f40:	10bfffc4 	addi	r2,r2,-1
    6f44:	1144703a 	and	r2,r2,r5
    6f48:	2088b03a 	or	r4,r4,r2
    6f4c:	009ffc34 	movhi	r2,32752
    6f50:	1105c83a 	sub	r2,r2,r4
    6f54:	1004d7fa 	srli	r2,r2,31
    6f58:	f800283a 	ret

00006f5c <_sbrk_r>:
    6f5c:	defffd04 	addi	sp,sp,-12
    6f60:	dc000015 	stw	r16,0(sp)
    6f64:	04000074 	movhi	r16,1
    6f68:	84384104 	addi	r16,r16,-7932
    6f6c:	dc400115 	stw	r17,4(sp)
    6f70:	80000015 	stw	zero,0(r16)
    6f74:	2023883a 	mov	r17,r4
    6f78:	2809883a 	mov	r4,r5
    6f7c:	dfc00215 	stw	ra,8(sp)
    6f80:	000a3200 	call	a320 <sbrk>
    6f84:	1007883a 	mov	r3,r2
    6f88:	00bfffc4 	movi	r2,-1
    6f8c:	18800626 	beq	r3,r2,6fa8 <_sbrk_r+0x4c>
    6f90:	1805883a 	mov	r2,r3
    6f94:	dfc00217 	ldw	ra,8(sp)
    6f98:	dc400117 	ldw	r17,4(sp)
    6f9c:	dc000017 	ldw	r16,0(sp)
    6fa0:	dec00304 	addi	sp,sp,12
    6fa4:	f800283a 	ret
    6fa8:	80800017 	ldw	r2,0(r16)
    6fac:	103ff826 	beq	r2,zero,6f90 <_sbrk_r+0x34>
    6fb0:	88800015 	stw	r2,0(r17)
    6fb4:	1805883a 	mov	r2,r3
    6fb8:	dfc00217 	ldw	ra,8(sp)
    6fbc:	dc400117 	ldw	r17,4(sp)
    6fc0:	dc000017 	ldw	r16,0(sp)
    6fc4:	dec00304 	addi	sp,sp,12
    6fc8:	f800283a 	ret

00006fcc <__sclose>:
    6fcc:	2940038f 	ldh	r5,14(r5)
    6fd0:	00073001 	jmpi	7300 <_close_r>

00006fd4 <__sseek>:
    6fd4:	defffe04 	addi	sp,sp,-8
    6fd8:	dc000015 	stw	r16,0(sp)
    6fdc:	2821883a 	mov	r16,r5
    6fe0:	2940038f 	ldh	r5,14(r5)
    6fe4:	dfc00115 	stw	ra,4(sp)
    6fe8:	00075780 	call	7578 <_lseek_r>
    6fec:	1007883a 	mov	r3,r2
    6ff0:	00bfffc4 	movi	r2,-1
    6ff4:	18800926 	beq	r3,r2,701c <__sseek+0x48>
    6ff8:	8080030b 	ldhu	r2,12(r16)
    6ffc:	80c01415 	stw	r3,80(r16)
    7000:	10840014 	ori	r2,r2,4096
    7004:	8080030d 	sth	r2,12(r16)
    7008:	1805883a 	mov	r2,r3
    700c:	dfc00117 	ldw	ra,4(sp)
    7010:	dc000017 	ldw	r16,0(sp)
    7014:	dec00204 	addi	sp,sp,8
    7018:	f800283a 	ret
    701c:	8080030b 	ldhu	r2,12(r16)
    7020:	10bbffcc 	andi	r2,r2,61439
    7024:	8080030d 	sth	r2,12(r16)
    7028:	1805883a 	mov	r2,r3
    702c:	dfc00117 	ldw	ra,4(sp)
    7030:	dc000017 	ldw	r16,0(sp)
    7034:	dec00204 	addi	sp,sp,8
    7038:	f800283a 	ret

0000703c <__swrite>:
    703c:	2880030b 	ldhu	r2,12(r5)
    7040:	defffb04 	addi	sp,sp,-20
    7044:	dcc00315 	stw	r19,12(sp)
    7048:	1080400c 	andi	r2,r2,256
    704c:	dc800215 	stw	r18,8(sp)
    7050:	dc400115 	stw	r17,4(sp)
    7054:	dc000015 	stw	r16,0(sp)
    7058:	3027883a 	mov	r19,r6
    705c:	3825883a 	mov	r18,r7
    7060:	dfc00415 	stw	ra,16(sp)
    7064:	2821883a 	mov	r16,r5
    7068:	000d883a 	mov	r6,zero
    706c:	01c00084 	movi	r7,2
    7070:	2023883a 	mov	r17,r4
    7074:	10000226 	beq	r2,zero,7080 <__swrite+0x44>
    7078:	2940038f 	ldh	r5,14(r5)
    707c:	00075780 	call	7578 <_lseek_r>
    7080:	8080030b 	ldhu	r2,12(r16)
    7084:	8140038f 	ldh	r5,14(r16)
    7088:	8809883a 	mov	r4,r17
    708c:	10bbffcc 	andi	r2,r2,61439
    7090:	980d883a 	mov	r6,r19
    7094:	900f883a 	mov	r7,r18
    7098:	8080030d 	sth	r2,12(r16)
    709c:	dfc00417 	ldw	ra,16(sp)
    70a0:	dcc00317 	ldw	r19,12(sp)
    70a4:	dc800217 	ldw	r18,8(sp)
    70a8:	dc400117 	ldw	r17,4(sp)
    70ac:	dc000017 	ldw	r16,0(sp)
    70b0:	dec00504 	addi	sp,sp,20
    70b4:	00071d41 	jmpi	71d4 <_write_r>

000070b8 <__sread>:
    70b8:	defffe04 	addi	sp,sp,-8
    70bc:	dc000015 	stw	r16,0(sp)
    70c0:	2821883a 	mov	r16,r5
    70c4:	2940038f 	ldh	r5,14(r5)
    70c8:	dfc00115 	stw	ra,4(sp)
    70cc:	00075f00 	call	75f0 <_read_r>
    70d0:	1007883a 	mov	r3,r2
    70d4:	10000816 	blt	r2,zero,70f8 <__sread+0x40>
    70d8:	80801417 	ldw	r2,80(r16)
    70dc:	10c5883a 	add	r2,r2,r3
    70e0:	80801415 	stw	r2,80(r16)
    70e4:	1805883a 	mov	r2,r3
    70e8:	dfc00117 	ldw	ra,4(sp)
    70ec:	dc000017 	ldw	r16,0(sp)
    70f0:	dec00204 	addi	sp,sp,8
    70f4:	f800283a 	ret
    70f8:	8080030b 	ldhu	r2,12(r16)
    70fc:	10bbffcc 	andi	r2,r2,61439
    7100:	8080030d 	sth	r2,12(r16)
    7104:	1805883a 	mov	r2,r3
    7108:	dfc00117 	ldw	ra,4(sp)
    710c:	dc000017 	ldw	r16,0(sp)
    7110:	dec00204 	addi	sp,sp,8
    7114:	f800283a 	ret

00007118 <strcmp>:
    7118:	2144b03a 	or	r2,r4,r5
    711c:	108000cc 	andi	r2,r2,3
    7120:	10001d1e 	bne	r2,zero,7198 <strcmp+0x80>
    7124:	200f883a 	mov	r7,r4
    7128:	28800017 	ldw	r2,0(r5)
    712c:	21000017 	ldw	r4,0(r4)
    7130:	280d883a 	mov	r6,r5
    7134:	2080161e 	bne	r4,r2,7190 <strcmp+0x78>
    7138:	023fbff4 	movhi	r8,65279
    713c:	423fbfc4 	addi	r8,r8,-257
    7140:	2207883a 	add	r3,r4,r8
    7144:	01602074 	movhi	r5,32897
    7148:	29602004 	addi	r5,r5,-32640
    714c:	1946703a 	and	r3,r3,r5
    7150:	0104303a 	nor	r2,zero,r4
    7154:	10c4703a 	and	r2,r2,r3
    7158:	10001c1e 	bne	r2,zero,71cc <strcmp+0xb4>
    715c:	4013883a 	mov	r9,r8
    7160:	2811883a 	mov	r8,r5
    7164:	00000106 	br	716c <strcmp+0x54>
    7168:	1800181e 	bne	r3,zero,71cc <strcmp+0xb4>
    716c:	39c00104 	addi	r7,r7,4
    7170:	39000017 	ldw	r4,0(r7)
    7174:	31800104 	addi	r6,r6,4
    7178:	31400017 	ldw	r5,0(r6)
    717c:	2245883a 	add	r2,r4,r9
    7180:	1204703a 	and	r2,r2,r8
    7184:	0106303a 	nor	r3,zero,r4
    7188:	1886703a 	and	r3,r3,r2
    718c:	217ff626 	beq	r4,r5,7168 <strcmp+0x50>
    7190:	3809883a 	mov	r4,r7
    7194:	300b883a 	mov	r5,r6
    7198:	20c00007 	ldb	r3,0(r4)
    719c:	1800051e 	bne	r3,zero,71b4 <strcmp+0x9c>
    71a0:	00000606 	br	71bc <strcmp+0xa4>
    71a4:	21000044 	addi	r4,r4,1
    71a8:	20c00007 	ldb	r3,0(r4)
    71ac:	29400044 	addi	r5,r5,1
    71b0:	18000226 	beq	r3,zero,71bc <strcmp+0xa4>
    71b4:	28800007 	ldb	r2,0(r5)
    71b8:	18bffa26 	beq	r3,r2,71a4 <strcmp+0x8c>
    71bc:	20c00003 	ldbu	r3,0(r4)
    71c0:	28800003 	ldbu	r2,0(r5)
    71c4:	1885c83a 	sub	r2,r3,r2
    71c8:	f800283a 	ret
    71cc:	0005883a 	mov	r2,zero
    71d0:	f800283a 	ret

000071d4 <_write_r>:
    71d4:	defffd04 	addi	sp,sp,-12
    71d8:	dc000015 	stw	r16,0(sp)
    71dc:	04000074 	movhi	r16,1
    71e0:	84384104 	addi	r16,r16,-7932
    71e4:	dc400115 	stw	r17,4(sp)
    71e8:	80000015 	stw	zero,0(r16)
    71ec:	2023883a 	mov	r17,r4
    71f0:	2809883a 	mov	r4,r5
    71f4:	300b883a 	mov	r5,r6
    71f8:	380d883a 	mov	r6,r7
    71fc:	dfc00215 	stw	ra,8(sp)
    7200:	000a3dc0 	call	a3dc <write>
    7204:	1007883a 	mov	r3,r2
    7208:	00bfffc4 	movi	r2,-1
    720c:	18800626 	beq	r3,r2,7228 <_write_r+0x54>
    7210:	1805883a 	mov	r2,r3
    7214:	dfc00217 	ldw	ra,8(sp)
    7218:	dc400117 	ldw	r17,4(sp)
    721c:	dc000017 	ldw	r16,0(sp)
    7220:	dec00304 	addi	sp,sp,12
    7224:	f800283a 	ret
    7228:	80800017 	ldw	r2,0(r16)
    722c:	103ff826 	beq	r2,zero,7210 <_write_r+0x3c>
    7230:	88800015 	stw	r2,0(r17)
    7234:	1805883a 	mov	r2,r3
    7238:	dfc00217 	ldw	ra,8(sp)
    723c:	dc400117 	ldw	r17,4(sp)
    7240:	dc000017 	ldw	r16,0(sp)
    7244:	dec00304 	addi	sp,sp,12
    7248:	f800283a 	ret

0000724c <_calloc_r>:
    724c:	298b383a 	mul	r5,r5,r6
    7250:	defffe04 	addi	sp,sp,-8
    7254:	dc000015 	stw	r16,0(sp)
    7258:	dfc00115 	stw	ra,4(sp)
    725c:	0004f600 	call	4f60 <_malloc_r>
    7260:	1021883a 	mov	r16,r2
    7264:	01c00904 	movi	r7,36
    7268:	10000d26 	beq	r2,zero,72a0 <_calloc_r+0x54>
    726c:	10ffff17 	ldw	r3,-4(r2)
    7270:	1009883a 	mov	r4,r2
    7274:	00bfff04 	movi	r2,-4
    7278:	1886703a 	and	r3,r3,r2
    727c:	1887883a 	add	r3,r3,r2
    7280:	180d883a 	mov	r6,r3
    7284:	000b883a 	mov	r5,zero
    7288:	38c01736 	bltu	r7,r3,72e8 <_calloc_r+0x9c>
    728c:	008004c4 	movi	r2,19
    7290:	10c00836 	bltu	r2,r3,72b4 <_calloc_r+0x68>
    7294:	20000215 	stw	zero,8(r4)
    7298:	20000015 	stw	zero,0(r4)
    729c:	20000115 	stw	zero,4(r4)
    72a0:	8005883a 	mov	r2,r16
    72a4:	dfc00117 	ldw	ra,4(sp)
    72a8:	dc000017 	ldw	r16,0(sp)
    72ac:	dec00204 	addi	sp,sp,8
    72b0:	f800283a 	ret
    72b4:	008006c4 	movi	r2,27
    72b8:	80000015 	stw	zero,0(r16)
    72bc:	80000115 	stw	zero,4(r16)
    72c0:	81000204 	addi	r4,r16,8
    72c4:	10fff32e 	bgeu	r2,r3,7294 <_calloc_r+0x48>
    72c8:	80000215 	stw	zero,8(r16)
    72cc:	80000315 	stw	zero,12(r16)
    72d0:	81000404 	addi	r4,r16,16
    72d4:	19ffef1e 	bne	r3,r7,7294 <_calloc_r+0x48>
    72d8:	81000604 	addi	r4,r16,24
    72dc:	80000415 	stw	zero,16(r16)
    72e0:	80000515 	stw	zero,20(r16)
    72e4:	003feb06 	br	7294 <_calloc_r+0x48>
    72e8:	00003540 	call	354 <memset>
    72ec:	8005883a 	mov	r2,r16
    72f0:	dfc00117 	ldw	ra,4(sp)
    72f4:	dc000017 	ldw	r16,0(sp)
    72f8:	dec00204 	addi	sp,sp,8
    72fc:	f800283a 	ret

00007300 <_close_r>:
    7300:	defffd04 	addi	sp,sp,-12
    7304:	dc000015 	stw	r16,0(sp)
    7308:	04000074 	movhi	r16,1
    730c:	84384104 	addi	r16,r16,-7932
    7310:	dc400115 	stw	r17,4(sp)
    7314:	80000015 	stw	zero,0(r16)
    7318:	2023883a 	mov	r17,r4
    731c:	2809883a 	mov	r4,r5
    7320:	dfc00215 	stw	ra,8(sp)
    7324:	0009a980 	call	9a98 <close>
    7328:	1007883a 	mov	r3,r2
    732c:	00bfffc4 	movi	r2,-1
    7330:	18800626 	beq	r3,r2,734c <_close_r+0x4c>
    7334:	1805883a 	mov	r2,r3
    7338:	dfc00217 	ldw	ra,8(sp)
    733c:	dc400117 	ldw	r17,4(sp)
    7340:	dc000017 	ldw	r16,0(sp)
    7344:	dec00304 	addi	sp,sp,12
    7348:	f800283a 	ret
    734c:	80800017 	ldw	r2,0(r16)
    7350:	103ff826 	beq	r2,zero,7334 <_close_r+0x34>
    7354:	88800015 	stw	r2,0(r17)
    7358:	1805883a 	mov	r2,r3
    735c:	dfc00217 	ldw	ra,8(sp)
    7360:	dc400117 	ldw	r17,4(sp)
    7364:	dc000017 	ldw	r16,0(sp)
    7368:	dec00304 	addi	sp,sp,12
    736c:	f800283a 	ret

00007370 <_fclose_r>:
    7370:	defffc04 	addi	sp,sp,-16
    7374:	dc400115 	stw	r17,4(sp)
    7378:	dc000015 	stw	r16,0(sp)
    737c:	dfc00315 	stw	ra,12(sp)
    7380:	dc800215 	stw	r18,8(sp)
    7384:	2821883a 	mov	r16,r5
    7388:	2023883a 	mov	r17,r4
    738c:	28002926 	beq	r5,zero,7434 <_fclose_r+0xc4>
    7390:	00040440 	call	4044 <__sfp_lock_acquire>
    7394:	88000226 	beq	r17,zero,73a0 <_fclose_r+0x30>
    7398:	88800e17 	ldw	r2,56(r17)
    739c:	10002d26 	beq	r2,zero,7454 <_fclose_r+0xe4>
    73a0:	8080030f 	ldh	r2,12(r16)
    73a4:	10002226 	beq	r2,zero,7430 <_fclose_r+0xc0>
    73a8:	8809883a 	mov	r4,r17
    73ac:	800b883a 	mov	r5,r16
    73b0:	0003dbc0 	call	3dbc <_fflush_r>
    73b4:	1025883a 	mov	r18,r2
    73b8:	80800b17 	ldw	r2,44(r16)
    73bc:	10000426 	beq	r2,zero,73d0 <_fclose_r+0x60>
    73c0:	81400717 	ldw	r5,28(r16)
    73c4:	8809883a 	mov	r4,r17
    73c8:	103ee83a 	callr	r2
    73cc:	10002a16 	blt	r2,zero,7478 <_fclose_r+0x108>
    73d0:	8080030b 	ldhu	r2,12(r16)
    73d4:	1080200c 	andi	r2,r2,128
    73d8:	1000231e 	bne	r2,zero,7468 <_fclose_r+0xf8>
    73dc:	81400c17 	ldw	r5,48(r16)
    73e0:	28000526 	beq	r5,zero,73f8 <_fclose_r+0x88>
    73e4:	80801004 	addi	r2,r16,64
    73e8:	28800226 	beq	r5,r2,73f4 <_fclose_r+0x84>
    73ec:	8809883a 	mov	r4,r17
    73f0:	00043d80 	call	43d8 <_free_r>
    73f4:	80000c15 	stw	zero,48(r16)
    73f8:	81401117 	ldw	r5,68(r16)
    73fc:	28000326 	beq	r5,zero,740c <_fclose_r+0x9c>
    7400:	8809883a 	mov	r4,r17
    7404:	00043d80 	call	43d8 <_free_r>
    7408:	80001115 	stw	zero,68(r16)
    740c:	8000030d 	sth	zero,12(r16)
    7410:	00040480 	call	4048 <__sfp_lock_release>
    7414:	9005883a 	mov	r2,r18
    7418:	dfc00317 	ldw	ra,12(sp)
    741c:	dc800217 	ldw	r18,8(sp)
    7420:	dc400117 	ldw	r17,4(sp)
    7424:	dc000017 	ldw	r16,0(sp)
    7428:	dec00404 	addi	sp,sp,16
    742c:	f800283a 	ret
    7430:	00040480 	call	4048 <__sfp_lock_release>
    7434:	0025883a 	mov	r18,zero
    7438:	9005883a 	mov	r2,r18
    743c:	dfc00317 	ldw	ra,12(sp)
    7440:	dc800217 	ldw	r18,8(sp)
    7444:	dc400117 	ldw	r17,4(sp)
    7448:	dc000017 	ldw	r16,0(sp)
    744c:	dec00404 	addi	sp,sp,16
    7450:	f800283a 	ret
    7454:	8809883a 	mov	r4,r17
    7458:	00040540 	call	4054 <__sinit>
    745c:	8080030f 	ldh	r2,12(r16)
    7460:	103fd11e 	bne	r2,zero,73a8 <_fclose_r+0x38>
    7464:	003ff206 	br	7430 <_fclose_r+0xc0>
    7468:	81400417 	ldw	r5,16(r16)
    746c:	8809883a 	mov	r4,r17
    7470:	00043d80 	call	43d8 <_free_r>
    7474:	003fd906 	br	73dc <_fclose_r+0x6c>
    7478:	04bfffc4 	movi	r18,-1
    747c:	003fd406 	br	73d0 <_fclose_r+0x60>

00007480 <fclose>:
    7480:	00800074 	movhi	r2,1
    7484:	10b82b04 	addi	r2,r2,-8020
    7488:	200b883a 	mov	r5,r4
    748c:	11000017 	ldw	r4,0(r2)
    7490:	00073701 	jmpi	7370 <_fclose_r>

00007494 <_fstat_r>:
    7494:	defffd04 	addi	sp,sp,-12
    7498:	dc000015 	stw	r16,0(sp)
    749c:	04000074 	movhi	r16,1
    74a0:	84384104 	addi	r16,r16,-7932
    74a4:	dc400115 	stw	r17,4(sp)
    74a8:	80000015 	stw	zero,0(r16)
    74ac:	2023883a 	mov	r17,r4
    74b0:	2809883a 	mov	r4,r5
    74b4:	300b883a 	mov	r5,r6
    74b8:	dfc00215 	stw	ra,8(sp)
    74bc:	0009cf00 	call	9cf0 <fstat>
    74c0:	1007883a 	mov	r3,r2
    74c4:	00bfffc4 	movi	r2,-1
    74c8:	18800626 	beq	r3,r2,74e4 <_fstat_r+0x50>
    74cc:	1805883a 	mov	r2,r3
    74d0:	dfc00217 	ldw	ra,8(sp)
    74d4:	dc400117 	ldw	r17,4(sp)
    74d8:	dc000017 	ldw	r16,0(sp)
    74dc:	dec00304 	addi	sp,sp,12
    74e0:	f800283a 	ret
    74e4:	80800017 	ldw	r2,0(r16)
    74e8:	103ff826 	beq	r2,zero,74cc <_fstat_r+0x38>
    74ec:	88800015 	stw	r2,0(r17)
    74f0:	1805883a 	mov	r2,r3
    74f4:	dfc00217 	ldw	ra,8(sp)
    74f8:	dc400117 	ldw	r17,4(sp)
    74fc:	dc000017 	ldw	r16,0(sp)
    7500:	dec00304 	addi	sp,sp,12
    7504:	f800283a 	ret

00007508 <_isatty_r>:
    7508:	defffd04 	addi	sp,sp,-12
    750c:	dc000015 	stw	r16,0(sp)
    7510:	04000074 	movhi	r16,1
    7514:	84384104 	addi	r16,r16,-7932
    7518:	dc400115 	stw	r17,4(sp)
    751c:	80000015 	stw	zero,0(r16)
    7520:	2023883a 	mov	r17,r4
    7524:	2809883a 	mov	r4,r5
    7528:	dfc00215 	stw	ra,8(sp)
    752c:	0009e240 	call	9e24 <isatty>
    7530:	1007883a 	mov	r3,r2
    7534:	00bfffc4 	movi	r2,-1
    7538:	18800626 	beq	r3,r2,7554 <_isatty_r+0x4c>
    753c:	1805883a 	mov	r2,r3
    7540:	dfc00217 	ldw	ra,8(sp)
    7544:	dc400117 	ldw	r17,4(sp)
    7548:	dc000017 	ldw	r16,0(sp)
    754c:	dec00304 	addi	sp,sp,12
    7550:	f800283a 	ret
    7554:	80800017 	ldw	r2,0(r16)
    7558:	103ff826 	beq	r2,zero,753c <_isatty_r+0x34>
    755c:	88800015 	stw	r2,0(r17)
    7560:	1805883a 	mov	r2,r3
    7564:	dfc00217 	ldw	ra,8(sp)
    7568:	dc400117 	ldw	r17,4(sp)
    756c:	dc000017 	ldw	r16,0(sp)
    7570:	dec00304 	addi	sp,sp,12
    7574:	f800283a 	ret

00007578 <_lseek_r>:
    7578:	defffd04 	addi	sp,sp,-12
    757c:	dc000015 	stw	r16,0(sp)
    7580:	04000074 	movhi	r16,1
    7584:	84384104 	addi	r16,r16,-7932
    7588:	dc400115 	stw	r17,4(sp)
    758c:	80000015 	stw	zero,0(r16)
    7590:	2023883a 	mov	r17,r4
    7594:	2809883a 	mov	r4,r5
    7598:	300b883a 	mov	r5,r6
    759c:	380d883a 	mov	r6,r7
    75a0:	dfc00215 	stw	ra,8(sp)
    75a4:	0009f440 	call	9f44 <lseek>
    75a8:	1007883a 	mov	r3,r2
    75ac:	00bfffc4 	movi	r2,-1
    75b0:	18800626 	beq	r3,r2,75cc <_lseek_r+0x54>
    75b4:	1805883a 	mov	r2,r3
    75b8:	dfc00217 	ldw	ra,8(sp)
    75bc:	dc400117 	ldw	r17,4(sp)
    75c0:	dc000017 	ldw	r16,0(sp)
    75c4:	dec00304 	addi	sp,sp,12
    75c8:	f800283a 	ret
    75cc:	80800017 	ldw	r2,0(r16)
    75d0:	103ff826 	beq	r2,zero,75b4 <_lseek_r+0x3c>
    75d4:	88800015 	stw	r2,0(r17)
    75d8:	1805883a 	mov	r2,r3
    75dc:	dfc00217 	ldw	ra,8(sp)
    75e0:	dc400117 	ldw	r17,4(sp)
    75e4:	dc000017 	ldw	r16,0(sp)
    75e8:	dec00304 	addi	sp,sp,12
    75ec:	f800283a 	ret

000075f0 <_read_r>:
    75f0:	defffd04 	addi	sp,sp,-12
    75f4:	dc000015 	stw	r16,0(sp)
    75f8:	04000074 	movhi	r16,1
    75fc:	84384104 	addi	r16,r16,-7932
    7600:	dc400115 	stw	r17,4(sp)
    7604:	80000015 	stw	zero,0(r16)
    7608:	2023883a 	mov	r17,r4
    760c:	2809883a 	mov	r4,r5
    7610:	300b883a 	mov	r5,r6
    7614:	380d883a 	mov	r6,r7
    7618:	dfc00215 	stw	ra,8(sp)
    761c:	000a1400 	call	a140 <read>
    7620:	1007883a 	mov	r3,r2
    7624:	00bfffc4 	movi	r2,-1
    7628:	18800626 	beq	r3,r2,7644 <_read_r+0x54>
    762c:	1805883a 	mov	r2,r3
    7630:	dfc00217 	ldw	ra,8(sp)
    7634:	dc400117 	ldw	r17,4(sp)
    7638:	dc000017 	ldw	r16,0(sp)
    763c:	dec00304 	addi	sp,sp,12
    7640:	f800283a 	ret
    7644:	80800017 	ldw	r2,0(r16)
    7648:	103ff826 	beq	r2,zero,762c <_read_r+0x3c>
    764c:	88800015 	stw	r2,0(r17)
    7650:	1805883a 	mov	r2,r3
    7654:	dfc00217 	ldw	ra,8(sp)
    7658:	dc400117 	ldw	r17,4(sp)
    765c:	dc000017 	ldw	r16,0(sp)
    7660:	dec00304 	addi	sp,sp,12
    7664:	f800283a 	ret

00007668 <__udivdi3>:
    7668:	defff004 	addi	sp,sp,-64
    766c:	2005883a 	mov	r2,r4
    7670:	3011883a 	mov	r8,r6
    7674:	df000e15 	stw	fp,56(sp)
    7678:	dd000a15 	stw	r20,40(sp)
    767c:	dc000615 	stw	r16,24(sp)
    7680:	dfc00f15 	stw	ra,60(sp)
    7684:	ddc00d15 	stw	r23,52(sp)
    7688:	dd800c15 	stw	r22,48(sp)
    768c:	dd400b15 	stw	r21,44(sp)
    7690:	dcc00915 	stw	r19,36(sp)
    7694:	dc800815 	stw	r18,32(sp)
    7698:	dc400715 	stw	r17,28(sp)
    769c:	4021883a 	mov	r16,r8
    76a0:	1039883a 	mov	fp,r2
    76a4:	2829883a 	mov	r20,r5
    76a8:	38003b1e 	bne	r7,zero,7798 <__udivdi3+0x130>
    76ac:	2a005c36 	bltu	r5,r8,7820 <__udivdi3+0x1b8>
    76b0:	4000a626 	beq	r8,zero,794c <__udivdi3+0x2e4>
    76b4:	00bfffd4 	movui	r2,65535
    76b8:	14009e36 	bltu	r2,r16,7934 <__udivdi3+0x2cc>
    76bc:	00803fc4 	movi	r2,255
    76c0:	14013d36 	bltu	r2,r16,7bb8 <__udivdi3+0x550>
    76c4:	000b883a 	mov	r5,zero
    76c8:	0005883a 	mov	r2,zero
    76cc:	8084d83a 	srl	r2,r16,r2
    76d0:	01000074 	movhi	r4,1
    76d4:	21350d04 	addi	r4,r4,-11212
    76d8:	01800804 	movi	r6,32
    76dc:	1105883a 	add	r2,r2,r4
    76e0:	10c00003 	ldbu	r3,0(r2)
    76e4:	28c7883a 	add	r3,r5,r3
    76e8:	30edc83a 	sub	r22,r6,r3
    76ec:	b000ee1e 	bne	r22,zero,7aa8 <__udivdi3+0x440>
    76f0:	802ad43a 	srli	r21,r16,16
    76f4:	00800044 	movi	r2,1
    76f8:	a423c83a 	sub	r17,r20,r16
    76fc:	85ffffcc 	andi	r23,r16,65535
    7700:	d8800315 	stw	r2,12(sp)
    7704:	8809883a 	mov	r4,r17
    7708:	a80b883a 	mov	r5,r21
    770c:	000945c0 	call	945c <__udivsi3>
    7710:	8809883a 	mov	r4,r17
    7714:	a80b883a 	mov	r5,r21
    7718:	102d883a 	mov	r22,r2
    771c:	00094640 	call	9464 <__umodsi3>
    7720:	1004943a 	slli	r2,r2,16
    7724:	e006d43a 	srli	r3,fp,16
    7728:	bda3383a 	mul	r17,r23,r22
    772c:	10c4b03a 	or	r2,r2,r3
    7730:	1440042e 	bgeu	r2,r17,7744 <__udivdi3+0xdc>
    7734:	1405883a 	add	r2,r2,r16
    7738:	b5bfffc4 	addi	r22,r22,-1
    773c:	14000136 	bltu	r2,r16,7744 <__udivdi3+0xdc>
    7740:	14413d36 	bltu	r2,r17,7c38 <__udivdi3+0x5d0>
    7744:	1463c83a 	sub	r17,r2,r17
    7748:	8809883a 	mov	r4,r17
    774c:	a80b883a 	mov	r5,r21
    7750:	000945c0 	call	945c <__udivsi3>
    7754:	8809883a 	mov	r4,r17
    7758:	a80b883a 	mov	r5,r21
    775c:	1029883a 	mov	r20,r2
    7760:	00094640 	call	9464 <__umodsi3>
    7764:	1004943a 	slli	r2,r2,16
    7768:	bd09383a 	mul	r4,r23,r20
    776c:	e0ffffcc 	andi	r3,fp,65535
    7770:	10c4b03a 	or	r2,r2,r3
    7774:	1100042e 	bgeu	r2,r4,7788 <__udivdi3+0x120>
    7778:	8085883a 	add	r2,r16,r2
    777c:	a53fffc4 	addi	r20,r20,-1
    7780:	14000136 	bltu	r2,r16,7788 <__udivdi3+0x120>
    7784:	11012036 	bltu	r2,r4,7c08 <__udivdi3+0x5a0>
    7788:	b004943a 	slli	r2,r22,16
    778c:	d9000317 	ldw	r4,12(sp)
    7790:	a084b03a 	or	r2,r20,r2
    7794:	00001506 	br	77ec <__udivdi3+0x184>
    7798:	380d883a 	mov	r6,r7
    779c:	29c06236 	bltu	r5,r7,7928 <__udivdi3+0x2c0>
    77a0:	00bfffd4 	movui	r2,65535
    77a4:	11c05a36 	bltu	r2,r7,7910 <__udivdi3+0x2a8>
    77a8:	00803fc4 	movi	r2,255
    77ac:	11c0fc36 	bltu	r2,r7,7ba0 <__udivdi3+0x538>
    77b0:	000b883a 	mov	r5,zero
    77b4:	0005883a 	mov	r2,zero
    77b8:	3084d83a 	srl	r2,r6,r2
    77bc:	01000074 	movhi	r4,1
    77c0:	21350d04 	addi	r4,r4,-11212
    77c4:	01c00804 	movi	r7,32
    77c8:	1105883a 	add	r2,r2,r4
    77cc:	10c00003 	ldbu	r3,0(r2)
    77d0:	28c7883a 	add	r3,r5,r3
    77d4:	38efc83a 	sub	r23,r7,r3
    77d8:	b800691e 	bne	r23,zero,7980 <__udivdi3+0x318>
    77dc:	35000136 	bltu	r6,r20,77e4 <__udivdi3+0x17c>
    77e0:	e4005136 	bltu	fp,r16,7928 <__udivdi3+0x2c0>
    77e4:	00800044 	movi	r2,1
    77e8:	0009883a 	mov	r4,zero
    77ec:	2007883a 	mov	r3,r4
    77f0:	dfc00f17 	ldw	ra,60(sp)
    77f4:	df000e17 	ldw	fp,56(sp)
    77f8:	ddc00d17 	ldw	r23,52(sp)
    77fc:	dd800c17 	ldw	r22,48(sp)
    7800:	dd400b17 	ldw	r21,44(sp)
    7804:	dd000a17 	ldw	r20,40(sp)
    7808:	dcc00917 	ldw	r19,36(sp)
    780c:	dc800817 	ldw	r18,32(sp)
    7810:	dc400717 	ldw	r17,28(sp)
    7814:	dc000617 	ldw	r16,24(sp)
    7818:	dec01004 	addi	sp,sp,64
    781c:	f800283a 	ret
    7820:	00bfffd4 	movui	r2,65535
    7824:	12005036 	bltu	r2,r8,7968 <__udivdi3+0x300>
    7828:	00803fc4 	movi	r2,255
    782c:	1200e836 	bltu	r2,r8,7bd0 <__udivdi3+0x568>
    7830:	000b883a 	mov	r5,zero
    7834:	0005883a 	mov	r2,zero
    7838:	8084d83a 	srl	r2,r16,r2
    783c:	01000074 	movhi	r4,1
    7840:	21350d04 	addi	r4,r4,-11212
    7844:	01800804 	movi	r6,32
    7848:	1105883a 	add	r2,r2,r4
    784c:	10c00003 	ldbu	r3,0(r2)
    7850:	28c7883a 	add	r3,r5,r3
    7854:	30cbc83a 	sub	r5,r6,r3
    7858:	28000626 	beq	r5,zero,7874 <__udivdi3+0x20c>
    785c:	3145c83a 	sub	r2,r6,r5
    7860:	e084d83a 	srl	r2,fp,r2
    7864:	a146983a 	sll	r3,r20,r5
    7868:	e178983a 	sll	fp,fp,r5
    786c:	8160983a 	sll	r16,r16,r5
    7870:	18a8b03a 	or	r20,r3,r2
    7874:	802ad43a 	srli	r21,r16,16
    7878:	a009883a 	mov	r4,r20
    787c:	85ffffcc 	andi	r23,r16,65535
    7880:	a80b883a 	mov	r5,r21
    7884:	000945c0 	call	945c <__udivsi3>
    7888:	a009883a 	mov	r4,r20
    788c:	a80b883a 	mov	r5,r21
    7890:	102d883a 	mov	r22,r2
    7894:	00094640 	call	9464 <__umodsi3>
    7898:	1004943a 	slli	r2,r2,16
    789c:	e006d43a 	srli	r3,fp,16
    78a0:	bda3383a 	mul	r17,r23,r22
    78a4:	10c4b03a 	or	r2,r2,r3
    78a8:	1440042e 	bgeu	r2,r17,78bc <__udivdi3+0x254>
    78ac:	1405883a 	add	r2,r2,r16
    78b0:	b5bfffc4 	addi	r22,r22,-1
    78b4:	14000136 	bltu	r2,r16,78bc <__udivdi3+0x254>
    78b8:	1440d536 	bltu	r2,r17,7c10 <__udivdi3+0x5a8>
    78bc:	1463c83a 	sub	r17,r2,r17
    78c0:	8809883a 	mov	r4,r17
    78c4:	a80b883a 	mov	r5,r21
    78c8:	000945c0 	call	945c <__udivsi3>
    78cc:	8809883a 	mov	r4,r17
    78d0:	a80b883a 	mov	r5,r21
    78d4:	1029883a 	mov	r20,r2
    78d8:	00094640 	call	9464 <__umodsi3>
    78dc:	1004943a 	slli	r2,r2,16
    78e0:	bd09383a 	mul	r4,r23,r20
    78e4:	e0ffffcc 	andi	r3,fp,65535
    78e8:	10c4b03a 	or	r2,r2,r3
    78ec:	1100042e 	bgeu	r2,r4,7900 <__udivdi3+0x298>
    78f0:	8085883a 	add	r2,r16,r2
    78f4:	a53fffc4 	addi	r20,r20,-1
    78f8:	14000136 	bltu	r2,r16,7900 <__udivdi3+0x298>
    78fc:	1100c736 	bltu	r2,r4,7c1c <__udivdi3+0x5b4>
    7900:	b004943a 	slli	r2,r22,16
    7904:	0009883a 	mov	r4,zero
    7908:	a084b03a 	or	r2,r20,r2
    790c:	003fb706 	br	77ec <__udivdi3+0x184>
    7910:	00804034 	movhi	r2,256
    7914:	10bfffc4 	addi	r2,r2,-1
    7918:	11c0a436 	bltu	r2,r7,7bac <__udivdi3+0x544>
    791c:	01400404 	movi	r5,16
    7920:	2805883a 	mov	r2,r5
    7924:	003fa406 	br	77b8 <__udivdi3+0x150>
    7928:	0005883a 	mov	r2,zero
    792c:	0009883a 	mov	r4,zero
    7930:	003fae06 	br	77ec <__udivdi3+0x184>
    7934:	00804034 	movhi	r2,256
    7938:	10bfffc4 	addi	r2,r2,-1
    793c:	1400a136 	bltu	r2,r16,7bc4 <__udivdi3+0x55c>
    7940:	01400404 	movi	r5,16
    7944:	2805883a 	mov	r2,r5
    7948:	003f6006 	br	76cc <__udivdi3+0x64>
    794c:	01000044 	movi	r4,1
    7950:	000b883a 	mov	r5,zero
    7954:	000945c0 	call	945c <__udivsi3>
    7958:	1021883a 	mov	r16,r2
    795c:	00bfffd4 	movui	r2,65535
    7960:	143ff436 	bltu	r2,r16,7934 <__udivdi3+0x2cc>
    7964:	003f5506 	br	76bc <__udivdi3+0x54>
    7968:	00804034 	movhi	r2,256
    796c:	10bfffc4 	addi	r2,r2,-1
    7970:	12009a36 	bltu	r2,r8,7bdc <__udivdi3+0x574>
    7974:	01400404 	movi	r5,16
    7978:	2805883a 	mov	r2,r5
    797c:	003fae06 	br	7838 <__udivdi3+0x1d0>
    7980:	3dc5c83a 	sub	r2,r7,r23
    7984:	35c8983a 	sll	r4,r6,r23
    7988:	8086d83a 	srl	r3,r16,r2
    798c:	a0a2d83a 	srl	r17,r20,r2
    7990:	e084d83a 	srl	r2,fp,r2
    7994:	20eab03a 	or	r21,r4,r3
    7998:	a82cd43a 	srli	r22,r21,16
    799c:	a5c6983a 	sll	r3,r20,r23
    79a0:	8809883a 	mov	r4,r17
    79a4:	b00b883a 	mov	r5,r22
    79a8:	1886b03a 	or	r3,r3,r2
    79ac:	d8c00215 	stw	r3,8(sp)
    79b0:	000945c0 	call	945c <__udivsi3>
    79b4:	8809883a 	mov	r4,r17
    79b8:	b00b883a 	mov	r5,r22
    79bc:	1029883a 	mov	r20,r2
    79c0:	00094640 	call	9464 <__umodsi3>
    79c4:	a8ffffcc 	andi	r3,r21,65535
    79c8:	d8c00515 	stw	r3,20(sp)
    79cc:	d9000217 	ldw	r4,8(sp)
    79d0:	d9400517 	ldw	r5,20(sp)
    79d4:	1004943a 	slli	r2,r2,16
    79d8:	2006d43a 	srli	r3,r4,16
    79dc:	85e0983a 	sll	r16,r16,r23
    79e0:	2d23383a 	mul	r17,r5,r20
    79e4:	10c4b03a 	or	r2,r2,r3
    79e8:	dc000015 	stw	r16,0(sp)
    79ec:	1440032e 	bgeu	r2,r17,79fc <__udivdi3+0x394>
    79f0:	1545883a 	add	r2,r2,r21
    79f4:	a53fffc4 	addi	r20,r20,-1
    79f8:	15407f2e 	bgeu	r2,r21,7bf8 <__udivdi3+0x590>
    79fc:	1463c83a 	sub	r17,r2,r17
    7a00:	8809883a 	mov	r4,r17
    7a04:	b00b883a 	mov	r5,r22
    7a08:	000945c0 	call	945c <__udivsi3>
    7a0c:	8809883a 	mov	r4,r17
    7a10:	b00b883a 	mov	r5,r22
    7a14:	1021883a 	mov	r16,r2
    7a18:	00094640 	call	9464 <__umodsi3>
    7a1c:	d8c00517 	ldw	r3,20(sp)
    7a20:	d9000217 	ldw	r4,8(sp)
    7a24:	1004943a 	slli	r2,r2,16
    7a28:	1c0f383a 	mul	r7,r3,r16
    7a2c:	20ffffcc 	andi	r3,r4,65535
    7a30:	10e2b03a 	or	r17,r2,r3
    7a34:	89c0032e 	bgeu	r17,r7,7a44 <__udivdi3+0x3dc>
    7a38:	8d63883a 	add	r17,r17,r21
    7a3c:	843fffc4 	addi	r16,r16,-1
    7a40:	8d40692e 	bgeu	r17,r21,7be8 <__udivdi3+0x580>
    7a44:	a008943a 	slli	r4,r20,16
    7a48:	d9400017 	ldw	r5,0(sp)
    7a4c:	89e3c83a 	sub	r17,r17,r7
    7a50:	8110b03a 	or	r8,r16,r4
    7a54:	280cd43a 	srli	r6,r5,16
    7a58:	28ffffcc 	andi	r3,r5,65535
    7a5c:	40bfffcc 	andi	r2,r8,65535
    7a60:	400ad43a 	srli	r5,r8,16
    7a64:	10d3383a 	mul	r9,r2,r3
    7a68:	1185383a 	mul	r2,r2,r6
    7a6c:	28c7383a 	mul	r3,r5,r3
    7a70:	4808d43a 	srli	r4,r9,16
    7a74:	298b383a 	mul	r5,r5,r6
    7a78:	10c5883a 	add	r2,r2,r3
    7a7c:	2089883a 	add	r4,r4,r2
    7a80:	20c0022e 	bgeu	r4,r3,7a8c <__udivdi3+0x424>
    7a84:	00800074 	movhi	r2,1
    7a88:	288b883a 	add	r5,r5,r2
    7a8c:	2004d43a 	srli	r2,r4,16
    7a90:	288b883a 	add	r5,r5,r2
    7a94:	89403f36 	bltu	r17,r5,7b94 <__udivdi3+0x52c>
    7a98:	89403926 	beq	r17,r5,7b80 <__udivdi3+0x518>
    7a9c:	4005883a 	mov	r2,r8
    7aa0:	0009883a 	mov	r4,zero
    7aa4:	003f5106 	br	77ec <__udivdi3+0x184>
    7aa8:	85a0983a 	sll	r16,r16,r22
    7aac:	3585c83a 	sub	r2,r6,r22
    7ab0:	a0a2d83a 	srl	r17,r20,r2
    7ab4:	802ad43a 	srli	r21,r16,16
    7ab8:	e084d83a 	srl	r2,fp,r2
    7abc:	a586983a 	sll	r3,r20,r22
    7ac0:	8809883a 	mov	r4,r17
    7ac4:	a80b883a 	mov	r5,r21
    7ac8:	1886b03a 	or	r3,r3,r2
    7acc:	d8c00115 	stw	r3,4(sp)
    7ad0:	000945c0 	call	945c <__udivsi3>
    7ad4:	8809883a 	mov	r4,r17
    7ad8:	a80b883a 	mov	r5,r21
    7adc:	d8800415 	stw	r2,16(sp)
    7ae0:	00094640 	call	9464 <__umodsi3>
    7ae4:	d9000117 	ldw	r4,4(sp)
    7ae8:	d9400417 	ldw	r5,16(sp)
    7aec:	1004943a 	slli	r2,r2,16
    7af0:	85ffffcc 	andi	r23,r16,65535
    7af4:	2006d43a 	srli	r3,r4,16
    7af8:	b963383a 	mul	r17,r23,r5
    7afc:	10c4b03a 	or	r2,r2,r3
    7b00:	1440042e 	bgeu	r2,r17,7b14 <__udivdi3+0x4ac>
    7b04:	297fffc4 	addi	r5,r5,-1
    7b08:	1405883a 	add	r2,r2,r16
    7b0c:	d9400415 	stw	r5,16(sp)
    7b10:	1400442e 	bgeu	r2,r16,7c24 <__udivdi3+0x5bc>
    7b14:	1463c83a 	sub	r17,r2,r17
    7b18:	8809883a 	mov	r4,r17
    7b1c:	a80b883a 	mov	r5,r21
    7b20:	000945c0 	call	945c <__udivsi3>
    7b24:	8809883a 	mov	r4,r17
    7b28:	a80b883a 	mov	r5,r21
    7b2c:	1029883a 	mov	r20,r2
    7b30:	00094640 	call	9464 <__umodsi3>
    7b34:	d9400117 	ldw	r5,4(sp)
    7b38:	1004943a 	slli	r2,r2,16
    7b3c:	bd09383a 	mul	r4,r23,r20
    7b40:	28ffffcc 	andi	r3,r5,65535
    7b44:	10c6b03a 	or	r3,r2,r3
    7b48:	1900062e 	bgeu	r3,r4,7b64 <__udivdi3+0x4fc>
    7b4c:	1c07883a 	add	r3,r3,r16
    7b50:	a53fffc4 	addi	r20,r20,-1
    7b54:	1c000336 	bltu	r3,r16,7b64 <__udivdi3+0x4fc>
    7b58:	1900022e 	bgeu	r3,r4,7b64 <__udivdi3+0x4fc>
    7b5c:	a53fffc4 	addi	r20,r20,-1
    7b60:	1c07883a 	add	r3,r3,r16
    7b64:	d9400417 	ldw	r5,16(sp)
    7b68:	e5b8983a 	sll	fp,fp,r22
    7b6c:	1923c83a 	sub	r17,r3,r4
    7b70:	2804943a 	slli	r2,r5,16
    7b74:	a0a8b03a 	or	r20,r20,r2
    7b78:	dd000315 	stw	r20,12(sp)
    7b7c:	003ee106 	br	7704 <__udivdi3+0x9c>
    7b80:	2004943a 	slli	r2,r4,16
    7b84:	e5c8983a 	sll	r4,fp,r23
    7b88:	48ffffcc 	andi	r3,r9,65535
    7b8c:	10c5883a 	add	r2,r2,r3
    7b90:	20bfc22e 	bgeu	r4,r2,7a9c <__udivdi3+0x434>
    7b94:	40bfffc4 	addi	r2,r8,-1
    7b98:	0009883a 	mov	r4,zero
    7b9c:	003f1306 	br	77ec <__udivdi3+0x184>
    7ba0:	01400204 	movi	r5,8
    7ba4:	2805883a 	mov	r2,r5
    7ba8:	003f0306 	br	77b8 <__udivdi3+0x150>
    7bac:	01400604 	movi	r5,24
    7bb0:	2805883a 	mov	r2,r5
    7bb4:	003f0006 	br	77b8 <__udivdi3+0x150>
    7bb8:	01400204 	movi	r5,8
    7bbc:	2805883a 	mov	r2,r5
    7bc0:	003ec206 	br	76cc <__udivdi3+0x64>
    7bc4:	01400604 	movi	r5,24
    7bc8:	2805883a 	mov	r2,r5
    7bcc:	003ebf06 	br	76cc <__udivdi3+0x64>
    7bd0:	01400204 	movi	r5,8
    7bd4:	2805883a 	mov	r2,r5
    7bd8:	003f1706 	br	7838 <__udivdi3+0x1d0>
    7bdc:	01400604 	movi	r5,24
    7be0:	2805883a 	mov	r2,r5
    7be4:	003f1406 	br	7838 <__udivdi3+0x1d0>
    7be8:	89ff962e 	bgeu	r17,r7,7a44 <__udivdi3+0x3dc>
    7bec:	8d63883a 	add	r17,r17,r21
    7bf0:	843fffc4 	addi	r16,r16,-1
    7bf4:	003f9306 	br	7a44 <__udivdi3+0x3dc>
    7bf8:	147f802e 	bgeu	r2,r17,79fc <__udivdi3+0x394>
    7bfc:	a53fffc4 	addi	r20,r20,-1
    7c00:	1545883a 	add	r2,r2,r21
    7c04:	003f7d06 	br	79fc <__udivdi3+0x394>
    7c08:	a53fffc4 	addi	r20,r20,-1
    7c0c:	003ede06 	br	7788 <__udivdi3+0x120>
    7c10:	b5bfffc4 	addi	r22,r22,-1
    7c14:	1405883a 	add	r2,r2,r16
    7c18:	003f2806 	br	78bc <__udivdi3+0x254>
    7c1c:	a53fffc4 	addi	r20,r20,-1
    7c20:	003f3706 	br	7900 <__udivdi3+0x298>
    7c24:	147fbb2e 	bgeu	r2,r17,7b14 <__udivdi3+0x4ac>
    7c28:	297fffc4 	addi	r5,r5,-1
    7c2c:	1405883a 	add	r2,r2,r16
    7c30:	d9400415 	stw	r5,16(sp)
    7c34:	003fb706 	br	7b14 <__udivdi3+0x4ac>
    7c38:	b5bfffc4 	addi	r22,r22,-1
    7c3c:	1405883a 	add	r2,r2,r16
    7c40:	003ec006 	br	7744 <__udivdi3+0xdc>

00007c44 <__umoddi3>:
    7c44:	defff104 	addi	sp,sp,-60
    7c48:	dd800b15 	stw	r22,44(sp)
    7c4c:	dd000915 	stw	r20,36(sp)
    7c50:	dc000515 	stw	r16,20(sp)
    7c54:	dfc00e15 	stw	ra,56(sp)
    7c58:	df000d15 	stw	fp,52(sp)
    7c5c:	ddc00c15 	stw	r23,48(sp)
    7c60:	dd400a15 	stw	r21,40(sp)
    7c64:	dcc00815 	stw	r19,32(sp)
    7c68:	dc800715 	stw	r18,28(sp)
    7c6c:	dc400615 	stw	r17,24(sp)
    7c70:	3021883a 	mov	r16,r6
    7c74:	202d883a 	mov	r22,r4
    7c78:	2829883a 	mov	r20,r5
    7c7c:	38002b1e 	bne	r7,zero,7d2c <__umoddi3+0xe8>
    7c80:	29805036 	bltu	r5,r6,7dc4 <__umoddi3+0x180>
    7c84:	30008a26 	beq	r6,zero,7eb0 <__umoddi3+0x26c>
    7c88:	00bfffd4 	movui	r2,65535
    7c8c:	14008236 	bltu	r2,r16,7e98 <__umoddi3+0x254>
    7c90:	00803fc4 	movi	r2,255
    7c94:	14013636 	bltu	r2,r16,8170 <__umoddi3+0x52c>
    7c98:	000b883a 	mov	r5,zero
    7c9c:	0005883a 	mov	r2,zero
    7ca0:	8084d83a 	srl	r2,r16,r2
    7ca4:	01000074 	movhi	r4,1
    7ca8:	21350d04 	addi	r4,r4,-11212
    7cac:	01800804 	movi	r6,32
    7cb0:	1105883a 	add	r2,r2,r4
    7cb4:	10c00003 	ldbu	r3,0(r2)
    7cb8:	28c7883a 	add	r3,r5,r3
    7cbc:	30efc83a 	sub	r23,r6,r3
    7cc0:	b800941e 	bne	r23,zero,7f14 <__umoddi3+0x2d0>
    7cc4:	802ad43a 	srli	r21,r16,16
    7cc8:	a423c83a 	sub	r17,r20,r16
    7ccc:	0039883a 	mov	fp,zero
    7cd0:	853fffcc 	andi	r20,r16,65535
    7cd4:	8809883a 	mov	r4,r17
    7cd8:	a80b883a 	mov	r5,r21
    7cdc:	000945c0 	call	945c <__udivsi3>
    7ce0:	8809883a 	mov	r4,r17
    7ce4:	a80b883a 	mov	r5,r21
    7ce8:	a0a3383a 	mul	r17,r20,r2
    7cec:	00094640 	call	9464 <__umodsi3>
    7cf0:	1004943a 	slli	r2,r2,16
    7cf4:	b006d43a 	srli	r3,r22,16
    7cf8:	10c4b03a 	or	r2,r2,r3
    7cfc:	1440032e 	bgeu	r2,r17,7d0c <__umoddi3+0xc8>
    7d00:	1405883a 	add	r2,r2,r16
    7d04:	14000136 	bltu	r2,r16,7d0c <__umoddi3+0xc8>
    7d08:	14413536 	bltu	r2,r17,81e0 <__umoddi3+0x59c>
    7d0c:	1463c83a 	sub	r17,r2,r17
    7d10:	8809883a 	mov	r4,r17
    7d14:	a80b883a 	mov	r5,r21
    7d18:	000945c0 	call	945c <__udivsi3>
    7d1c:	8809883a 	mov	r4,r17
    7d20:	a0a3383a 	mul	r17,r20,r2
    7d24:	a80b883a 	mov	r5,r21
    7d28:	00004d06 	br	7e60 <__umoddi3+0x21c>
    7d2c:	380d883a 	mov	r6,r7
    7d30:	29c0102e 	bgeu	r5,r7,7d74 <__umoddi3+0x130>
    7d34:	2011883a 	mov	r8,r4
    7d38:	2813883a 	mov	r9,r5
    7d3c:	4005883a 	mov	r2,r8
    7d40:	4807883a 	mov	r3,r9
    7d44:	dfc00e17 	ldw	ra,56(sp)
    7d48:	df000d17 	ldw	fp,52(sp)
    7d4c:	ddc00c17 	ldw	r23,48(sp)
    7d50:	dd800b17 	ldw	r22,44(sp)
    7d54:	dd400a17 	ldw	r21,40(sp)
    7d58:	dd000917 	ldw	r20,36(sp)
    7d5c:	dcc00817 	ldw	r19,32(sp)
    7d60:	dc800717 	ldw	r18,28(sp)
    7d64:	dc400617 	ldw	r17,24(sp)
    7d68:	dc000517 	ldw	r16,20(sp)
    7d6c:	dec00f04 	addi	sp,sp,60
    7d70:	f800283a 	ret
    7d74:	00bfffd4 	movui	r2,65535
    7d78:	11c05a36 	bltu	r2,r7,7ee4 <__umoddi3+0x2a0>
    7d7c:	00803fc4 	movi	r2,255
    7d80:	11c0fe36 	bltu	r2,r7,817c <__umoddi3+0x538>
    7d84:	000b883a 	mov	r5,zero
    7d88:	0005883a 	mov	r2,zero
    7d8c:	3084d83a 	srl	r2,r6,r2
    7d90:	01000074 	movhi	r4,1
    7d94:	21350d04 	addi	r4,r4,-11212
    7d98:	01c00804 	movi	r7,32
    7d9c:	1105883a 	add	r2,r2,r4
    7da0:	10c00003 	ldbu	r3,0(r2)
    7da4:	28c7883a 	add	r3,r5,r3
    7da8:	38ebc83a 	sub	r21,r7,r3
    7dac:	a800851e 	bne	r21,zero,7fc4 <__umoddi3+0x380>
    7db0:	35005236 	bltu	r6,r20,7efc <__umoddi3+0x2b8>
    7db4:	b400512e 	bgeu	r22,r16,7efc <__umoddi3+0x2b8>
    7db8:	b011883a 	mov	r8,r22
    7dbc:	a013883a 	mov	r9,r20
    7dc0:	003fde06 	br	7d3c <__umoddi3+0xf8>
    7dc4:	00bfffd4 	movui	r2,65535
    7dc8:	11804036 	bltu	r2,r6,7ecc <__umoddi3+0x288>
    7dcc:	00803fc4 	movi	r2,255
    7dd0:	1180ed36 	bltu	r2,r6,8188 <__umoddi3+0x544>
    7dd4:	000b883a 	mov	r5,zero
    7dd8:	0005883a 	mov	r2,zero
    7ddc:	8084d83a 	srl	r2,r16,r2
    7de0:	01000074 	movhi	r4,1
    7de4:	21350d04 	addi	r4,r4,-11212
    7de8:	01800804 	movi	r6,32
    7dec:	1105883a 	add	r2,r2,r4
    7df0:	10c00003 	ldbu	r3,0(r2)
    7df4:	28c7883a 	add	r3,r5,r3
    7df8:	30c7c83a 	sub	r3,r6,r3
    7dfc:	1800bf1e 	bne	r3,zero,80fc <__umoddi3+0x4b8>
    7e00:	0039883a 	mov	fp,zero
    7e04:	802ad43a 	srli	r21,r16,16
    7e08:	a009883a 	mov	r4,r20
    7e0c:	85ffffcc 	andi	r23,r16,65535
    7e10:	a80b883a 	mov	r5,r21
    7e14:	000945c0 	call	945c <__udivsi3>
    7e18:	a009883a 	mov	r4,r20
    7e1c:	a80b883a 	mov	r5,r21
    7e20:	b8a3383a 	mul	r17,r23,r2
    7e24:	00094640 	call	9464 <__umodsi3>
    7e28:	1004943a 	slli	r2,r2,16
    7e2c:	b006d43a 	srli	r3,r22,16
    7e30:	10c4b03a 	or	r2,r2,r3
    7e34:	1440032e 	bgeu	r2,r17,7e44 <__umoddi3+0x200>
    7e38:	1405883a 	add	r2,r2,r16
    7e3c:	14000136 	bltu	r2,r16,7e44 <__umoddi3+0x200>
    7e40:	1440e536 	bltu	r2,r17,81d8 <__umoddi3+0x594>
    7e44:	1463c83a 	sub	r17,r2,r17
    7e48:	8809883a 	mov	r4,r17
    7e4c:	a80b883a 	mov	r5,r21
    7e50:	000945c0 	call	945c <__udivsi3>
    7e54:	8809883a 	mov	r4,r17
    7e58:	b8a3383a 	mul	r17,r23,r2
    7e5c:	a80b883a 	mov	r5,r21
    7e60:	00094640 	call	9464 <__umodsi3>
    7e64:	1004943a 	slli	r2,r2,16
    7e68:	b0ffffcc 	andi	r3,r22,65535
    7e6c:	10c4b03a 	or	r2,r2,r3
    7e70:	1440042e 	bgeu	r2,r17,7e84 <__umoddi3+0x240>
    7e74:	1405883a 	add	r2,r2,r16
    7e78:	14000236 	bltu	r2,r16,7e84 <__umoddi3+0x240>
    7e7c:	1440012e 	bgeu	r2,r17,7e84 <__umoddi3+0x240>
    7e80:	1405883a 	add	r2,r2,r16
    7e84:	1445c83a 	sub	r2,r2,r17
    7e88:	1724d83a 	srl	r18,r2,fp
    7e8c:	0013883a 	mov	r9,zero
    7e90:	9011883a 	mov	r8,r18
    7e94:	003fa906 	br	7d3c <__umoddi3+0xf8>
    7e98:	00804034 	movhi	r2,256
    7e9c:	10bfffc4 	addi	r2,r2,-1
    7ea0:	1400b036 	bltu	r2,r16,8164 <__umoddi3+0x520>
    7ea4:	01400404 	movi	r5,16
    7ea8:	2805883a 	mov	r2,r5
    7eac:	003f7c06 	br	7ca0 <__umoddi3+0x5c>
    7eb0:	01000044 	movi	r4,1
    7eb4:	000b883a 	mov	r5,zero
    7eb8:	000945c0 	call	945c <__udivsi3>
    7ebc:	1021883a 	mov	r16,r2
    7ec0:	00bfffd4 	movui	r2,65535
    7ec4:	143ff436 	bltu	r2,r16,7e98 <__umoddi3+0x254>
    7ec8:	003f7106 	br	7c90 <__umoddi3+0x4c>
    7ecc:	00804034 	movhi	r2,256
    7ed0:	10bfffc4 	addi	r2,r2,-1
    7ed4:	1180af36 	bltu	r2,r6,8194 <__umoddi3+0x550>
    7ed8:	01400404 	movi	r5,16
    7edc:	2805883a 	mov	r2,r5
    7ee0:	003fbe06 	br	7ddc <__umoddi3+0x198>
    7ee4:	00804034 	movhi	r2,256
    7ee8:	10bfffc4 	addi	r2,r2,-1
    7eec:	11c0ac36 	bltu	r2,r7,81a0 <__umoddi3+0x55c>
    7ef0:	01400404 	movi	r5,16
    7ef4:	2805883a 	mov	r2,r5
    7ef8:	003fa406 	br	7d8c <__umoddi3+0x148>
    7efc:	b409c83a 	sub	r4,r22,r16
    7f00:	b105803a 	cmpltu	r2,r22,r4
    7f04:	a187c83a 	sub	r3,r20,r6
    7f08:	18a9c83a 	sub	r20,r3,r2
    7f0c:	202d883a 	mov	r22,r4
    7f10:	003fa906 	br	7db8 <__umoddi3+0x174>
    7f14:	85e0983a 	sll	r16,r16,r23
    7f18:	35c5c83a 	sub	r2,r6,r23
    7f1c:	a0a2d83a 	srl	r17,r20,r2
    7f20:	802ad43a 	srli	r21,r16,16
    7f24:	b084d83a 	srl	r2,r22,r2
    7f28:	a5c6983a 	sll	r3,r20,r23
    7f2c:	8809883a 	mov	r4,r17
    7f30:	a80b883a 	mov	r5,r21
    7f34:	1886b03a 	or	r3,r3,r2
    7f38:	d8c00115 	stw	r3,4(sp)
    7f3c:	853fffcc 	andi	r20,r16,65535
    7f40:	000945c0 	call	945c <__udivsi3>
    7f44:	8809883a 	mov	r4,r17
    7f48:	a80b883a 	mov	r5,r21
    7f4c:	a0a3383a 	mul	r17,r20,r2
    7f50:	00094640 	call	9464 <__umodsi3>
    7f54:	d9000117 	ldw	r4,4(sp)
    7f58:	1004943a 	slli	r2,r2,16
    7f5c:	b839883a 	mov	fp,r23
    7f60:	2006d43a 	srli	r3,r4,16
    7f64:	10c4b03a 	or	r2,r2,r3
    7f68:	1440022e 	bgeu	r2,r17,7f74 <__umoddi3+0x330>
    7f6c:	1405883a 	add	r2,r2,r16
    7f70:	1400962e 	bgeu	r2,r16,81cc <__umoddi3+0x588>
    7f74:	1463c83a 	sub	r17,r2,r17
    7f78:	8809883a 	mov	r4,r17
    7f7c:	a80b883a 	mov	r5,r21
    7f80:	000945c0 	call	945c <__udivsi3>
    7f84:	8809883a 	mov	r4,r17
    7f88:	a80b883a 	mov	r5,r21
    7f8c:	a0a3383a 	mul	r17,r20,r2
    7f90:	00094640 	call	9464 <__umodsi3>
    7f94:	d9400117 	ldw	r5,4(sp)
    7f98:	1004943a 	slli	r2,r2,16
    7f9c:	28ffffcc 	andi	r3,r5,65535
    7fa0:	10c4b03a 	or	r2,r2,r3
    7fa4:	1440042e 	bgeu	r2,r17,7fb8 <__umoddi3+0x374>
    7fa8:	1405883a 	add	r2,r2,r16
    7fac:	14000236 	bltu	r2,r16,7fb8 <__umoddi3+0x374>
    7fb0:	1440012e 	bgeu	r2,r17,7fb8 <__umoddi3+0x374>
    7fb4:	1405883a 	add	r2,r2,r16
    7fb8:	b5ec983a 	sll	r22,r22,r23
    7fbc:	1463c83a 	sub	r17,r2,r17
    7fc0:	003f4406 	br	7cd4 <__umoddi3+0x90>
    7fc4:	3d4fc83a 	sub	r7,r7,r21
    7fc8:	3546983a 	sll	r3,r6,r21
    7fcc:	81c4d83a 	srl	r2,r16,r7
    7fd0:	a1e2d83a 	srl	r17,r20,r7
    7fd4:	a54c983a 	sll	r6,r20,r21
    7fd8:	18aeb03a 	or	r23,r3,r2
    7fdc:	b828d43a 	srli	r20,r23,16
    7fe0:	b1c4d83a 	srl	r2,r22,r7
    7fe4:	8809883a 	mov	r4,r17
    7fe8:	a00b883a 	mov	r5,r20
    7fec:	308cb03a 	or	r6,r6,r2
    7ff0:	d9c00315 	stw	r7,12(sp)
    7ff4:	d9800215 	stw	r6,8(sp)
    7ff8:	000945c0 	call	945c <__udivsi3>
    7ffc:	8809883a 	mov	r4,r17
    8000:	a00b883a 	mov	r5,r20
    8004:	1039883a 	mov	fp,r2
    8008:	00094640 	call	9464 <__umodsi3>
    800c:	b8ffffcc 	andi	r3,r23,65535
    8010:	d8c00415 	stw	r3,16(sp)
    8014:	d9000217 	ldw	r4,8(sp)
    8018:	d9400417 	ldw	r5,16(sp)
    801c:	1004943a 	slli	r2,r2,16
    8020:	2006d43a 	srli	r3,r4,16
    8024:	8560983a 	sll	r16,r16,r21
    8028:	2f23383a 	mul	r17,r5,fp
    802c:	10c4b03a 	or	r2,r2,r3
    8030:	dc000015 	stw	r16,0(sp)
    8034:	b56c983a 	sll	r22,r22,r21
    8038:	1440032e 	bgeu	r2,r17,8048 <__umoddi3+0x404>
    803c:	15c5883a 	add	r2,r2,r23
    8040:	e73fffc4 	addi	fp,fp,-1
    8044:	15c05d2e 	bgeu	r2,r23,81bc <__umoddi3+0x578>
    8048:	1463c83a 	sub	r17,r2,r17
    804c:	8809883a 	mov	r4,r17
    8050:	a00b883a 	mov	r5,r20
    8054:	000945c0 	call	945c <__udivsi3>
    8058:	8809883a 	mov	r4,r17
    805c:	a00b883a 	mov	r5,r20
    8060:	1021883a 	mov	r16,r2
    8064:	00094640 	call	9464 <__umodsi3>
    8068:	d8c00417 	ldw	r3,16(sp)
    806c:	d9000217 	ldw	r4,8(sp)
    8070:	1004943a 	slli	r2,r2,16
    8074:	1c23383a 	mul	r17,r3,r16
    8078:	20ffffcc 	andi	r3,r4,65535
    807c:	10ceb03a 	or	r7,r2,r3
    8080:	3c40032e 	bgeu	r7,r17,8090 <__umoddi3+0x44c>
    8084:	3dcf883a 	add	r7,r7,r23
    8088:	843fffc4 	addi	r16,r16,-1
    808c:	3dc0472e 	bgeu	r7,r23,81ac <__umoddi3+0x568>
    8090:	e004943a 	slli	r2,fp,16
    8094:	d9400017 	ldw	r5,0(sp)
    8098:	3c4fc83a 	sub	r7,r7,r17
    809c:	8084b03a 	or	r2,r16,r2
    80a0:	28ffffcc 	andi	r3,r5,65535
    80a4:	280cd43a 	srli	r6,r5,16
    80a8:	100ad43a 	srli	r5,r2,16
    80ac:	10bfffcc 	andi	r2,r2,65535
    80b0:	10d1383a 	mul	r8,r2,r3
    80b4:	28c7383a 	mul	r3,r5,r3
    80b8:	1185383a 	mul	r2,r2,r6
    80bc:	4008d43a 	srli	r4,r8,16
    80c0:	298b383a 	mul	r5,r5,r6
    80c4:	10c5883a 	add	r2,r2,r3
    80c8:	2089883a 	add	r4,r4,r2
    80cc:	20c0022e 	bgeu	r4,r3,80d8 <__umoddi3+0x494>
    80d0:	00800074 	movhi	r2,1
    80d4:	288b883a 	add	r5,r5,r2
    80d8:	2004d43a 	srli	r2,r4,16
    80dc:	2008943a 	slli	r4,r4,16
    80e0:	40ffffcc 	andi	r3,r8,65535
    80e4:	288b883a 	add	r5,r5,r2
    80e8:	20c9883a 	add	r4,r4,r3
    80ec:	39400b36 	bltu	r7,r5,811c <__umoddi3+0x4d8>
    80f0:	39403d26 	beq	r7,r5,81e8 <__umoddi3+0x5a4>
    80f4:	394bc83a 	sub	r5,r7,r5
    80f8:	00000f06 	br	8138 <__umoddi3+0x4f4>
    80fc:	30c5c83a 	sub	r2,r6,r3
    8100:	1839883a 	mov	fp,r3
    8104:	b084d83a 	srl	r2,r22,r2
    8108:	a0c6983a 	sll	r3,r20,r3
    810c:	8720983a 	sll	r16,r16,fp
    8110:	b72c983a 	sll	r22,r22,fp
    8114:	18a8b03a 	or	r20,r3,r2
    8118:	003f3a06 	br	7e04 <__umoddi3+0x1c0>
    811c:	d8c00017 	ldw	r3,0(sp)
    8120:	20c5c83a 	sub	r2,r4,r3
    8124:	2089803a 	cmpltu	r4,r4,r2
    8128:	2dc7c83a 	sub	r3,r5,r23
    812c:	1907c83a 	sub	r3,r3,r4
    8130:	38cbc83a 	sub	r5,r7,r3
    8134:	1009883a 	mov	r4,r2
    8138:	b105c83a 	sub	r2,r22,r4
    813c:	b087803a 	cmpltu	r3,r22,r2
    8140:	28c7c83a 	sub	r3,r5,r3
    8144:	d9400317 	ldw	r5,12(sp)
    8148:	1544d83a 	srl	r2,r2,r21
    814c:	1948983a 	sll	r4,r3,r5
    8150:	1d46d83a 	srl	r3,r3,r21
    8154:	20a4b03a 	or	r18,r4,r2
    8158:	9011883a 	mov	r8,r18
    815c:	1813883a 	mov	r9,r3
    8160:	003ef606 	br	7d3c <__umoddi3+0xf8>
    8164:	01400604 	movi	r5,24
    8168:	2805883a 	mov	r2,r5
    816c:	003ecc06 	br	7ca0 <__umoddi3+0x5c>
    8170:	01400204 	movi	r5,8
    8174:	2805883a 	mov	r2,r5
    8178:	003ec906 	br	7ca0 <__umoddi3+0x5c>
    817c:	01400204 	movi	r5,8
    8180:	2805883a 	mov	r2,r5
    8184:	003f0106 	br	7d8c <__umoddi3+0x148>
    8188:	01400204 	movi	r5,8
    818c:	2805883a 	mov	r2,r5
    8190:	003f1206 	br	7ddc <__umoddi3+0x198>
    8194:	01400604 	movi	r5,24
    8198:	2805883a 	mov	r2,r5
    819c:	003f0f06 	br	7ddc <__umoddi3+0x198>
    81a0:	01400604 	movi	r5,24
    81a4:	2805883a 	mov	r2,r5
    81a8:	003ef806 	br	7d8c <__umoddi3+0x148>
    81ac:	3c7fb82e 	bgeu	r7,r17,8090 <__umoddi3+0x44c>
    81b0:	843fffc4 	addi	r16,r16,-1
    81b4:	3dcf883a 	add	r7,r7,r23
    81b8:	003fb506 	br	8090 <__umoddi3+0x44c>
    81bc:	147fa22e 	bgeu	r2,r17,8048 <__umoddi3+0x404>
    81c0:	e73fffc4 	addi	fp,fp,-1
    81c4:	15c5883a 	add	r2,r2,r23
    81c8:	003f9f06 	br	8048 <__umoddi3+0x404>
    81cc:	147f692e 	bgeu	r2,r17,7f74 <__umoddi3+0x330>
    81d0:	1405883a 	add	r2,r2,r16
    81d4:	003f6706 	br	7f74 <__umoddi3+0x330>
    81d8:	1405883a 	add	r2,r2,r16
    81dc:	003f1906 	br	7e44 <__umoddi3+0x200>
    81e0:	1405883a 	add	r2,r2,r16
    81e4:	003ec906 	br	7d0c <__umoddi3+0xc8>
    81e8:	b13fcc36 	bltu	r22,r4,811c <__umoddi3+0x4d8>
    81ec:	000b883a 	mov	r5,zero
    81f0:	003fd106 	br	8138 <__umoddi3+0x4f4>

000081f4 <_fpadd_parts>:
    81f4:	defff804 	addi	sp,sp,-32
    81f8:	dcc00315 	stw	r19,12(sp)
    81fc:	2027883a 	mov	r19,r4
    8200:	21000017 	ldw	r4,0(r4)
    8204:	00c00044 	movi	r3,1
    8208:	dd400515 	stw	r21,20(sp)
    820c:	dd000415 	stw	r20,16(sp)
    8210:	ddc00715 	stw	r23,28(sp)
    8214:	dd800615 	stw	r22,24(sp)
    8218:	dc800215 	stw	r18,8(sp)
    821c:	dc400115 	stw	r17,4(sp)
    8220:	dc000015 	stw	r16,0(sp)
    8224:	282b883a 	mov	r21,r5
    8228:	3029883a 	mov	r20,r6
    822c:	1900632e 	bgeu	r3,r4,83bc <_fpadd_parts+0x1c8>
    8230:	28800017 	ldw	r2,0(r5)
    8234:	1880812e 	bgeu	r3,r2,843c <_fpadd_parts+0x248>
    8238:	00c00104 	movi	r3,4
    823c:	20c0dc26 	beq	r4,r3,85b0 <_fpadd_parts+0x3bc>
    8240:	10c07e26 	beq	r2,r3,843c <_fpadd_parts+0x248>
    8244:	00c00084 	movi	r3,2
    8248:	10c06726 	beq	r2,r3,83e8 <_fpadd_parts+0x1f4>
    824c:	20c07b26 	beq	r4,r3,843c <_fpadd_parts+0x248>
    8250:	9dc00217 	ldw	r23,8(r19)
    8254:	28c00217 	ldw	r3,8(r5)
    8258:	9c400317 	ldw	r17,12(r19)
    825c:	2bc00317 	ldw	r15,12(r5)
    8260:	b8cdc83a 	sub	r6,r23,r3
    8264:	9c800417 	ldw	r18,16(r19)
    8268:	2c000417 	ldw	r16,16(r5)
    826c:	3009883a 	mov	r4,r6
    8270:	30009716 	blt	r6,zero,84d0 <_fpadd_parts+0x2dc>
    8274:	00800fc4 	movi	r2,63
    8278:	11806b16 	blt	r2,r6,8428 <_fpadd_parts+0x234>
    827c:	0100a40e 	bge	zero,r4,8510 <_fpadd_parts+0x31c>
    8280:	35bff804 	addi	r22,r6,-32
    8284:	b000bc16 	blt	r22,zero,8578 <_fpadd_parts+0x384>
    8288:	8596d83a 	srl	r11,r16,r22
    828c:	0019883a 	mov	r12,zero
    8290:	0013883a 	mov	r9,zero
    8294:	01000044 	movi	r4,1
    8298:	0015883a 	mov	r10,zero
    829c:	b000be16 	blt	r22,zero,8598 <_fpadd_parts+0x3a4>
    82a0:	2590983a 	sll	r8,r4,r22
    82a4:	000f883a 	mov	r7,zero
    82a8:	00bfffc4 	movi	r2,-1
    82ac:	3889883a 	add	r4,r7,r2
    82b0:	408b883a 	add	r5,r8,r2
    82b4:	21cd803a 	cmpltu	r6,r4,r7
    82b8:	314b883a 	add	r5,r6,r5
    82bc:	7904703a 	and	r2,r15,r4
    82c0:	8146703a 	and	r3,r16,r5
    82c4:	10c4b03a 	or	r2,r2,r3
    82c8:	10000226 	beq	r2,zero,82d4 <_fpadd_parts+0xe0>
    82cc:	02400044 	movi	r9,1
    82d0:	0015883a 	mov	r10,zero
    82d4:	5a5eb03a 	or	r15,r11,r9
    82d8:	62a0b03a 	or	r16,r12,r10
    82dc:	99400117 	ldw	r5,4(r19)
    82e0:	a8800117 	ldw	r2,4(r21)
    82e4:	28806e26 	beq	r5,r2,84a0 <_fpadd_parts+0x2ac>
    82e8:	28006626 	beq	r5,zero,8484 <_fpadd_parts+0x290>
    82ec:	7c45c83a 	sub	r2,r15,r17
    82f0:	7889803a 	cmpltu	r4,r15,r2
    82f4:	8487c83a 	sub	r3,r16,r18
    82f8:	1909c83a 	sub	r4,r3,r4
    82fc:	100d883a 	mov	r6,r2
    8300:	200f883a 	mov	r7,r4
    8304:	38007716 	blt	r7,zero,84e4 <_fpadd_parts+0x2f0>
    8308:	a5c00215 	stw	r23,8(r20)
    830c:	a1c00415 	stw	r7,16(r20)
    8310:	a0000115 	stw	zero,4(r20)
    8314:	a1800315 	stw	r6,12(r20)
    8318:	a2000317 	ldw	r8,12(r20)
    831c:	a2400417 	ldw	r9,16(r20)
    8320:	00bfffc4 	movi	r2,-1
    8324:	408b883a 	add	r5,r8,r2
    8328:	2a09803a 	cmpltu	r4,r5,r8
    832c:	488d883a 	add	r6,r9,r2
    8330:	01c40034 	movhi	r7,4096
    8334:	39ffffc4 	addi	r7,r7,-1
    8338:	218d883a 	add	r6,r4,r6
    833c:	39801736 	bltu	r7,r6,839c <_fpadd_parts+0x1a8>
    8340:	31c06526 	beq	r6,r7,84d8 <_fpadd_parts+0x2e4>
    8344:	a3000217 	ldw	r12,8(r20)
    8348:	4209883a 	add	r4,r8,r8
    834c:	00bfffc4 	movi	r2,-1
    8350:	220f803a 	cmpltu	r7,r4,r8
    8354:	4a4b883a 	add	r5,r9,r9
    8358:	394f883a 	add	r7,r7,r5
    835c:	2095883a 	add	r10,r4,r2
    8360:	3897883a 	add	r11,r7,r2
    8364:	510d803a 	cmpltu	r6,r10,r4
    8368:	6099883a 	add	r12,r12,r2
    836c:	32d7883a 	add	r11,r6,r11
    8370:	00840034 	movhi	r2,4096
    8374:	10bfffc4 	addi	r2,r2,-1
    8378:	2011883a 	mov	r8,r4
    837c:	3813883a 	mov	r9,r7
    8380:	a1000315 	stw	r4,12(r20)
    8384:	a1c00415 	stw	r7,16(r20)
    8388:	a3000215 	stw	r12,8(r20)
    838c:	12c00336 	bltu	r2,r11,839c <_fpadd_parts+0x1a8>
    8390:	58bfed1e 	bne	r11,r2,8348 <_fpadd_parts+0x154>
    8394:	00bfff84 	movi	r2,-2
    8398:	12bfeb2e 	bgeu	r2,r10,8348 <_fpadd_parts+0x154>
    839c:	a2800417 	ldw	r10,16(r20)
    83a0:	008000c4 	movi	r2,3
    83a4:	00c80034 	movhi	r3,8192
    83a8:	18ffffc4 	addi	r3,r3,-1
    83ac:	a2400317 	ldw	r9,12(r20)
    83b0:	a0800015 	stw	r2,0(r20)
    83b4:	1a802336 	bltu	r3,r10,8444 <_fpadd_parts+0x250>
    83b8:	a027883a 	mov	r19,r20
    83bc:	9805883a 	mov	r2,r19
    83c0:	ddc00717 	ldw	r23,28(sp)
    83c4:	dd800617 	ldw	r22,24(sp)
    83c8:	dd400517 	ldw	r21,20(sp)
    83cc:	dd000417 	ldw	r20,16(sp)
    83d0:	dcc00317 	ldw	r19,12(sp)
    83d4:	dc800217 	ldw	r18,8(sp)
    83d8:	dc400117 	ldw	r17,4(sp)
    83dc:	dc000017 	ldw	r16,0(sp)
    83e0:	dec00804 	addi	sp,sp,32
    83e4:	f800283a 	ret
    83e8:	20fff41e 	bne	r4,r3,83bc <_fpadd_parts+0x1c8>
    83ec:	31000015 	stw	r4,0(r6)
    83f0:	98800117 	ldw	r2,4(r19)
    83f4:	30800115 	stw	r2,4(r6)
    83f8:	98c00217 	ldw	r3,8(r19)
    83fc:	30c00215 	stw	r3,8(r6)
    8400:	98800317 	ldw	r2,12(r19)
    8404:	30800315 	stw	r2,12(r6)
    8408:	98c00417 	ldw	r3,16(r19)
    840c:	30c00415 	stw	r3,16(r6)
    8410:	98800117 	ldw	r2,4(r19)
    8414:	28c00117 	ldw	r3,4(r5)
    8418:	3027883a 	mov	r19,r6
    841c:	10c4703a 	and	r2,r2,r3
    8420:	30800115 	stw	r2,4(r6)
    8424:	003fe506 	br	83bc <_fpadd_parts+0x1c8>
    8428:	1dc02616 	blt	r3,r23,84c4 <_fpadd_parts+0x2d0>
    842c:	0023883a 	mov	r17,zero
    8430:	182f883a 	mov	r23,r3
    8434:	0025883a 	mov	r18,zero
    8438:	003fa806 	br	82dc <_fpadd_parts+0xe8>
    843c:	a827883a 	mov	r19,r21
    8440:	003fde06 	br	83bc <_fpadd_parts+0x1c8>
    8444:	01800044 	movi	r6,1
    8448:	500497fa 	slli	r2,r10,31
    844c:	4808d07a 	srli	r4,r9,1
    8450:	518ad83a 	srl	r5,r10,r6
    8454:	a2000217 	ldw	r8,8(r20)
    8458:	1108b03a 	or	r4,r2,r4
    845c:	0007883a 	mov	r3,zero
    8460:	4984703a 	and	r2,r9,r6
    8464:	208cb03a 	or	r6,r4,r2
    8468:	28ceb03a 	or	r7,r5,r3
    846c:	42000044 	addi	r8,r8,1
    8470:	a027883a 	mov	r19,r20
    8474:	a1c00415 	stw	r7,16(r20)
    8478:	a2000215 	stw	r8,8(r20)
    847c:	a1800315 	stw	r6,12(r20)
    8480:	003fce06 	br	83bc <_fpadd_parts+0x1c8>
    8484:	8bc5c83a 	sub	r2,r17,r15
    8488:	8889803a 	cmpltu	r4,r17,r2
    848c:	9407c83a 	sub	r3,r18,r16
    8490:	1909c83a 	sub	r4,r3,r4
    8494:	100d883a 	mov	r6,r2
    8498:	200f883a 	mov	r7,r4
    849c:	003f9906 	br	8304 <_fpadd_parts+0x110>
    84a0:	7c45883a 	add	r2,r15,r17
    84a4:	13c9803a 	cmpltu	r4,r2,r15
    84a8:	8487883a 	add	r3,r16,r18
    84ac:	20c9883a 	add	r4,r4,r3
    84b0:	a1400115 	stw	r5,4(r20)
    84b4:	a5c00215 	stw	r23,8(r20)
    84b8:	a0800315 	stw	r2,12(r20)
    84bc:	a1000415 	stw	r4,16(r20)
    84c0:	003fb606 	br	839c <_fpadd_parts+0x1a8>
    84c4:	001f883a 	mov	r15,zero
    84c8:	0021883a 	mov	r16,zero
    84cc:	003f8306 	br	82dc <_fpadd_parts+0xe8>
    84d0:	018dc83a 	sub	r6,zero,r6
    84d4:	003f6706 	br	8274 <_fpadd_parts+0x80>
    84d8:	00bfff84 	movi	r2,-2
    84dc:	117faf36 	bltu	r2,r5,839c <_fpadd_parts+0x1a8>
    84e0:	003f9806 	br	8344 <_fpadd_parts+0x150>
    84e4:	0005883a 	mov	r2,zero
    84e8:	1189c83a 	sub	r4,r2,r6
    84ec:	1105803a 	cmpltu	r2,r2,r4
    84f0:	01cbc83a 	sub	r5,zero,r7
    84f4:	2885c83a 	sub	r2,r5,r2
    84f8:	01800044 	movi	r6,1
    84fc:	a1800115 	stw	r6,4(r20)
    8500:	a5c00215 	stw	r23,8(r20)
    8504:	a1000315 	stw	r4,12(r20)
    8508:	a0800415 	stw	r2,16(r20)
    850c:	003f8206 	br	8318 <_fpadd_parts+0x124>
    8510:	203f7226 	beq	r4,zero,82dc <_fpadd_parts+0xe8>
    8514:	35bff804 	addi	r22,r6,-32
    8518:	b9af883a 	add	r23,r23,r6
    851c:	b0003116 	blt	r22,zero,85e4 <_fpadd_parts+0x3f0>
    8520:	959ad83a 	srl	r13,r18,r22
    8524:	001d883a 	mov	r14,zero
    8528:	000f883a 	mov	r7,zero
    852c:	01000044 	movi	r4,1
    8530:	0011883a 	mov	r8,zero
    8534:	b0002516 	blt	r22,zero,85cc <_fpadd_parts+0x3d8>
    8538:	2594983a 	sll	r10,r4,r22
    853c:	0013883a 	mov	r9,zero
    8540:	00bfffc4 	movi	r2,-1
    8544:	4889883a 	add	r4,r9,r2
    8548:	508b883a 	add	r5,r10,r2
    854c:	224d803a 	cmpltu	r6,r4,r9
    8550:	314b883a 	add	r5,r6,r5
    8554:	8904703a 	and	r2,r17,r4
    8558:	9146703a 	and	r3,r18,r5
    855c:	10c4b03a 	or	r2,r2,r3
    8560:	10000226 	beq	r2,zero,856c <_fpadd_parts+0x378>
    8564:	01c00044 	movi	r7,1
    8568:	0011883a 	mov	r8,zero
    856c:	69e2b03a 	or	r17,r13,r7
    8570:	7224b03a 	or	r18,r14,r8
    8574:	003f5906 	br	82dc <_fpadd_parts+0xe8>
    8578:	8407883a 	add	r3,r16,r16
    857c:	008007c4 	movi	r2,31
    8580:	1185c83a 	sub	r2,r2,r6
    8584:	1886983a 	sll	r3,r3,r2
    8588:	7996d83a 	srl	r11,r15,r6
    858c:	8198d83a 	srl	r12,r16,r6
    8590:	1ad6b03a 	or	r11,r3,r11
    8594:	003f3e06 	br	8290 <_fpadd_parts+0x9c>
    8598:	2006d07a 	srli	r3,r4,1
    859c:	008007c4 	movi	r2,31
    85a0:	1185c83a 	sub	r2,r2,r6
    85a4:	1890d83a 	srl	r8,r3,r2
    85a8:	218e983a 	sll	r7,r4,r6
    85ac:	003f3e06 	br	82a8 <_fpadd_parts+0xb4>
    85b0:	113f821e 	bne	r2,r4,83bc <_fpadd_parts+0x1c8>
    85b4:	28c00117 	ldw	r3,4(r5)
    85b8:	98800117 	ldw	r2,4(r19)
    85bc:	10ff7f26 	beq	r2,r3,83bc <_fpadd_parts+0x1c8>
    85c0:	04c00074 	movhi	r19,1
    85c4:	9cf50804 	addi	r19,r19,-11232
    85c8:	003f7c06 	br	83bc <_fpadd_parts+0x1c8>
    85cc:	2006d07a 	srli	r3,r4,1
    85d0:	008007c4 	movi	r2,31
    85d4:	1185c83a 	sub	r2,r2,r6
    85d8:	1894d83a 	srl	r10,r3,r2
    85dc:	2192983a 	sll	r9,r4,r6
    85e0:	003fd706 	br	8540 <_fpadd_parts+0x34c>
    85e4:	9487883a 	add	r3,r18,r18
    85e8:	008007c4 	movi	r2,31
    85ec:	1185c83a 	sub	r2,r2,r6
    85f0:	1886983a 	sll	r3,r3,r2
    85f4:	899ad83a 	srl	r13,r17,r6
    85f8:	919cd83a 	srl	r14,r18,r6
    85fc:	1b5ab03a 	or	r13,r3,r13
    8600:	003fc906 	br	8528 <_fpadd_parts+0x334>

00008604 <__subdf3>:
    8604:	deffea04 	addi	sp,sp,-88
    8608:	dcc01415 	stw	r19,80(sp)
    860c:	dcc00404 	addi	r19,sp,16
    8610:	2011883a 	mov	r8,r4
    8614:	2813883a 	mov	r9,r5
    8618:	dc401315 	stw	r17,76(sp)
    861c:	d809883a 	mov	r4,sp
    8620:	980b883a 	mov	r5,r19
    8624:	dc400904 	addi	r17,sp,36
    8628:	dfc01515 	stw	ra,84(sp)
    862c:	da400115 	stw	r9,4(sp)
    8630:	d9c00315 	stw	r7,12(sp)
    8634:	da000015 	stw	r8,0(sp)
    8638:	d9800215 	stw	r6,8(sp)
    863c:	00098980 	call	9898 <__unpack_d>
    8640:	d9000204 	addi	r4,sp,8
    8644:	880b883a 	mov	r5,r17
    8648:	00098980 	call	9898 <__unpack_d>
    864c:	d8800a17 	ldw	r2,40(sp)
    8650:	880b883a 	mov	r5,r17
    8654:	9809883a 	mov	r4,r19
    8658:	d9800e04 	addi	r6,sp,56
    865c:	1080005c 	xori	r2,r2,1
    8660:	d8800a15 	stw	r2,40(sp)
    8664:	00081f40 	call	81f4 <_fpadd_parts>
    8668:	1009883a 	mov	r4,r2
    866c:	00095840 	call	9584 <__pack_d>
    8670:	dfc01517 	ldw	ra,84(sp)
    8674:	dcc01417 	ldw	r19,80(sp)
    8678:	dc401317 	ldw	r17,76(sp)
    867c:	dec01604 	addi	sp,sp,88
    8680:	f800283a 	ret

00008684 <__adddf3>:
    8684:	deffea04 	addi	sp,sp,-88
    8688:	dcc01415 	stw	r19,80(sp)
    868c:	dcc00404 	addi	r19,sp,16
    8690:	2011883a 	mov	r8,r4
    8694:	2813883a 	mov	r9,r5
    8698:	dc401315 	stw	r17,76(sp)
    869c:	d809883a 	mov	r4,sp
    86a0:	980b883a 	mov	r5,r19
    86a4:	dc400904 	addi	r17,sp,36
    86a8:	dfc01515 	stw	ra,84(sp)
    86ac:	da400115 	stw	r9,4(sp)
    86b0:	d9c00315 	stw	r7,12(sp)
    86b4:	da000015 	stw	r8,0(sp)
    86b8:	d9800215 	stw	r6,8(sp)
    86bc:	00098980 	call	9898 <__unpack_d>
    86c0:	d9000204 	addi	r4,sp,8
    86c4:	880b883a 	mov	r5,r17
    86c8:	00098980 	call	9898 <__unpack_d>
    86cc:	d9800e04 	addi	r6,sp,56
    86d0:	9809883a 	mov	r4,r19
    86d4:	880b883a 	mov	r5,r17
    86d8:	00081f40 	call	81f4 <_fpadd_parts>
    86dc:	1009883a 	mov	r4,r2
    86e0:	00095840 	call	9584 <__pack_d>
    86e4:	dfc01517 	ldw	ra,84(sp)
    86e8:	dcc01417 	ldw	r19,80(sp)
    86ec:	dc401317 	ldw	r17,76(sp)
    86f0:	dec01604 	addi	sp,sp,88
    86f4:	f800283a 	ret

000086f8 <__muldf3>:
    86f8:	deffe004 	addi	sp,sp,-128
    86fc:	dc401815 	stw	r17,96(sp)
    8700:	dc400404 	addi	r17,sp,16
    8704:	2011883a 	mov	r8,r4
    8708:	2813883a 	mov	r9,r5
    870c:	dc001715 	stw	r16,92(sp)
    8710:	d809883a 	mov	r4,sp
    8714:	880b883a 	mov	r5,r17
    8718:	dc000904 	addi	r16,sp,36
    871c:	dfc01f15 	stw	ra,124(sp)
    8720:	da400115 	stw	r9,4(sp)
    8724:	d9c00315 	stw	r7,12(sp)
    8728:	da000015 	stw	r8,0(sp)
    872c:	d9800215 	stw	r6,8(sp)
    8730:	ddc01e15 	stw	r23,120(sp)
    8734:	dd801d15 	stw	r22,116(sp)
    8738:	dd401c15 	stw	r21,112(sp)
    873c:	dd001b15 	stw	r20,108(sp)
    8740:	dcc01a15 	stw	r19,104(sp)
    8744:	dc801915 	stw	r18,100(sp)
    8748:	00098980 	call	9898 <__unpack_d>
    874c:	d9000204 	addi	r4,sp,8
    8750:	800b883a 	mov	r5,r16
    8754:	00098980 	call	9898 <__unpack_d>
    8758:	d9000417 	ldw	r4,16(sp)
    875c:	00800044 	movi	r2,1
    8760:	1100102e 	bgeu	r2,r4,87a4 <__muldf3+0xac>
    8764:	d8c00917 	ldw	r3,36(sp)
    8768:	10c0062e 	bgeu	r2,r3,8784 <__muldf3+0x8c>
    876c:	00800104 	movi	r2,4
    8770:	20800a26 	beq	r4,r2,879c <__muldf3+0xa4>
    8774:	1880cc26 	beq	r3,r2,8aa8 <__muldf3+0x3b0>
    8778:	00800084 	movi	r2,2
    877c:	20800926 	beq	r4,r2,87a4 <__muldf3+0xac>
    8780:	1880191e 	bne	r3,r2,87e8 <__muldf3+0xf0>
    8784:	d8c00a17 	ldw	r3,40(sp)
    8788:	d8800517 	ldw	r2,20(sp)
    878c:	8009883a 	mov	r4,r16
    8790:	10c4c03a 	cmpne	r2,r2,r3
    8794:	d8800a15 	stw	r2,40(sp)
    8798:	00000706 	br	87b8 <__muldf3+0xc0>
    879c:	00800084 	movi	r2,2
    87a0:	1880c326 	beq	r3,r2,8ab0 <__muldf3+0x3b8>
    87a4:	d8800517 	ldw	r2,20(sp)
    87a8:	d8c00a17 	ldw	r3,40(sp)
    87ac:	8809883a 	mov	r4,r17
    87b0:	10c4c03a 	cmpne	r2,r2,r3
    87b4:	d8800515 	stw	r2,20(sp)
    87b8:	00095840 	call	9584 <__pack_d>
    87bc:	dfc01f17 	ldw	ra,124(sp)
    87c0:	ddc01e17 	ldw	r23,120(sp)
    87c4:	dd801d17 	ldw	r22,116(sp)
    87c8:	dd401c17 	ldw	r21,112(sp)
    87cc:	dd001b17 	ldw	r20,108(sp)
    87d0:	dcc01a17 	ldw	r19,104(sp)
    87d4:	dc801917 	ldw	r18,100(sp)
    87d8:	dc401817 	ldw	r17,96(sp)
    87dc:	dc001717 	ldw	r16,92(sp)
    87e0:	dec02004 	addi	sp,sp,128
    87e4:	f800283a 	ret
    87e8:	dd800717 	ldw	r22,28(sp)
    87ec:	dc800c17 	ldw	r18,48(sp)
    87f0:	002b883a 	mov	r21,zero
    87f4:	0023883a 	mov	r17,zero
    87f8:	a80b883a 	mov	r5,r21
    87fc:	b00d883a 	mov	r6,r22
    8800:	880f883a 	mov	r7,r17
    8804:	ddc00817 	ldw	r23,32(sp)
    8808:	dcc00d17 	ldw	r19,52(sp)
    880c:	9009883a 	mov	r4,r18
    8810:	000946c0 	call	946c <__muldi3>
    8814:	001b883a 	mov	r13,zero
    8818:	680f883a 	mov	r7,r13
    881c:	b009883a 	mov	r4,r22
    8820:	000b883a 	mov	r5,zero
    8824:	980d883a 	mov	r6,r19
    8828:	b82d883a 	mov	r22,r23
    882c:	002f883a 	mov	r23,zero
    8830:	db401615 	stw	r13,88(sp)
    8834:	d8801315 	stw	r2,76(sp)
    8838:	d8c01415 	stw	r3,80(sp)
    883c:	dcc01515 	stw	r19,84(sp)
    8840:	000946c0 	call	946c <__muldi3>
    8844:	b00d883a 	mov	r6,r22
    8848:	000b883a 	mov	r5,zero
    884c:	9009883a 	mov	r4,r18
    8850:	b80f883a 	mov	r7,r23
    8854:	1021883a 	mov	r16,r2
    8858:	1823883a 	mov	r17,r3
    885c:	000946c0 	call	946c <__muldi3>
    8860:	8085883a 	add	r2,r16,r2
    8864:	140d803a 	cmpltu	r6,r2,r16
    8868:	88c7883a 	add	r3,r17,r3
    886c:	30cd883a 	add	r6,r6,r3
    8870:	1029883a 	mov	r20,r2
    8874:	302b883a 	mov	r21,r6
    8878:	da801317 	ldw	r10,76(sp)
    887c:	dac01417 	ldw	r11,80(sp)
    8880:	db001517 	ldw	r12,84(sp)
    8884:	db401617 	ldw	r13,88(sp)
    8888:	3440612e 	bgeu	r6,r17,8a10 <__muldf3+0x318>
    888c:	0009883a 	mov	r4,zero
    8890:	5105883a 	add	r2,r10,r4
    8894:	128d803a 	cmpltu	r6,r2,r10
    8898:	5d07883a 	add	r3,r11,r20
    889c:	30cd883a 	add	r6,r6,r3
    88a0:	0021883a 	mov	r16,zero
    88a4:	04400044 	movi	r17,1
    88a8:	1025883a 	mov	r18,r2
    88ac:	3027883a 	mov	r19,r6
    88b0:	32c06236 	bltu	r6,r11,8a3c <__muldf3+0x344>
    88b4:	59807a26 	beq	r11,r6,8aa0 <__muldf3+0x3a8>
    88b8:	680b883a 	mov	r5,r13
    88bc:	b80f883a 	mov	r7,r23
    88c0:	6009883a 	mov	r4,r12
    88c4:	b00d883a 	mov	r6,r22
    88c8:	000946c0 	call	946c <__muldi3>
    88cc:	1009883a 	mov	r4,r2
    88d0:	000f883a 	mov	r7,zero
    88d4:	1545883a 	add	r2,r2,r21
    88d8:	1111803a 	cmpltu	r8,r2,r4
    88dc:	19c7883a 	add	r3,r3,r7
    88e0:	40c7883a 	add	r3,r8,r3
    88e4:	88cb883a 	add	r5,r17,r3
    88e8:	d8c00617 	ldw	r3,24(sp)
    88ec:	8089883a 	add	r4,r16,r2
    88f0:	d8800b17 	ldw	r2,44(sp)
    88f4:	18c00104 	addi	r3,r3,4
    88f8:	240d803a 	cmpltu	r6,r4,r16
    88fc:	10c7883a 	add	r3,r2,r3
    8900:	2013883a 	mov	r9,r4
    8904:	d8800a17 	ldw	r2,40(sp)
    8908:	d9000517 	ldw	r4,20(sp)
    890c:	314d883a 	add	r6,r6,r5
    8910:	3015883a 	mov	r10,r6
    8914:	2088c03a 	cmpne	r4,r4,r2
    8918:	00880034 	movhi	r2,8192
    891c:	10bfffc4 	addi	r2,r2,-1
    8920:	d9000f15 	stw	r4,60(sp)
    8924:	d8c01015 	stw	r3,64(sp)
    8928:	1180162e 	bgeu	r2,r6,8984 <__muldf3+0x28c>
    892c:	1811883a 	mov	r8,r3
    8930:	101f883a 	mov	r15,r2
    8934:	980497fa 	slli	r2,r19,31
    8938:	9016d07a 	srli	r11,r18,1
    893c:	500697fa 	slli	r3,r10,31
    8940:	480cd07a 	srli	r6,r9,1
    8944:	500ed07a 	srli	r7,r10,1
    8948:	12d6b03a 	or	r11,r2,r11
    894c:	00800044 	movi	r2,1
    8950:	198cb03a 	or	r6,r3,r6
    8954:	4888703a 	and	r4,r9,r2
    8958:	9818d07a 	srli	r12,r19,1
    895c:	001b883a 	mov	r13,zero
    8960:	03a00034 	movhi	r14,32768
    8964:	3013883a 	mov	r9,r6
    8968:	3815883a 	mov	r10,r7
    896c:	4091883a 	add	r8,r8,r2
    8970:	20000226 	beq	r4,zero,897c <__muldf3+0x284>
    8974:	5b64b03a 	or	r18,r11,r13
    8978:	63a6b03a 	or	r19,r12,r14
    897c:	7abfed36 	bltu	r15,r10,8934 <__muldf3+0x23c>
    8980:	da001015 	stw	r8,64(sp)
    8984:	00840034 	movhi	r2,4096
    8988:	10bfffc4 	addi	r2,r2,-1
    898c:	12801436 	bltu	r2,r10,89e0 <__muldf3+0x2e8>
    8990:	da001017 	ldw	r8,64(sp)
    8994:	101f883a 	mov	r15,r2
    8998:	4a45883a 	add	r2,r9,r9
    899c:	124d803a 	cmpltu	r6,r2,r9
    89a0:	5287883a 	add	r3,r10,r10
    89a4:	9497883a 	add	r11,r18,r18
    89a8:	5c8f803a 	cmpltu	r7,r11,r18
    89ac:	9cd9883a 	add	r12,r19,r19
    89b0:	01000044 	movi	r4,1
    89b4:	30cd883a 	add	r6,r6,r3
    89b8:	3b0f883a 	add	r7,r7,r12
    89bc:	423fffc4 	addi	r8,r8,-1
    89c0:	1013883a 	mov	r9,r2
    89c4:	3015883a 	mov	r10,r6
    89c8:	111ab03a 	or	r13,r2,r4
    89cc:	98003016 	blt	r19,zero,8a90 <__muldf3+0x398>
    89d0:	5825883a 	mov	r18,r11
    89d4:	3827883a 	mov	r19,r7
    89d8:	7abfef2e 	bgeu	r15,r10,8998 <__muldf3+0x2a0>
    89dc:	da001015 	stw	r8,64(sp)
    89e0:	00803fc4 	movi	r2,255
    89e4:	488e703a 	and	r7,r9,r2
    89e8:	00802004 	movi	r2,128
    89ec:	0007883a 	mov	r3,zero
    89f0:	0011883a 	mov	r8,zero
    89f4:	38801826 	beq	r7,r2,8a58 <__muldf3+0x360>
    89f8:	008000c4 	movi	r2,3
    89fc:	d9000e04 	addi	r4,sp,56
    8a00:	da801215 	stw	r10,72(sp)
    8a04:	d8800e15 	stw	r2,56(sp)
    8a08:	da401115 	stw	r9,68(sp)
    8a0c:	003f6a06 	br	87b8 <__muldf3+0xc0>
    8a10:	89802126 	beq	r17,r6,8a98 <__muldf3+0x3a0>
    8a14:	0009883a 	mov	r4,zero
    8a18:	5105883a 	add	r2,r10,r4
    8a1c:	128d803a 	cmpltu	r6,r2,r10
    8a20:	5d07883a 	add	r3,r11,r20
    8a24:	30cd883a 	add	r6,r6,r3
    8a28:	0021883a 	mov	r16,zero
    8a2c:	0023883a 	mov	r17,zero
    8a30:	1025883a 	mov	r18,r2
    8a34:	3027883a 	mov	r19,r6
    8a38:	32ff9e2e 	bgeu	r6,r11,88b4 <__muldf3+0x1bc>
    8a3c:	00800044 	movi	r2,1
    8a40:	8089883a 	add	r4,r16,r2
    8a44:	240d803a 	cmpltu	r6,r4,r16
    8a48:	344d883a 	add	r6,r6,r17
    8a4c:	2021883a 	mov	r16,r4
    8a50:	3023883a 	mov	r17,r6
    8a54:	003f9806 	br	88b8 <__muldf3+0x1c0>
    8a58:	403fe71e 	bne	r8,zero,89f8 <__muldf3+0x300>
    8a5c:	01004004 	movi	r4,256
    8a60:	4904703a 	and	r2,r9,r4
    8a64:	10c4b03a 	or	r2,r2,r3
    8a68:	103fe31e 	bne	r2,zero,89f8 <__muldf3+0x300>
    8a6c:	94c4b03a 	or	r2,r18,r19
    8a70:	103fe126 	beq	r2,zero,89f8 <__muldf3+0x300>
    8a74:	49c5883a 	add	r2,r9,r7
    8a78:	1251803a 	cmpltu	r8,r2,r9
    8a7c:	4291883a 	add	r8,r8,r10
    8a80:	013fc004 	movi	r4,-256
    8a84:	1112703a 	and	r9,r2,r4
    8a88:	4015883a 	mov	r10,r8
    8a8c:	003fda06 	br	89f8 <__muldf3+0x300>
    8a90:	6813883a 	mov	r9,r13
    8a94:	003fce06 	br	89d0 <__muldf3+0x2d8>
    8a98:	143f7c36 	bltu	r2,r16,888c <__muldf3+0x194>
    8a9c:	003fdd06 	br	8a14 <__muldf3+0x31c>
    8aa0:	12bf852e 	bgeu	r2,r10,88b8 <__muldf3+0x1c0>
    8aa4:	003fe506 	br	8a3c <__muldf3+0x344>
    8aa8:	00800084 	movi	r2,2
    8aac:	20bf351e 	bne	r4,r2,8784 <__muldf3+0x8c>
    8ab0:	01000074 	movhi	r4,1
    8ab4:	21350804 	addi	r4,r4,-11232
    8ab8:	003f3f06 	br	87b8 <__muldf3+0xc0>

00008abc <__divdf3>:
    8abc:	deffed04 	addi	sp,sp,-76
    8ac0:	dcc01115 	stw	r19,68(sp)
    8ac4:	dcc00404 	addi	r19,sp,16
    8ac8:	2011883a 	mov	r8,r4
    8acc:	2813883a 	mov	r9,r5
    8ad0:	dc000e15 	stw	r16,56(sp)
    8ad4:	d809883a 	mov	r4,sp
    8ad8:	980b883a 	mov	r5,r19
    8adc:	dc000904 	addi	r16,sp,36
    8ae0:	dfc01215 	stw	ra,72(sp)
    8ae4:	da400115 	stw	r9,4(sp)
    8ae8:	d9c00315 	stw	r7,12(sp)
    8aec:	da000015 	stw	r8,0(sp)
    8af0:	d9800215 	stw	r6,8(sp)
    8af4:	dc801015 	stw	r18,64(sp)
    8af8:	dc400f15 	stw	r17,60(sp)
    8afc:	00098980 	call	9898 <__unpack_d>
    8b00:	d9000204 	addi	r4,sp,8
    8b04:	800b883a 	mov	r5,r16
    8b08:	00098980 	call	9898 <__unpack_d>
    8b0c:	d9000417 	ldw	r4,16(sp)
    8b10:	00800044 	movi	r2,1
    8b14:	11000b2e 	bgeu	r2,r4,8b44 <__divdf3+0x88>
    8b18:	d9400917 	ldw	r5,36(sp)
    8b1c:	1140762e 	bgeu	r2,r5,8cf8 <__divdf3+0x23c>
    8b20:	d8800517 	ldw	r2,20(sp)
    8b24:	d8c00a17 	ldw	r3,40(sp)
    8b28:	01800104 	movi	r6,4
    8b2c:	10c4f03a 	xor	r2,r2,r3
    8b30:	d8800515 	stw	r2,20(sp)
    8b34:	21800226 	beq	r4,r6,8b40 <__divdf3+0x84>
    8b38:	00800084 	movi	r2,2
    8b3c:	2080141e 	bne	r4,r2,8b90 <__divdf3+0xd4>
    8b40:	29000926 	beq	r5,r4,8b68 <__divdf3+0xac>
    8b44:	9809883a 	mov	r4,r19
    8b48:	00095840 	call	9584 <__pack_d>
    8b4c:	dfc01217 	ldw	ra,72(sp)
    8b50:	dcc01117 	ldw	r19,68(sp)
    8b54:	dc801017 	ldw	r18,64(sp)
    8b58:	dc400f17 	ldw	r17,60(sp)
    8b5c:	dc000e17 	ldw	r16,56(sp)
    8b60:	dec01304 	addi	sp,sp,76
    8b64:	f800283a 	ret
    8b68:	01000074 	movhi	r4,1
    8b6c:	21350804 	addi	r4,r4,-11232
    8b70:	00095840 	call	9584 <__pack_d>
    8b74:	dfc01217 	ldw	ra,72(sp)
    8b78:	dcc01117 	ldw	r19,68(sp)
    8b7c:	dc801017 	ldw	r18,64(sp)
    8b80:	dc400f17 	ldw	r17,60(sp)
    8b84:	dc000e17 	ldw	r16,56(sp)
    8b88:	dec01304 	addi	sp,sp,76
    8b8c:	f800283a 	ret
    8b90:	29805b26 	beq	r5,r6,8d00 <__divdf3+0x244>
    8b94:	28802d26 	beq	r5,r2,8c4c <__divdf3+0x190>
    8b98:	d8c00617 	ldw	r3,24(sp)
    8b9c:	d8800b17 	ldw	r2,44(sp)
    8ba0:	d9c00817 	ldw	r7,32(sp)
    8ba4:	dc400d17 	ldw	r17,52(sp)
    8ba8:	188bc83a 	sub	r5,r3,r2
    8bac:	d9800717 	ldw	r6,28(sp)
    8bb0:	dc000c17 	ldw	r16,48(sp)
    8bb4:	d9400615 	stw	r5,24(sp)
    8bb8:	3c403836 	bltu	r7,r17,8c9c <__divdf3+0x1e0>
    8bbc:	89c03626 	beq	r17,r7,8c98 <__divdf3+0x1dc>
    8bc0:	0015883a 	mov	r10,zero
    8bc4:	001d883a 	mov	r14,zero
    8bc8:	02c40034 	movhi	r11,4096
    8bcc:	001f883a 	mov	r15,zero
    8bd0:	003f883a 	mov	ra,zero
    8bd4:	04800f44 	movi	r18,61
    8bd8:	00000f06 	br	8c18 <__divdf3+0x15c>
    8bdc:	601d883a 	mov	r14,r12
    8be0:	681f883a 	mov	r15,r13
    8be4:	400d883a 	mov	r6,r8
    8be8:	100f883a 	mov	r7,r2
    8bec:	3191883a 	add	r8,r6,r6
    8bf0:	5808d07a 	srli	r4,r11,1
    8bf4:	4185803a 	cmpltu	r2,r8,r6
    8bf8:	39d3883a 	add	r9,r7,r7
    8bfc:	28c6b03a 	or	r3,r5,r3
    8c00:	1245883a 	add	r2,r2,r9
    8c04:	1815883a 	mov	r10,r3
    8c08:	2017883a 	mov	r11,r4
    8c0c:	400d883a 	mov	r6,r8
    8c10:	100f883a 	mov	r7,r2
    8c14:	fc801726 	beq	ra,r18,8c74 <__divdf3+0x1b8>
    8c18:	580a97fa 	slli	r5,r11,31
    8c1c:	5006d07a 	srli	r3,r10,1
    8c20:	ffc00044 	addi	ra,ra,1
    8c24:	3c7ff136 	bltu	r7,r17,8bec <__divdf3+0x130>
    8c28:	3411c83a 	sub	r8,r6,r16
    8c2c:	3205803a 	cmpltu	r2,r6,r8
    8c30:	3c53c83a 	sub	r9,r7,r17
    8c34:	7298b03a 	or	r12,r14,r10
    8c38:	7adab03a 	or	r13,r15,r11
    8c3c:	4885c83a 	sub	r2,r9,r2
    8c40:	89ffe61e 	bne	r17,r7,8bdc <__divdf3+0x120>
    8c44:	343fe936 	bltu	r6,r16,8bec <__divdf3+0x130>
    8c48:	003fe406 	br	8bdc <__divdf3+0x120>
    8c4c:	9809883a 	mov	r4,r19
    8c50:	d9800415 	stw	r6,16(sp)
    8c54:	00095840 	call	9584 <__pack_d>
    8c58:	dfc01217 	ldw	ra,72(sp)
    8c5c:	dcc01117 	ldw	r19,68(sp)
    8c60:	dc801017 	ldw	r18,64(sp)
    8c64:	dc400f17 	ldw	r17,60(sp)
    8c68:	dc000e17 	ldw	r16,56(sp)
    8c6c:	dec01304 	addi	sp,sp,76
    8c70:	f800283a 	ret
    8c74:	00803fc4 	movi	r2,255
    8c78:	7090703a 	and	r8,r14,r2
    8c7c:	00802004 	movi	r2,128
    8c80:	0007883a 	mov	r3,zero
    8c84:	0013883a 	mov	r9,zero
    8c88:	40800d26 	beq	r8,r2,8cc0 <__divdf3+0x204>
    8c8c:	dbc00815 	stw	r15,32(sp)
    8c90:	db800715 	stw	r14,28(sp)
    8c94:	003fab06 	br	8b44 <__divdf3+0x88>
    8c98:	343fc92e 	bgeu	r6,r16,8bc0 <__divdf3+0x104>
    8c9c:	3185883a 	add	r2,r6,r6
    8ca0:	1189803a 	cmpltu	r4,r2,r6
    8ca4:	39c7883a 	add	r3,r7,r7
    8ca8:	20c9883a 	add	r4,r4,r3
    8cac:	297fffc4 	addi	r5,r5,-1
    8cb0:	100d883a 	mov	r6,r2
    8cb4:	200f883a 	mov	r7,r4
    8cb8:	d9400615 	stw	r5,24(sp)
    8cbc:	003fc006 	br	8bc0 <__divdf3+0x104>
    8cc0:	483ff21e 	bne	r9,zero,8c8c <__divdf3+0x1d0>
    8cc4:	01004004 	movi	r4,256
    8cc8:	7104703a 	and	r2,r14,r4
    8ccc:	10c4b03a 	or	r2,r2,r3
    8cd0:	103fee1e 	bne	r2,zero,8c8c <__divdf3+0x1d0>
    8cd4:	31c4b03a 	or	r2,r6,r7
    8cd8:	103fec26 	beq	r2,zero,8c8c <__divdf3+0x1d0>
    8cdc:	7205883a 	add	r2,r14,r8
    8ce0:	1391803a 	cmpltu	r8,r2,r14
    8ce4:	43d1883a 	add	r8,r8,r15
    8ce8:	013fc004 	movi	r4,-256
    8cec:	111c703a 	and	r14,r2,r4
    8cf0:	401f883a 	mov	r15,r8
    8cf4:	003fe506 	br	8c8c <__divdf3+0x1d0>
    8cf8:	8009883a 	mov	r4,r16
    8cfc:	003f9206 	br	8b48 <__divdf3+0x8c>
    8d00:	9809883a 	mov	r4,r19
    8d04:	d8000715 	stw	zero,28(sp)
    8d08:	d8000815 	stw	zero,32(sp)
    8d0c:	d8000615 	stw	zero,24(sp)
    8d10:	003f8d06 	br	8b48 <__divdf3+0x8c>

00008d14 <__eqdf2>:
    8d14:	deffef04 	addi	sp,sp,-68
    8d18:	dc400f15 	stw	r17,60(sp)
    8d1c:	dc400404 	addi	r17,sp,16
    8d20:	2005883a 	mov	r2,r4
    8d24:	2807883a 	mov	r3,r5
    8d28:	dc000e15 	stw	r16,56(sp)
    8d2c:	d809883a 	mov	r4,sp
    8d30:	880b883a 	mov	r5,r17
    8d34:	dc000904 	addi	r16,sp,36
    8d38:	d8c00115 	stw	r3,4(sp)
    8d3c:	d8800015 	stw	r2,0(sp)
    8d40:	d9800215 	stw	r6,8(sp)
    8d44:	dfc01015 	stw	ra,64(sp)
    8d48:	d9c00315 	stw	r7,12(sp)
    8d4c:	00098980 	call	9898 <__unpack_d>
    8d50:	d9000204 	addi	r4,sp,8
    8d54:	800b883a 	mov	r5,r16
    8d58:	00098980 	call	9898 <__unpack_d>
    8d5c:	d8800417 	ldw	r2,16(sp)
    8d60:	00c00044 	movi	r3,1
    8d64:	180d883a 	mov	r6,r3
    8d68:	1880062e 	bgeu	r3,r2,8d84 <__eqdf2+0x70>
    8d6c:	d8800917 	ldw	r2,36(sp)
    8d70:	8809883a 	mov	r4,r17
    8d74:	800b883a 	mov	r5,r16
    8d78:	1880022e 	bgeu	r3,r2,8d84 <__eqdf2+0x70>
    8d7c:	00099d00 	call	99d0 <__fpcmp_parts_d>
    8d80:	100d883a 	mov	r6,r2
    8d84:	3005883a 	mov	r2,r6
    8d88:	dfc01017 	ldw	ra,64(sp)
    8d8c:	dc400f17 	ldw	r17,60(sp)
    8d90:	dc000e17 	ldw	r16,56(sp)
    8d94:	dec01104 	addi	sp,sp,68
    8d98:	f800283a 	ret

00008d9c <__nedf2>:
    8d9c:	deffef04 	addi	sp,sp,-68
    8da0:	dc400f15 	stw	r17,60(sp)
    8da4:	dc400404 	addi	r17,sp,16
    8da8:	2005883a 	mov	r2,r4
    8dac:	2807883a 	mov	r3,r5
    8db0:	dc000e15 	stw	r16,56(sp)
    8db4:	d809883a 	mov	r4,sp
    8db8:	880b883a 	mov	r5,r17
    8dbc:	dc000904 	addi	r16,sp,36
    8dc0:	d8c00115 	stw	r3,4(sp)
    8dc4:	d8800015 	stw	r2,0(sp)
    8dc8:	d9800215 	stw	r6,8(sp)
    8dcc:	dfc01015 	stw	ra,64(sp)
    8dd0:	d9c00315 	stw	r7,12(sp)
    8dd4:	00098980 	call	9898 <__unpack_d>
    8dd8:	d9000204 	addi	r4,sp,8
    8ddc:	800b883a 	mov	r5,r16
    8de0:	00098980 	call	9898 <__unpack_d>
    8de4:	d8800417 	ldw	r2,16(sp)
    8de8:	00c00044 	movi	r3,1
    8dec:	180d883a 	mov	r6,r3
    8df0:	1880062e 	bgeu	r3,r2,8e0c <__nedf2+0x70>
    8df4:	d8800917 	ldw	r2,36(sp)
    8df8:	8809883a 	mov	r4,r17
    8dfc:	800b883a 	mov	r5,r16
    8e00:	1880022e 	bgeu	r3,r2,8e0c <__nedf2+0x70>
    8e04:	00099d00 	call	99d0 <__fpcmp_parts_d>
    8e08:	100d883a 	mov	r6,r2
    8e0c:	3005883a 	mov	r2,r6
    8e10:	dfc01017 	ldw	ra,64(sp)
    8e14:	dc400f17 	ldw	r17,60(sp)
    8e18:	dc000e17 	ldw	r16,56(sp)
    8e1c:	dec01104 	addi	sp,sp,68
    8e20:	f800283a 	ret

00008e24 <__gtdf2>:
    8e24:	deffef04 	addi	sp,sp,-68
    8e28:	dc400f15 	stw	r17,60(sp)
    8e2c:	dc400404 	addi	r17,sp,16
    8e30:	2005883a 	mov	r2,r4
    8e34:	2807883a 	mov	r3,r5
    8e38:	dc000e15 	stw	r16,56(sp)
    8e3c:	d809883a 	mov	r4,sp
    8e40:	880b883a 	mov	r5,r17
    8e44:	dc000904 	addi	r16,sp,36
    8e48:	d8c00115 	stw	r3,4(sp)
    8e4c:	d8800015 	stw	r2,0(sp)
    8e50:	d9800215 	stw	r6,8(sp)
    8e54:	dfc01015 	stw	ra,64(sp)
    8e58:	d9c00315 	stw	r7,12(sp)
    8e5c:	00098980 	call	9898 <__unpack_d>
    8e60:	d9000204 	addi	r4,sp,8
    8e64:	800b883a 	mov	r5,r16
    8e68:	00098980 	call	9898 <__unpack_d>
    8e6c:	d8800417 	ldw	r2,16(sp)
    8e70:	00c00044 	movi	r3,1
    8e74:	01bfffc4 	movi	r6,-1
    8e78:	1880062e 	bgeu	r3,r2,8e94 <__gtdf2+0x70>
    8e7c:	d8800917 	ldw	r2,36(sp)
    8e80:	8809883a 	mov	r4,r17
    8e84:	800b883a 	mov	r5,r16
    8e88:	1880022e 	bgeu	r3,r2,8e94 <__gtdf2+0x70>
    8e8c:	00099d00 	call	99d0 <__fpcmp_parts_d>
    8e90:	100d883a 	mov	r6,r2
    8e94:	3005883a 	mov	r2,r6
    8e98:	dfc01017 	ldw	ra,64(sp)
    8e9c:	dc400f17 	ldw	r17,60(sp)
    8ea0:	dc000e17 	ldw	r16,56(sp)
    8ea4:	dec01104 	addi	sp,sp,68
    8ea8:	f800283a 	ret

00008eac <__gedf2>:
    8eac:	deffef04 	addi	sp,sp,-68
    8eb0:	dc400f15 	stw	r17,60(sp)
    8eb4:	dc400404 	addi	r17,sp,16
    8eb8:	2005883a 	mov	r2,r4
    8ebc:	2807883a 	mov	r3,r5
    8ec0:	dc000e15 	stw	r16,56(sp)
    8ec4:	d809883a 	mov	r4,sp
    8ec8:	880b883a 	mov	r5,r17
    8ecc:	dc000904 	addi	r16,sp,36
    8ed0:	d8c00115 	stw	r3,4(sp)
    8ed4:	d8800015 	stw	r2,0(sp)
    8ed8:	d9800215 	stw	r6,8(sp)
    8edc:	dfc01015 	stw	ra,64(sp)
    8ee0:	d9c00315 	stw	r7,12(sp)
    8ee4:	00098980 	call	9898 <__unpack_d>
    8ee8:	d9000204 	addi	r4,sp,8
    8eec:	800b883a 	mov	r5,r16
    8ef0:	00098980 	call	9898 <__unpack_d>
    8ef4:	d8800417 	ldw	r2,16(sp)
    8ef8:	00c00044 	movi	r3,1
    8efc:	01bfffc4 	movi	r6,-1
    8f00:	1880062e 	bgeu	r3,r2,8f1c <__gedf2+0x70>
    8f04:	d8800917 	ldw	r2,36(sp)
    8f08:	8809883a 	mov	r4,r17
    8f0c:	800b883a 	mov	r5,r16
    8f10:	1880022e 	bgeu	r3,r2,8f1c <__gedf2+0x70>
    8f14:	00099d00 	call	99d0 <__fpcmp_parts_d>
    8f18:	100d883a 	mov	r6,r2
    8f1c:	3005883a 	mov	r2,r6
    8f20:	dfc01017 	ldw	ra,64(sp)
    8f24:	dc400f17 	ldw	r17,60(sp)
    8f28:	dc000e17 	ldw	r16,56(sp)
    8f2c:	dec01104 	addi	sp,sp,68
    8f30:	f800283a 	ret

00008f34 <__ltdf2>:
    8f34:	deffef04 	addi	sp,sp,-68
    8f38:	dc400f15 	stw	r17,60(sp)
    8f3c:	dc400404 	addi	r17,sp,16
    8f40:	2005883a 	mov	r2,r4
    8f44:	2807883a 	mov	r3,r5
    8f48:	dc000e15 	stw	r16,56(sp)
    8f4c:	d809883a 	mov	r4,sp
    8f50:	880b883a 	mov	r5,r17
    8f54:	dc000904 	addi	r16,sp,36
    8f58:	d8c00115 	stw	r3,4(sp)
    8f5c:	d8800015 	stw	r2,0(sp)
    8f60:	d9800215 	stw	r6,8(sp)
    8f64:	dfc01015 	stw	ra,64(sp)
    8f68:	d9c00315 	stw	r7,12(sp)
    8f6c:	00098980 	call	9898 <__unpack_d>
    8f70:	d9000204 	addi	r4,sp,8
    8f74:	800b883a 	mov	r5,r16
    8f78:	00098980 	call	9898 <__unpack_d>
    8f7c:	d8800417 	ldw	r2,16(sp)
    8f80:	00c00044 	movi	r3,1
    8f84:	180d883a 	mov	r6,r3
    8f88:	1880062e 	bgeu	r3,r2,8fa4 <__ltdf2+0x70>
    8f8c:	d8800917 	ldw	r2,36(sp)
    8f90:	8809883a 	mov	r4,r17
    8f94:	800b883a 	mov	r5,r16
    8f98:	1880022e 	bgeu	r3,r2,8fa4 <__ltdf2+0x70>
    8f9c:	00099d00 	call	99d0 <__fpcmp_parts_d>
    8fa0:	100d883a 	mov	r6,r2
    8fa4:	3005883a 	mov	r2,r6
    8fa8:	dfc01017 	ldw	ra,64(sp)
    8fac:	dc400f17 	ldw	r17,60(sp)
    8fb0:	dc000e17 	ldw	r16,56(sp)
    8fb4:	dec01104 	addi	sp,sp,68
    8fb8:	f800283a 	ret

00008fbc <__floatsidf>:
    8fbc:	2006d7fa 	srli	r3,r4,31
    8fc0:	defff604 	addi	sp,sp,-40
    8fc4:	008000c4 	movi	r2,3
    8fc8:	dfc00915 	stw	ra,36(sp)
    8fcc:	dcc00815 	stw	r19,32(sp)
    8fd0:	dc800715 	stw	r18,28(sp)
    8fd4:	dc400615 	stw	r17,24(sp)
    8fd8:	dc000515 	stw	r16,20(sp)
    8fdc:	d8800015 	stw	r2,0(sp)
    8fe0:	d8c00115 	stw	r3,4(sp)
    8fe4:	20000f1e 	bne	r4,zero,9024 <__floatsidf+0x68>
    8fe8:	00800084 	movi	r2,2
    8fec:	d8800015 	stw	r2,0(sp)
    8ff0:	d809883a 	mov	r4,sp
    8ff4:	00095840 	call	9584 <__pack_d>
    8ff8:	1009883a 	mov	r4,r2
    8ffc:	180b883a 	mov	r5,r3
    9000:	2005883a 	mov	r2,r4
    9004:	2807883a 	mov	r3,r5
    9008:	dfc00917 	ldw	ra,36(sp)
    900c:	dcc00817 	ldw	r19,32(sp)
    9010:	dc800717 	ldw	r18,28(sp)
    9014:	dc400617 	ldw	r17,24(sp)
    9018:	dc000517 	ldw	r16,20(sp)
    901c:	dec00a04 	addi	sp,sp,40
    9020:	f800283a 	ret
    9024:	00800f04 	movi	r2,60
    9028:	1807003a 	cmpeq	r3,r3,zero
    902c:	d8800215 	stw	r2,8(sp)
    9030:	18001126 	beq	r3,zero,9078 <__floatsidf+0xbc>
    9034:	0027883a 	mov	r19,zero
    9038:	2025883a 	mov	r18,r4
    903c:	d9000315 	stw	r4,12(sp)
    9040:	dcc00415 	stw	r19,16(sp)
    9044:	00095040 	call	9504 <__clzsi2>
    9048:	11000744 	addi	r4,r2,29
    904c:	013fe80e 	bge	zero,r4,8ff0 <__floatsidf+0x34>
    9050:	10bfff44 	addi	r2,r2,-3
    9054:	10000c16 	blt	r2,zero,9088 <__floatsidf+0xcc>
    9058:	90a2983a 	sll	r17,r18,r2
    905c:	0021883a 	mov	r16,zero
    9060:	d8800217 	ldw	r2,8(sp)
    9064:	dc400415 	stw	r17,16(sp)
    9068:	dc000315 	stw	r16,12(sp)
    906c:	1105c83a 	sub	r2,r2,r4
    9070:	d8800215 	stw	r2,8(sp)
    9074:	003fde06 	br	8ff0 <__floatsidf+0x34>
    9078:	00a00034 	movhi	r2,32768
    907c:	20800a26 	beq	r4,r2,90a8 <__floatsidf+0xec>
    9080:	0109c83a 	sub	r4,zero,r4
    9084:	003feb06 	br	9034 <__floatsidf+0x78>
    9088:	9006d07a 	srli	r3,r18,1
    908c:	008007c4 	movi	r2,31
    9090:	1105c83a 	sub	r2,r2,r4
    9094:	1886d83a 	srl	r3,r3,r2
    9098:	9922983a 	sll	r17,r19,r4
    909c:	9120983a 	sll	r16,r18,r4
    90a0:	1c62b03a 	or	r17,r3,r17
    90a4:	003fee06 	br	9060 <__floatsidf+0xa4>
    90a8:	0009883a 	mov	r4,zero
    90ac:	01707834 	movhi	r5,49632
    90b0:	003fd306 	br	9000 <__floatsidf+0x44>

000090b4 <__fixdfsi>:
    90b4:	defff804 	addi	sp,sp,-32
    90b8:	2005883a 	mov	r2,r4
    90bc:	2807883a 	mov	r3,r5
    90c0:	d809883a 	mov	r4,sp
    90c4:	d9400204 	addi	r5,sp,8
    90c8:	d8c00115 	stw	r3,4(sp)
    90cc:	d8800015 	stw	r2,0(sp)
    90d0:	dfc00715 	stw	ra,28(sp)
    90d4:	00098980 	call	9898 <__unpack_d>
    90d8:	d8c00217 	ldw	r3,8(sp)
    90dc:	00800084 	movi	r2,2
    90e0:	1880051e 	bne	r3,r2,90f8 <__fixdfsi+0x44>
    90e4:	0007883a 	mov	r3,zero
    90e8:	1805883a 	mov	r2,r3
    90ec:	dfc00717 	ldw	ra,28(sp)
    90f0:	dec00804 	addi	sp,sp,32
    90f4:	f800283a 	ret
    90f8:	00800044 	movi	r2,1
    90fc:	10fff92e 	bgeu	r2,r3,90e4 <__fixdfsi+0x30>
    9100:	00800104 	movi	r2,4
    9104:	18800426 	beq	r3,r2,9118 <__fixdfsi+0x64>
    9108:	d8c00417 	ldw	r3,16(sp)
    910c:	183ff516 	blt	r3,zero,90e4 <__fixdfsi+0x30>
    9110:	00800784 	movi	r2,30
    9114:	10c0080e 	bge	r2,r3,9138 <__fixdfsi+0x84>
    9118:	d8800317 	ldw	r2,12(sp)
    911c:	1000121e 	bne	r2,zero,9168 <__fixdfsi+0xb4>
    9120:	00e00034 	movhi	r3,32768
    9124:	18ffffc4 	addi	r3,r3,-1
    9128:	1805883a 	mov	r2,r3
    912c:	dfc00717 	ldw	ra,28(sp)
    9130:	dec00804 	addi	sp,sp,32
    9134:	f800283a 	ret
    9138:	00800f04 	movi	r2,60
    913c:	10d1c83a 	sub	r8,r2,r3
    9140:	40bff804 	addi	r2,r8,-32
    9144:	d9800517 	ldw	r6,20(sp)
    9148:	d9c00617 	ldw	r7,24(sp)
    914c:	10000816 	blt	r2,zero,9170 <__fixdfsi+0xbc>
    9150:	3888d83a 	srl	r4,r7,r2
    9154:	d8800317 	ldw	r2,12(sp)
    9158:	2007883a 	mov	r3,r4
    915c:	103fe226 	beq	r2,zero,90e8 <__fixdfsi+0x34>
    9160:	0107c83a 	sub	r3,zero,r4
    9164:	003fe006 	br	90e8 <__fixdfsi+0x34>
    9168:	00e00034 	movhi	r3,32768
    916c:	003fde06 	br	90e8 <__fixdfsi+0x34>
    9170:	39c7883a 	add	r3,r7,r7
    9174:	008007c4 	movi	r2,31
    9178:	1205c83a 	sub	r2,r2,r8
    917c:	1886983a 	sll	r3,r3,r2
    9180:	3208d83a 	srl	r4,r6,r8
    9184:	1908b03a 	or	r4,r3,r4
    9188:	003ff206 	br	9154 <__fixdfsi+0xa0>

0000918c <__floatunsidf>:
    918c:	defff204 	addi	sp,sp,-56
    9190:	dfc00d15 	stw	ra,52(sp)
    9194:	ddc00c15 	stw	r23,48(sp)
    9198:	dd800b15 	stw	r22,44(sp)
    919c:	dd400a15 	stw	r21,40(sp)
    91a0:	dd000915 	stw	r20,36(sp)
    91a4:	dcc00815 	stw	r19,32(sp)
    91a8:	dc800715 	stw	r18,28(sp)
    91ac:	dc400615 	stw	r17,24(sp)
    91b0:	dc000515 	stw	r16,20(sp)
    91b4:	d8000115 	stw	zero,4(sp)
    91b8:	20000f1e 	bne	r4,zero,91f8 <__floatunsidf+0x6c>
    91bc:	00800084 	movi	r2,2
    91c0:	d8800015 	stw	r2,0(sp)
    91c4:	d809883a 	mov	r4,sp
    91c8:	00095840 	call	9584 <__pack_d>
    91cc:	dfc00d17 	ldw	ra,52(sp)
    91d0:	ddc00c17 	ldw	r23,48(sp)
    91d4:	dd800b17 	ldw	r22,44(sp)
    91d8:	dd400a17 	ldw	r21,40(sp)
    91dc:	dd000917 	ldw	r20,36(sp)
    91e0:	dcc00817 	ldw	r19,32(sp)
    91e4:	dc800717 	ldw	r18,28(sp)
    91e8:	dc400617 	ldw	r17,24(sp)
    91ec:	dc000517 	ldw	r16,20(sp)
    91f0:	dec00e04 	addi	sp,sp,56
    91f4:	f800283a 	ret
    91f8:	008000c4 	movi	r2,3
    91fc:	00c00f04 	movi	r3,60
    9200:	002f883a 	mov	r23,zero
    9204:	202d883a 	mov	r22,r4
    9208:	d8800015 	stw	r2,0(sp)
    920c:	d8c00215 	stw	r3,8(sp)
    9210:	d9000315 	stw	r4,12(sp)
    9214:	ddc00415 	stw	r23,16(sp)
    9218:	00095040 	call	9504 <__clzsi2>
    921c:	12400744 	addi	r9,r2,29
    9220:	48000b16 	blt	r9,zero,9250 <__floatunsidf+0xc4>
    9224:	483fe726 	beq	r9,zero,91c4 <__floatunsidf+0x38>
    9228:	10bfff44 	addi	r2,r2,-3
    922c:	10002e16 	blt	r2,zero,92e8 <__floatunsidf+0x15c>
    9230:	b0a2983a 	sll	r17,r22,r2
    9234:	0021883a 	mov	r16,zero
    9238:	d8800217 	ldw	r2,8(sp)
    923c:	dc400415 	stw	r17,16(sp)
    9240:	dc000315 	stw	r16,12(sp)
    9244:	1245c83a 	sub	r2,r2,r9
    9248:	d8800215 	stw	r2,8(sp)
    924c:	003fdd06 	br	91c4 <__floatunsidf+0x38>
    9250:	0255c83a 	sub	r10,zero,r9
    9254:	51bff804 	addi	r6,r10,-32
    9258:	30001b16 	blt	r6,zero,92c8 <__floatunsidf+0x13c>
    925c:	b9a8d83a 	srl	r20,r23,r6
    9260:	002b883a 	mov	r21,zero
    9264:	000f883a 	mov	r7,zero
    9268:	01000044 	movi	r4,1
    926c:	0011883a 	mov	r8,zero
    9270:	30002516 	blt	r6,zero,9308 <__floatunsidf+0x17c>
    9274:	21a6983a 	sll	r19,r4,r6
    9278:	0025883a 	mov	r18,zero
    927c:	00bfffc4 	movi	r2,-1
    9280:	9089883a 	add	r4,r18,r2
    9284:	988b883a 	add	r5,r19,r2
    9288:	248d803a 	cmpltu	r6,r4,r18
    928c:	314b883a 	add	r5,r6,r5
    9290:	b104703a 	and	r2,r22,r4
    9294:	b946703a 	and	r3,r23,r5
    9298:	10c4b03a 	or	r2,r2,r3
    929c:	10000226 	beq	r2,zero,92a8 <__floatunsidf+0x11c>
    92a0:	01c00044 	movi	r7,1
    92a4:	0011883a 	mov	r8,zero
    92a8:	d9000217 	ldw	r4,8(sp)
    92ac:	a1c4b03a 	or	r2,r20,r7
    92b0:	aa06b03a 	or	r3,r21,r8
    92b4:	2249c83a 	sub	r4,r4,r9
    92b8:	d8c00415 	stw	r3,16(sp)
    92bc:	d9000215 	stw	r4,8(sp)
    92c0:	d8800315 	stw	r2,12(sp)
    92c4:	003fbf06 	br	91c4 <__floatunsidf+0x38>
    92c8:	bdc7883a 	add	r3,r23,r23
    92cc:	008007c4 	movi	r2,31
    92d0:	1285c83a 	sub	r2,r2,r10
    92d4:	1886983a 	sll	r3,r3,r2
    92d8:	b2a8d83a 	srl	r20,r22,r10
    92dc:	baaad83a 	srl	r21,r23,r10
    92e0:	1d28b03a 	or	r20,r3,r20
    92e4:	003fdf06 	br	9264 <__floatunsidf+0xd8>
    92e8:	b006d07a 	srli	r3,r22,1
    92ec:	008007c4 	movi	r2,31
    92f0:	1245c83a 	sub	r2,r2,r9
    92f4:	1886d83a 	srl	r3,r3,r2
    92f8:	ba62983a 	sll	r17,r23,r9
    92fc:	b260983a 	sll	r16,r22,r9
    9300:	1c62b03a 	or	r17,r3,r17
    9304:	003fcc06 	br	9238 <__floatunsidf+0xac>
    9308:	2006d07a 	srli	r3,r4,1
    930c:	008007c4 	movi	r2,31
    9310:	1285c83a 	sub	r2,r2,r10
    9314:	18a6d83a 	srl	r19,r3,r2
    9318:	22a4983a 	sll	r18,r4,r10
    931c:	003fd706 	br	927c <__floatunsidf+0xf0>

00009320 <udivmodsi4>:
    9320:	29001b2e 	bgeu	r5,r4,9390 <udivmodsi4+0x70>
    9324:	28001a16 	blt	r5,zero,9390 <udivmodsi4+0x70>
    9328:	00800044 	movi	r2,1
    932c:	0007883a 	mov	r3,zero
    9330:	01c007c4 	movi	r7,31
    9334:	00000306 	br	9344 <udivmodsi4+0x24>
    9338:	19c01326 	beq	r3,r7,9388 <udivmodsi4+0x68>
    933c:	18c00044 	addi	r3,r3,1
    9340:	28000416 	blt	r5,zero,9354 <udivmodsi4+0x34>
    9344:	294b883a 	add	r5,r5,r5
    9348:	1085883a 	add	r2,r2,r2
    934c:	293ffa36 	bltu	r5,r4,9338 <udivmodsi4+0x18>
    9350:	10000d26 	beq	r2,zero,9388 <udivmodsi4+0x68>
    9354:	0007883a 	mov	r3,zero
    9358:	21400236 	bltu	r4,r5,9364 <udivmodsi4+0x44>
    935c:	2149c83a 	sub	r4,r4,r5
    9360:	1886b03a 	or	r3,r3,r2
    9364:	1004d07a 	srli	r2,r2,1
    9368:	280ad07a 	srli	r5,r5,1
    936c:	103ffa1e 	bne	r2,zero,9358 <udivmodsi4+0x38>
    9370:	30000226 	beq	r6,zero,937c <udivmodsi4+0x5c>
    9374:	2005883a 	mov	r2,r4
    9378:	f800283a 	ret
    937c:	1809883a 	mov	r4,r3
    9380:	2005883a 	mov	r2,r4
    9384:	f800283a 	ret
    9388:	0007883a 	mov	r3,zero
    938c:	003ff806 	br	9370 <udivmodsi4+0x50>
    9390:	00800044 	movi	r2,1
    9394:	0007883a 	mov	r3,zero
    9398:	003fef06 	br	9358 <udivmodsi4+0x38>

0000939c <__divsi3>:
    939c:	defffe04 	addi	sp,sp,-8
    93a0:	dc000015 	stw	r16,0(sp)
    93a4:	dfc00115 	stw	ra,4(sp)
    93a8:	0021883a 	mov	r16,zero
    93ac:	20000c16 	blt	r4,zero,93e0 <__divsi3+0x44>
    93b0:	000d883a 	mov	r6,zero
    93b4:	28000e16 	blt	r5,zero,93f0 <__divsi3+0x54>
    93b8:	00093200 	call	9320 <udivmodsi4>
    93bc:	1007883a 	mov	r3,r2
    93c0:	8005003a 	cmpeq	r2,r16,zero
    93c4:	1000011e 	bne	r2,zero,93cc <__divsi3+0x30>
    93c8:	00c7c83a 	sub	r3,zero,r3
    93cc:	1805883a 	mov	r2,r3
    93d0:	dfc00117 	ldw	ra,4(sp)
    93d4:	dc000017 	ldw	r16,0(sp)
    93d8:	dec00204 	addi	sp,sp,8
    93dc:	f800283a 	ret
    93e0:	0109c83a 	sub	r4,zero,r4
    93e4:	04000044 	movi	r16,1
    93e8:	000d883a 	mov	r6,zero
    93ec:	283ff20e 	bge	r5,zero,93b8 <__divsi3+0x1c>
    93f0:	014bc83a 	sub	r5,zero,r5
    93f4:	8021003a 	cmpeq	r16,r16,zero
    93f8:	003fef06 	br	93b8 <__divsi3+0x1c>

000093fc <__modsi3>:
    93fc:	deffff04 	addi	sp,sp,-4
    9400:	dfc00015 	stw	ra,0(sp)
    9404:	01800044 	movi	r6,1
    9408:	2807883a 	mov	r3,r5
    940c:	20000416 	blt	r4,zero,9420 <__modsi3+0x24>
    9410:	28000c16 	blt	r5,zero,9444 <__modsi3+0x48>
    9414:	dfc00017 	ldw	ra,0(sp)
    9418:	dec00104 	addi	sp,sp,4
    941c:	00093201 	jmpi	9320 <udivmodsi4>
    9420:	0109c83a 	sub	r4,zero,r4
    9424:	28000b16 	blt	r5,zero,9454 <__modsi3+0x58>
    9428:	180b883a 	mov	r5,r3
    942c:	01800044 	movi	r6,1
    9430:	00093200 	call	9320 <udivmodsi4>
    9434:	0085c83a 	sub	r2,zero,r2
    9438:	dfc00017 	ldw	ra,0(sp)
    943c:	dec00104 	addi	sp,sp,4
    9440:	f800283a 	ret
    9444:	014bc83a 	sub	r5,zero,r5
    9448:	dfc00017 	ldw	ra,0(sp)
    944c:	dec00104 	addi	sp,sp,4
    9450:	00093201 	jmpi	9320 <udivmodsi4>
    9454:	0147c83a 	sub	r3,zero,r5
    9458:	003ff306 	br	9428 <__modsi3+0x2c>

0000945c <__udivsi3>:
    945c:	000d883a 	mov	r6,zero
    9460:	00093201 	jmpi	9320 <udivmodsi4>

00009464 <__umodsi3>:
    9464:	01800044 	movi	r6,1
    9468:	00093201 	jmpi	9320 <udivmodsi4>

0000946c <__muldi3>:
    946c:	2011883a 	mov	r8,r4
    9470:	427fffcc 	andi	r9,r8,65535
    9474:	4018d43a 	srli	r12,r8,16
    9478:	32bfffcc 	andi	r10,r6,65535
    947c:	3016d43a 	srli	r11,r6,16
    9480:	4a85383a 	mul	r2,r9,r10
    9484:	6295383a 	mul	r10,r12,r10
    9488:	4ad3383a 	mul	r9,r9,r11
    948c:	113fffcc 	andi	r4,r2,65535
    9490:	1004d43a 	srli	r2,r2,16
    9494:	4a93883a 	add	r9,r9,r10
    9498:	3807883a 	mov	r3,r7
    949c:	1245883a 	add	r2,r2,r9
    94a0:	280f883a 	mov	r7,r5
    94a4:	180b883a 	mov	r5,r3
    94a8:	1006943a 	slli	r3,r2,16
    94ac:	defffd04 	addi	sp,sp,-12
    94b0:	dc800215 	stw	r18,8(sp)
    94b4:	1907883a 	add	r3,r3,r4
    94b8:	dc400115 	stw	r17,4(sp)
    94bc:	dc000015 	stw	r16,0(sp)
    94c0:	4165383a 	mul	r18,r8,r5
    94c4:	31e3383a 	mul	r17,r6,r7
    94c8:	1012d43a 	srli	r9,r2,16
    94cc:	62d9383a 	mul	r12,r12,r11
    94d0:	181f883a 	mov	r15,r3
    94d4:	1280022e 	bgeu	r2,r10,94e0 <__muldi3+0x74>
    94d8:	00800074 	movhi	r2,1
    94dc:	6099883a 	add	r12,r12,r2
    94e0:	624d883a 	add	r6,r12,r9
    94e4:	9187883a 	add	r3,r18,r6
    94e8:	88c7883a 	add	r3,r17,r3
    94ec:	7805883a 	mov	r2,r15
    94f0:	dc800217 	ldw	r18,8(sp)
    94f4:	dc400117 	ldw	r17,4(sp)
    94f8:	dc000017 	ldw	r16,0(sp)
    94fc:	dec00304 	addi	sp,sp,12
    9500:	f800283a 	ret

00009504 <__clzsi2>:
    9504:	00bfffd4 	movui	r2,65535
    9508:	11000e36 	bltu	r2,r4,9544 <__clzsi2+0x40>
    950c:	00803fc4 	movi	r2,255
    9510:	01400204 	movi	r5,8
    9514:	0007883a 	mov	r3,zero
    9518:	11001036 	bltu	r2,r4,955c <__clzsi2+0x58>
    951c:	000b883a 	mov	r5,zero
    9520:	20c6d83a 	srl	r3,r4,r3
    9524:	00800074 	movhi	r2,1
    9528:	10b50d04 	addi	r2,r2,-11212
    952c:	1887883a 	add	r3,r3,r2
    9530:	18800003 	ldbu	r2,0(r3)
    9534:	00c00804 	movi	r3,32
    9538:	2885883a 	add	r2,r5,r2
    953c:	1885c83a 	sub	r2,r3,r2
    9540:	f800283a 	ret
    9544:	01400404 	movi	r5,16
    9548:	00804034 	movhi	r2,256
    954c:	10bfffc4 	addi	r2,r2,-1
    9550:	2807883a 	mov	r3,r5
    9554:	113ff22e 	bgeu	r2,r4,9520 <__clzsi2+0x1c>
    9558:	01400604 	movi	r5,24
    955c:	2807883a 	mov	r3,r5
    9560:	20c6d83a 	srl	r3,r4,r3
    9564:	00800074 	movhi	r2,1
    9568:	10b50d04 	addi	r2,r2,-11212
    956c:	1887883a 	add	r3,r3,r2
    9570:	18800003 	ldbu	r2,0(r3)
    9574:	00c00804 	movi	r3,32
    9578:	2885883a 	add	r2,r5,r2
    957c:	1885c83a 	sub	r2,r3,r2
    9580:	f800283a 	ret

00009584 <__pack_d>:
    9584:	20c00017 	ldw	r3,0(r4)
    9588:	defffd04 	addi	sp,sp,-12
    958c:	dc000015 	stw	r16,0(sp)
    9590:	dc800215 	stw	r18,8(sp)
    9594:	dc400115 	stw	r17,4(sp)
    9598:	00800044 	movi	r2,1
    959c:	22000317 	ldw	r8,12(r4)
    95a0:	001f883a 	mov	r15,zero
    95a4:	22400417 	ldw	r9,16(r4)
    95a8:	24000117 	ldw	r16,4(r4)
    95ac:	10c0552e 	bgeu	r2,r3,9704 <__pack_d+0x180>
    95b0:	00800104 	movi	r2,4
    95b4:	18804f26 	beq	r3,r2,96f4 <__pack_d+0x170>
    95b8:	00800084 	movi	r2,2
    95bc:	18800226 	beq	r3,r2,95c8 <__pack_d+0x44>
    95c0:	4244b03a 	or	r2,r8,r9
    95c4:	10001a1e 	bne	r2,zero,9630 <__pack_d+0xac>
    95c8:	000d883a 	mov	r6,zero
    95cc:	000f883a 	mov	r7,zero
    95d0:	0011883a 	mov	r8,zero
    95d4:	00800434 	movhi	r2,16
    95d8:	10bfffc4 	addi	r2,r2,-1
    95dc:	301d883a 	mov	r14,r6
    95e0:	3884703a 	and	r2,r7,r2
    95e4:	400a953a 	slli	r5,r8,20
    95e8:	79bffc2c 	andhi	r6,r15,65520
    95ec:	308cb03a 	or	r6,r6,r2
    95f0:	00e00434 	movhi	r3,32784
    95f4:	18ffffc4 	addi	r3,r3,-1
    95f8:	800497fa 	slli	r2,r16,31
    95fc:	30c6703a 	and	r3,r6,r3
    9600:	1946b03a 	or	r3,r3,r5
    9604:	01600034 	movhi	r5,32768
    9608:	297fffc4 	addi	r5,r5,-1
    960c:	194a703a 	and	r5,r3,r5
    9610:	288ab03a 	or	r5,r5,r2
    9614:	2807883a 	mov	r3,r5
    9618:	7005883a 	mov	r2,r14
    961c:	dc800217 	ldw	r18,8(sp)
    9620:	dc400117 	ldw	r17,4(sp)
    9624:	dc000017 	ldw	r16,0(sp)
    9628:	dec00304 	addi	sp,sp,12
    962c:	f800283a 	ret
    9630:	21000217 	ldw	r4,8(r4)
    9634:	00bf0084 	movi	r2,-1022
    9638:	20803f16 	blt	r4,r2,9738 <__pack_d+0x1b4>
    963c:	0080ffc4 	movi	r2,1023
    9640:	11002c16 	blt	r2,r4,96f4 <__pack_d+0x170>
    9644:	00803fc4 	movi	r2,255
    9648:	408c703a 	and	r6,r8,r2
    964c:	00802004 	movi	r2,128
    9650:	0007883a 	mov	r3,zero
    9654:	000f883a 	mov	r7,zero
    9658:	2280ffc4 	addi	r10,r4,1023
    965c:	30801e26 	beq	r6,r2,96d8 <__pack_d+0x154>
    9660:	00801fc4 	movi	r2,127
    9664:	4089883a 	add	r4,r8,r2
    9668:	220d803a 	cmpltu	r6,r4,r8
    966c:	324d883a 	add	r6,r6,r9
    9670:	2011883a 	mov	r8,r4
    9674:	3013883a 	mov	r9,r6
    9678:	00880034 	movhi	r2,8192
    967c:	10bfffc4 	addi	r2,r2,-1
    9680:	12400d36 	bltu	r2,r9,96b8 <__pack_d+0x134>
    9684:	4804963a 	slli	r2,r9,24
    9688:	400cd23a 	srli	r6,r8,8
    968c:	480ed23a 	srli	r7,r9,8
    9690:	013fffc4 	movi	r4,-1
    9694:	118cb03a 	or	r6,r2,r6
    9698:	01400434 	movhi	r5,16
    969c:	297fffc4 	addi	r5,r5,-1
    96a0:	3104703a 	and	r2,r6,r4
    96a4:	3946703a 	and	r3,r7,r5
    96a8:	5201ffcc 	andi	r8,r10,2047
    96ac:	100d883a 	mov	r6,r2
    96b0:	180f883a 	mov	r7,r3
    96b4:	003fc706 	br	95d4 <__pack_d+0x50>
    96b8:	480897fa 	slli	r4,r9,31
    96bc:	4004d07a 	srli	r2,r8,1
    96c0:	4806d07a 	srli	r3,r9,1
    96c4:	52800044 	addi	r10,r10,1
    96c8:	2084b03a 	or	r2,r4,r2
    96cc:	1011883a 	mov	r8,r2
    96d0:	1813883a 	mov	r9,r3
    96d4:	003feb06 	br	9684 <__pack_d+0x100>
    96d8:	383fe11e 	bne	r7,zero,9660 <__pack_d+0xdc>
    96dc:	01004004 	movi	r4,256
    96e0:	4104703a 	and	r2,r8,r4
    96e4:	10c4b03a 	or	r2,r2,r3
    96e8:	103fe326 	beq	r2,zero,9678 <__pack_d+0xf4>
    96ec:	3005883a 	mov	r2,r6
    96f0:	003fdc06 	br	9664 <__pack_d+0xe0>
    96f4:	000d883a 	mov	r6,zero
    96f8:	000f883a 	mov	r7,zero
    96fc:	0201ffc4 	movi	r8,2047
    9700:	003fb406 	br	95d4 <__pack_d+0x50>
    9704:	0005883a 	mov	r2,zero
    9708:	00c00234 	movhi	r3,8
    970c:	408cb03a 	or	r6,r8,r2
    9710:	48ceb03a 	or	r7,r9,r3
    9714:	013fffc4 	movi	r4,-1
    9718:	01400434 	movhi	r5,16
    971c:	297fffc4 	addi	r5,r5,-1
    9720:	3104703a 	and	r2,r6,r4
    9724:	3946703a 	and	r3,r7,r5
    9728:	100d883a 	mov	r6,r2
    972c:	180f883a 	mov	r7,r3
    9730:	0201ffc4 	movi	r8,2047
    9734:	003fa706 	br	95d4 <__pack_d+0x50>
    9738:	1109c83a 	sub	r4,r2,r4
    973c:	00800e04 	movi	r2,56
    9740:	11004316 	blt	r2,r4,9850 <__pack_d+0x2cc>
    9744:	21fff804 	addi	r7,r4,-32
    9748:	38004516 	blt	r7,zero,9860 <__pack_d+0x2dc>
    974c:	49d8d83a 	srl	r12,r9,r7
    9750:	001b883a 	mov	r13,zero
    9754:	0023883a 	mov	r17,zero
    9758:	01400044 	movi	r5,1
    975c:	0025883a 	mov	r18,zero
    9760:	38004716 	blt	r7,zero,9880 <__pack_d+0x2fc>
    9764:	29d6983a 	sll	r11,r5,r7
    9768:	0015883a 	mov	r10,zero
    976c:	00bfffc4 	movi	r2,-1
    9770:	5089883a 	add	r4,r10,r2
    9774:	588b883a 	add	r5,r11,r2
    9778:	228d803a 	cmpltu	r6,r4,r10
    977c:	314b883a 	add	r5,r6,r5
    9780:	4104703a 	and	r2,r8,r4
    9784:	4946703a 	and	r3,r9,r5
    9788:	10c4b03a 	or	r2,r2,r3
    978c:	10000226 	beq	r2,zero,9798 <__pack_d+0x214>
    9790:	04400044 	movi	r17,1
    9794:	0025883a 	mov	r18,zero
    9798:	00803fc4 	movi	r2,255
    979c:	644eb03a 	or	r7,r12,r17
    97a0:	3892703a 	and	r9,r7,r2
    97a4:	00802004 	movi	r2,128
    97a8:	6c90b03a 	or	r8,r13,r18
    97ac:	0015883a 	mov	r10,zero
    97b0:	48801626 	beq	r9,r2,980c <__pack_d+0x288>
    97b4:	01001fc4 	movi	r4,127
    97b8:	3905883a 	add	r2,r7,r4
    97bc:	11cd803a 	cmpltu	r6,r2,r7
    97c0:	320d883a 	add	r6,r6,r8
    97c4:	100f883a 	mov	r7,r2
    97c8:	00840034 	movhi	r2,4096
    97cc:	10bfffc4 	addi	r2,r2,-1
    97d0:	3011883a 	mov	r8,r6
    97d4:	0007883a 	mov	r3,zero
    97d8:	11801b36 	bltu	r2,r6,9848 <__pack_d+0x2c4>
    97dc:	4004963a 	slli	r2,r8,24
    97e0:	3808d23a 	srli	r4,r7,8
    97e4:	400ad23a 	srli	r5,r8,8
    97e8:	1813883a 	mov	r9,r3
    97ec:	1108b03a 	or	r4,r2,r4
    97f0:	00bfffc4 	movi	r2,-1
    97f4:	00c00434 	movhi	r3,16
    97f8:	18ffffc4 	addi	r3,r3,-1
    97fc:	208c703a 	and	r6,r4,r2
    9800:	28ce703a 	and	r7,r5,r3
    9804:	4a01ffcc 	andi	r8,r9,2047
    9808:	003f7206 	br	95d4 <__pack_d+0x50>
    980c:	503fe91e 	bne	r10,zero,97b4 <__pack_d+0x230>
    9810:	01004004 	movi	r4,256
    9814:	3904703a 	and	r2,r7,r4
    9818:	0007883a 	mov	r3,zero
    981c:	10c4b03a 	or	r2,r2,r3
    9820:	10000626 	beq	r2,zero,983c <__pack_d+0x2b8>
    9824:	3a45883a 	add	r2,r7,r9
    9828:	11cd803a 	cmpltu	r6,r2,r7
    982c:	320d883a 	add	r6,r6,r8
    9830:	100f883a 	mov	r7,r2
    9834:	3011883a 	mov	r8,r6
    9838:	0007883a 	mov	r3,zero
    983c:	00840034 	movhi	r2,4096
    9840:	10bfffc4 	addi	r2,r2,-1
    9844:	123fe52e 	bgeu	r2,r8,97dc <__pack_d+0x258>
    9848:	00c00044 	movi	r3,1
    984c:	003fe306 	br	97dc <__pack_d+0x258>
    9850:	0009883a 	mov	r4,zero
    9854:	0013883a 	mov	r9,zero
    9858:	000b883a 	mov	r5,zero
    985c:	003fe406 	br	97f0 <__pack_d+0x26c>
    9860:	4a47883a 	add	r3,r9,r9
    9864:	008007c4 	movi	r2,31
    9868:	1105c83a 	sub	r2,r2,r4
    986c:	1886983a 	sll	r3,r3,r2
    9870:	4118d83a 	srl	r12,r8,r4
    9874:	491ad83a 	srl	r13,r9,r4
    9878:	1b18b03a 	or	r12,r3,r12
    987c:	003fb506 	br	9754 <__pack_d+0x1d0>
    9880:	2806d07a 	srli	r3,r5,1
    9884:	008007c4 	movi	r2,31
    9888:	1105c83a 	sub	r2,r2,r4
    988c:	1896d83a 	srl	r11,r3,r2
    9890:	2914983a 	sll	r10,r5,r4
    9894:	003fb506 	br	976c <__pack_d+0x1e8>

00009898 <__unpack_d>:
    9898:	20c00117 	ldw	r3,4(r4)
    989c:	22400017 	ldw	r9,0(r4)
    98a0:	00800434 	movhi	r2,16
    98a4:	10bfffc4 	addi	r2,r2,-1
    98a8:	1808d53a 	srli	r4,r3,20
    98ac:	180cd7fa 	srli	r6,r3,31
    98b0:	1894703a 	and	r10,r3,r2
    98b4:	2201ffcc 	andi	r8,r4,2047
    98b8:	281b883a 	mov	r13,r5
    98bc:	4817883a 	mov	r11,r9
    98c0:	29800115 	stw	r6,4(r5)
    98c4:	5019883a 	mov	r12,r10
    98c8:	40001e1e 	bne	r8,zero,9944 <__unpack_d+0xac>
    98cc:	4a84b03a 	or	r2,r9,r10
    98d0:	10001926 	beq	r2,zero,9938 <__unpack_d+0xa0>
    98d4:	4804d63a 	srli	r2,r9,24
    98d8:	500c923a 	slli	r6,r10,8
    98dc:	013f0084 	movi	r4,-1022
    98e0:	00c40034 	movhi	r3,4096
    98e4:	18ffffc4 	addi	r3,r3,-1
    98e8:	118cb03a 	or	r6,r2,r6
    98ec:	008000c4 	movi	r2,3
    98f0:	480a923a 	slli	r5,r9,8
    98f4:	68800015 	stw	r2,0(r13)
    98f8:	69000215 	stw	r4,8(r13)
    98fc:	19800b36 	bltu	r3,r6,992c <__unpack_d+0x94>
    9900:	200f883a 	mov	r7,r4
    9904:	1811883a 	mov	r8,r3
    9908:	2945883a 	add	r2,r5,r5
    990c:	1149803a 	cmpltu	r4,r2,r5
    9910:	3187883a 	add	r3,r6,r6
    9914:	20c9883a 	add	r4,r4,r3
    9918:	100b883a 	mov	r5,r2
    991c:	200d883a 	mov	r6,r4
    9920:	39ffffc4 	addi	r7,r7,-1
    9924:	413ff82e 	bgeu	r8,r4,9908 <__unpack_d+0x70>
    9928:	69c00215 	stw	r7,8(r13)
    992c:	69800415 	stw	r6,16(r13)
    9930:	69400315 	stw	r5,12(r13)
    9934:	f800283a 	ret
    9938:	00800084 	movi	r2,2
    993c:	28800015 	stw	r2,0(r5)
    9940:	f800283a 	ret
    9944:	0081ffc4 	movi	r2,2047
    9948:	40800f26 	beq	r8,r2,9988 <__unpack_d+0xf0>
    994c:	480cd63a 	srli	r6,r9,24
    9950:	5006923a 	slli	r3,r10,8
    9954:	4804923a 	slli	r2,r9,8
    9958:	0009883a 	mov	r4,zero
    995c:	30c6b03a 	or	r3,r6,r3
    9960:	01440034 	movhi	r5,4096
    9964:	110cb03a 	or	r6,r2,r4
    9968:	423f0044 	addi	r8,r8,-1023
    996c:	194eb03a 	or	r7,r3,r5
    9970:	008000c4 	movi	r2,3
    9974:	69c00415 	stw	r7,16(r13)
    9978:	6a000215 	stw	r8,8(r13)
    997c:	68800015 	stw	r2,0(r13)
    9980:	69800315 	stw	r6,12(r13)
    9984:	f800283a 	ret
    9988:	4a84b03a 	or	r2,r9,r10
    998c:	1000031e 	bne	r2,zero,999c <__unpack_d+0x104>
    9990:	00800104 	movi	r2,4
    9994:	28800015 	stw	r2,0(r5)
    9998:	f800283a 	ret
    999c:	0009883a 	mov	r4,zero
    99a0:	01400234 	movhi	r5,8
    99a4:	4904703a 	and	r2,r9,r4
    99a8:	5146703a 	and	r3,r10,r5
    99ac:	10c4b03a 	or	r2,r2,r3
    99b0:	10000526 	beq	r2,zero,99c8 <__unpack_d+0x130>
    99b4:	00800044 	movi	r2,1
    99b8:	68800015 	stw	r2,0(r13)
    99bc:	6b000415 	stw	r12,16(r13)
    99c0:	6ac00315 	stw	r11,12(r13)
    99c4:	f800283a 	ret
    99c8:	68000015 	stw	zero,0(r13)
    99cc:	003ffb06 	br	99bc <__unpack_d+0x124>

000099d0 <__fpcmp_parts_d>:
    99d0:	21800017 	ldw	r6,0(r4)
    99d4:	00c00044 	movi	r3,1
    99d8:	19800a2e 	bgeu	r3,r6,9a04 <__fpcmp_parts_d+0x34>
    99dc:	28800017 	ldw	r2,0(r5)
    99e0:	1880082e 	bgeu	r3,r2,9a04 <__fpcmp_parts_d+0x34>
    99e4:	00c00104 	movi	r3,4
    99e8:	30c02626 	beq	r6,r3,9a84 <__fpcmp_parts_d+0xb4>
    99ec:	10c02226 	beq	r2,r3,9a78 <__fpcmp_parts_d+0xa8>
    99f0:	00c00084 	movi	r3,2
    99f4:	30c00526 	beq	r6,r3,9a0c <__fpcmp_parts_d+0x3c>
    99f8:	10c0071e 	bne	r2,r3,9a18 <__fpcmp_parts_d+0x48>
    99fc:	20800117 	ldw	r2,4(r4)
    9a00:	1000091e 	bne	r2,zero,9a28 <__fpcmp_parts_d+0x58>
    9a04:	00800044 	movi	r2,1
    9a08:	f800283a 	ret
    9a0c:	10c01a1e 	bne	r2,r3,9a78 <__fpcmp_parts_d+0xa8>
    9a10:	0005883a 	mov	r2,zero
    9a14:	f800283a 	ret
    9a18:	22000117 	ldw	r8,4(r4)
    9a1c:	28800117 	ldw	r2,4(r5)
    9a20:	40800326 	beq	r8,r2,9a30 <__fpcmp_parts_d+0x60>
    9a24:	403ff726 	beq	r8,zero,9a04 <__fpcmp_parts_d+0x34>
    9a28:	00bfffc4 	movi	r2,-1
    9a2c:	f800283a 	ret
    9a30:	20c00217 	ldw	r3,8(r4)
    9a34:	28800217 	ldw	r2,8(r5)
    9a38:	10fffa16 	blt	r2,r3,9a24 <__fpcmp_parts_d+0x54>
    9a3c:	18800916 	blt	r3,r2,9a64 <__fpcmp_parts_d+0x94>
    9a40:	21c00417 	ldw	r7,16(r4)
    9a44:	28c00417 	ldw	r3,16(r5)
    9a48:	21800317 	ldw	r6,12(r4)
    9a4c:	28800317 	ldw	r2,12(r5)
    9a50:	19fff436 	bltu	r3,r7,9a24 <__fpcmp_parts_d+0x54>
    9a54:	38c00526 	beq	r7,r3,9a6c <__fpcmp_parts_d+0x9c>
    9a58:	38c00236 	bltu	r7,r3,9a64 <__fpcmp_parts_d+0x94>
    9a5c:	19ffec1e 	bne	r3,r7,9a10 <__fpcmp_parts_d+0x40>
    9a60:	30bfeb2e 	bgeu	r6,r2,9a10 <__fpcmp_parts_d+0x40>
    9a64:	403fe71e 	bne	r8,zero,9a04 <__fpcmp_parts_d+0x34>
    9a68:	003fef06 	br	9a28 <__fpcmp_parts_d+0x58>
    9a6c:	11bffa2e 	bgeu	r2,r6,9a58 <__fpcmp_parts_d+0x88>
    9a70:	403fe426 	beq	r8,zero,9a04 <__fpcmp_parts_d+0x34>
    9a74:	003fec06 	br	9a28 <__fpcmp_parts_d+0x58>
    9a78:	28800117 	ldw	r2,4(r5)
    9a7c:	103fe11e 	bne	r2,zero,9a04 <__fpcmp_parts_d+0x34>
    9a80:	003fe906 	br	9a28 <__fpcmp_parts_d+0x58>
    9a84:	11bfdd1e 	bne	r2,r6,99fc <__fpcmp_parts_d+0x2c>
    9a88:	28c00117 	ldw	r3,4(r5)
    9a8c:	20800117 	ldw	r2,4(r4)
    9a90:	1885c83a 	sub	r2,r3,r2
    9a94:	f800283a 	ret

00009a98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9a98:	defff804 	addi	sp,sp,-32
    9a9c:	dfc00715 	stw	ra,28(sp)
    9aa0:	df000615 	stw	fp,24(sp)
    9aa4:	df000604 	addi	fp,sp,24
    9aa8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9aac:	e0bffc17 	ldw	r2,-16(fp)
    9ab0:	1004803a 	cmplt	r2,r2,zero
    9ab4:	1000081e 	bne	r2,zero,9ad8 <close+0x40>
    9ab8:	e0bffc17 	ldw	r2,-16(fp)
    9abc:	10800324 	muli	r2,r2,12
    9ac0:	1007883a 	mov	r3,r2
    9ac4:	00800074 	movhi	r2,1
    9ac8:	10b76804 	addi	r2,r2,-8800
    9acc:	1887883a 	add	r3,r3,r2
    9ad0:	e0ffff15 	stw	r3,-4(fp)
    9ad4:	00000106 	br	9adc <close+0x44>
    9ad8:	e03fff15 	stw	zero,-4(fp)
    9adc:	e0bfff17 	ldw	r2,-4(fp)
    9ae0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9ae4:	e0bffb17 	ldw	r2,-20(fp)
    9ae8:	1005003a 	cmpeq	r2,r2,zero
    9aec:	10001d1e 	bne	r2,zero,9b64 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9af0:	e0bffb17 	ldw	r2,-20(fp)
    9af4:	10800017 	ldw	r2,0(r2)
    9af8:	10800417 	ldw	r2,16(r2)
    9afc:	1005003a 	cmpeq	r2,r2,zero
    9b00:	1000071e 	bne	r2,zero,9b20 <close+0x88>
    9b04:	e0bffb17 	ldw	r2,-20(fp)
    9b08:	10800017 	ldw	r2,0(r2)
    9b0c:	10800417 	ldw	r2,16(r2)
    9b10:	e13ffb17 	ldw	r4,-20(fp)
    9b14:	103ee83a 	callr	r2
    9b18:	e0bffe15 	stw	r2,-8(fp)
    9b1c:	00000106 	br	9b24 <close+0x8c>
    9b20:	e03ffe15 	stw	zero,-8(fp)
    9b24:	e0bffe17 	ldw	r2,-8(fp)
    9b28:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9b2c:	e13ffc17 	ldw	r4,-16(fp)
    9b30:	000a2c00 	call	a2c0 <alt_release_fd>
    if (rval < 0)
    9b34:	e0bffa17 	ldw	r2,-24(fp)
    9b38:	1004403a 	cmpge	r2,r2,zero
    9b3c:	1000071e 	bne	r2,zero,9b5c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9b40:	0009b940 	call	9b94 <alt_get_errno>
    9b44:	e0fffa17 	ldw	r3,-24(fp)
    9b48:	00c7c83a 	sub	r3,zero,r3
    9b4c:	10c00015 	stw	r3,0(r2)
      return -1;
    9b50:	00bfffc4 	movi	r2,-1
    9b54:	e0bffd15 	stw	r2,-12(fp)
    9b58:	00000806 	br	9b7c <close+0xe4>
    }
    return 0;
    9b5c:	e03ffd15 	stw	zero,-12(fp)
    9b60:	00000606 	br	9b7c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9b64:	0009b940 	call	9b94 <alt_get_errno>
    9b68:	1007883a 	mov	r3,r2
    9b6c:	00801444 	movi	r2,81
    9b70:	18800015 	stw	r2,0(r3)
    return -1;
    9b74:	00bfffc4 	movi	r2,-1
    9b78:	e0bffd15 	stw	r2,-12(fp)
    9b7c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9b80:	e037883a 	mov	sp,fp
    9b84:	dfc00117 	ldw	ra,4(sp)
    9b88:	df000017 	ldw	fp,0(sp)
    9b8c:	dec00204 	addi	sp,sp,8
    9b90:	f800283a 	ret

00009b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b94:	defffd04 	addi	sp,sp,-12
    9b98:	dfc00215 	stw	ra,8(sp)
    9b9c:	df000115 	stw	fp,4(sp)
    9ba0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9ba4:	00800074 	movhi	r2,1
    9ba8:	10b83604 	addi	r2,r2,-7976
    9bac:	10800017 	ldw	r2,0(r2)
    9bb0:	1005003a 	cmpeq	r2,r2,zero
    9bb4:	1000061e 	bne	r2,zero,9bd0 <alt_get_errno+0x3c>
    9bb8:	00800074 	movhi	r2,1
    9bbc:	10b83604 	addi	r2,r2,-7976
    9bc0:	10800017 	ldw	r2,0(r2)
    9bc4:	103ee83a 	callr	r2
    9bc8:	e0bfff15 	stw	r2,-4(fp)
    9bcc:	00000306 	br	9bdc <alt_get_errno+0x48>
    9bd0:	00800074 	movhi	r2,1
    9bd4:	10b84104 	addi	r2,r2,-7932
    9bd8:	e0bfff15 	stw	r2,-4(fp)
    9bdc:	e0bfff17 	ldw	r2,-4(fp)
}
    9be0:	e037883a 	mov	sp,fp
    9be4:	dfc00117 	ldw	ra,4(sp)
    9be8:	df000017 	ldw	fp,0(sp)
    9bec:	dec00204 	addi	sp,sp,8
    9bf0:	f800283a 	ret

00009bf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9bf4:	defffc04 	addi	sp,sp,-16
    9bf8:	df000315 	stw	fp,12(sp)
    9bfc:	df000304 	addi	fp,sp,12
    9c00:	e13ffd15 	stw	r4,-12(fp)
    9c04:	e17ffe15 	stw	r5,-8(fp)
    9c08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9c0c:	e0bfff17 	ldw	r2,-4(fp)
}
    9c10:	e037883a 	mov	sp,fp
    9c14:	df000017 	ldw	fp,0(sp)
    9c18:	dec00104 	addi	sp,sp,4
    9c1c:	f800283a 	ret

00009c20 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    9c20:	defffb04 	addi	sp,sp,-20
    9c24:	dfc00415 	stw	ra,16(sp)
    9c28:	df000315 	stw	fp,12(sp)
    9c2c:	df000304 	addi	fp,sp,12
    9c30:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    9c34:	e13ffe17 	ldw	r4,-8(fp)
    9c38:	d1600c04 	addi	r5,gp,-32720
    9c3c:	000c25c0 	call	c25c <alt_find_dev>
    9c40:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    9c44:	e0bffd17 	ldw	r2,-12(fp)
    9c48:	1005003a 	cmpeq	r2,r2,zero
    9c4c:	10000b1e 	bne	r2,zero,9c7c <alt_flash_open_dev+0x5c>
    9c50:	e0bffd17 	ldw	r2,-12(fp)
    9c54:	10800317 	ldw	r2,12(r2)
    9c58:	1005003a 	cmpeq	r2,r2,zero
    9c5c:	1000071e 	bne	r2,zero,9c7c <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    9c60:	e0bffd17 	ldw	r2,-12(fp)
    9c64:	10800317 	ldw	r2,12(r2)
    9c68:	e13ffd17 	ldw	r4,-12(fp)
    9c6c:	e17ffe17 	ldw	r5,-8(fp)
    9c70:	103ee83a 	callr	r2
    9c74:	e0bfff15 	stw	r2,-4(fp)
    9c78:	00000206 	br	9c84 <alt_flash_open_dev+0x64>
  }

  return dev;
    9c7c:	e0bffd17 	ldw	r2,-12(fp)
    9c80:	e0bfff15 	stw	r2,-4(fp)
    9c84:	e0bfff17 	ldw	r2,-4(fp)
}
    9c88:	e037883a 	mov	sp,fp
    9c8c:	dfc00117 	ldw	ra,4(sp)
    9c90:	df000017 	ldw	fp,0(sp)
    9c94:	dec00204 	addi	sp,sp,8
    9c98:	f800283a 	ret

00009c9c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    9c9c:	defffd04 	addi	sp,sp,-12
    9ca0:	dfc00215 	stw	ra,8(sp)
    9ca4:	df000115 	stw	fp,4(sp)
    9ca8:	df000104 	addi	fp,sp,4
    9cac:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    9cb0:	e0bfff17 	ldw	r2,-4(fp)
    9cb4:	1005003a 	cmpeq	r2,r2,zero
    9cb8:	1000081e 	bne	r2,zero,9cdc <alt_flash_close_dev+0x40>
    9cbc:	e0bfff17 	ldw	r2,-4(fp)
    9cc0:	10800417 	ldw	r2,16(r2)
    9cc4:	1005003a 	cmpeq	r2,r2,zero
    9cc8:	1000041e 	bne	r2,zero,9cdc <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    9ccc:	e0bfff17 	ldw	r2,-4(fp)
    9cd0:	10800417 	ldw	r2,16(r2)
    9cd4:	e13fff17 	ldw	r4,-4(fp)
    9cd8:	103ee83a 	callr	r2
  }
  return;
}
    9cdc:	e037883a 	mov	sp,fp
    9ce0:	dfc00117 	ldw	ra,4(sp)
    9ce4:	df000017 	ldw	fp,0(sp)
    9ce8:	dec00204 	addi	sp,sp,8
    9cec:	f800283a 	ret

00009cf0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9cf0:	defff904 	addi	sp,sp,-28
    9cf4:	dfc00615 	stw	ra,24(sp)
    9cf8:	df000515 	stw	fp,20(sp)
    9cfc:	df000504 	addi	fp,sp,20
    9d00:	e13ffc15 	stw	r4,-16(fp)
    9d04:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9d08:	e0bffc17 	ldw	r2,-16(fp)
    9d0c:	1004803a 	cmplt	r2,r2,zero
    9d10:	1000081e 	bne	r2,zero,9d34 <fstat+0x44>
    9d14:	e0bffc17 	ldw	r2,-16(fp)
    9d18:	10800324 	muli	r2,r2,12
    9d1c:	1007883a 	mov	r3,r2
    9d20:	00800074 	movhi	r2,1
    9d24:	10b76804 	addi	r2,r2,-8800
    9d28:	1887883a 	add	r3,r3,r2
    9d2c:	e0ffff15 	stw	r3,-4(fp)
    9d30:	00000106 	br	9d38 <fstat+0x48>
    9d34:	e03fff15 	stw	zero,-4(fp)
    9d38:	e0bfff17 	ldw	r2,-4(fp)
    9d3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9d40:	e0bffb17 	ldw	r2,-20(fp)
    9d44:	1005003a 	cmpeq	r2,r2,zero
    9d48:	1000121e 	bne	r2,zero,9d94 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9d4c:	e0bffb17 	ldw	r2,-20(fp)
    9d50:	10800017 	ldw	r2,0(r2)
    9d54:	10800817 	ldw	r2,32(r2)
    9d58:	1005003a 	cmpeq	r2,r2,zero
    9d5c:	1000081e 	bne	r2,zero,9d80 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9d60:	e0bffb17 	ldw	r2,-20(fp)
    9d64:	10800017 	ldw	r2,0(r2)
    9d68:	10800817 	ldw	r2,32(r2)
    9d6c:	e13ffb17 	ldw	r4,-20(fp)
    9d70:	e17ffd17 	ldw	r5,-12(fp)
    9d74:	103ee83a 	callr	r2
    9d78:	e0bffe15 	stw	r2,-8(fp)
    9d7c:	00000b06 	br	9dac <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9d80:	e0fffd17 	ldw	r3,-12(fp)
    9d84:	00880004 	movi	r2,8192
    9d88:	18800115 	stw	r2,4(r3)
      return 0;
    9d8c:	e03ffe15 	stw	zero,-8(fp)
    9d90:	00000606 	br	9dac <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9d94:	0009dc40 	call	9dc4 <alt_get_errno>
    9d98:	1007883a 	mov	r3,r2
    9d9c:	00801444 	movi	r2,81
    9da0:	18800015 	stw	r2,0(r3)
    return -1;
    9da4:	00bfffc4 	movi	r2,-1
    9da8:	e0bffe15 	stw	r2,-8(fp)
    9dac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9db0:	e037883a 	mov	sp,fp
    9db4:	dfc00117 	ldw	ra,4(sp)
    9db8:	df000017 	ldw	fp,0(sp)
    9dbc:	dec00204 	addi	sp,sp,8
    9dc0:	f800283a 	ret

00009dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9dc4:	defffd04 	addi	sp,sp,-12
    9dc8:	dfc00215 	stw	ra,8(sp)
    9dcc:	df000115 	stw	fp,4(sp)
    9dd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9dd4:	00800074 	movhi	r2,1
    9dd8:	10b83604 	addi	r2,r2,-7976
    9ddc:	10800017 	ldw	r2,0(r2)
    9de0:	1005003a 	cmpeq	r2,r2,zero
    9de4:	1000061e 	bne	r2,zero,9e00 <alt_get_errno+0x3c>
    9de8:	00800074 	movhi	r2,1
    9dec:	10b83604 	addi	r2,r2,-7976
    9df0:	10800017 	ldw	r2,0(r2)
    9df4:	103ee83a 	callr	r2
    9df8:	e0bfff15 	stw	r2,-4(fp)
    9dfc:	00000306 	br	9e0c <alt_get_errno+0x48>
    9e00:	00800074 	movhi	r2,1
    9e04:	10b84104 	addi	r2,r2,-7932
    9e08:	e0bfff15 	stw	r2,-4(fp)
    9e0c:	e0bfff17 	ldw	r2,-4(fp)
}
    9e10:	e037883a 	mov	sp,fp
    9e14:	dfc00117 	ldw	ra,4(sp)
    9e18:	df000017 	ldw	fp,0(sp)
    9e1c:	dec00204 	addi	sp,sp,8
    9e20:	f800283a 	ret

00009e24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9e24:	deffeb04 	addi	sp,sp,-84
    9e28:	dfc01415 	stw	ra,80(sp)
    9e2c:	df001315 	stw	fp,76(sp)
    9e30:	df001304 	addi	fp,sp,76
    9e34:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9e38:	e0bffd17 	ldw	r2,-12(fp)
    9e3c:	1004803a 	cmplt	r2,r2,zero
    9e40:	1000081e 	bne	r2,zero,9e64 <isatty+0x40>
    9e44:	e0bffd17 	ldw	r2,-12(fp)
    9e48:	10800324 	muli	r2,r2,12
    9e4c:	1007883a 	mov	r3,r2
    9e50:	00800074 	movhi	r2,1
    9e54:	10b76804 	addi	r2,r2,-8800
    9e58:	1887883a 	add	r3,r3,r2
    9e5c:	e0ffff15 	stw	r3,-4(fp)
    9e60:	00000106 	br	9e68 <isatty+0x44>
    9e64:	e03fff15 	stw	zero,-4(fp)
    9e68:	e0bfff17 	ldw	r2,-4(fp)
    9e6c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    9e70:	e0bfed17 	ldw	r2,-76(fp)
    9e74:	1005003a 	cmpeq	r2,r2,zero
    9e78:	10000f1e 	bne	r2,zero,9eb8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9e7c:	e0bfed17 	ldw	r2,-76(fp)
    9e80:	10800017 	ldw	r2,0(r2)
    9e84:	10800817 	ldw	r2,32(r2)
    9e88:	1004c03a 	cmpne	r2,r2,zero
    9e8c:	1000031e 	bne	r2,zero,9e9c <isatty+0x78>
    {
      return 1;
    9e90:	00800044 	movi	r2,1
    9e94:	e0bffe15 	stw	r2,-8(fp)
    9e98:	00000c06 	br	9ecc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9e9c:	e17fee04 	addi	r5,fp,-72
    9ea0:	e13ffd17 	ldw	r4,-12(fp)
    9ea4:	0009cf00 	call	9cf0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9ea8:	e0bfef17 	ldw	r2,-68(fp)
    9eac:	10880020 	cmpeqi	r2,r2,8192
    9eb0:	e0bffe15 	stw	r2,-8(fp)
    9eb4:	00000506 	br	9ecc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9eb8:	0009ee40 	call	9ee4 <alt_get_errno>
    9ebc:	1007883a 	mov	r3,r2
    9ec0:	00801444 	movi	r2,81
    9ec4:	18800015 	stw	r2,0(r3)
    return 0;
    9ec8:	e03ffe15 	stw	zero,-8(fp)
    9ecc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9ed0:	e037883a 	mov	sp,fp
    9ed4:	dfc00117 	ldw	ra,4(sp)
    9ed8:	df000017 	ldw	fp,0(sp)
    9edc:	dec00204 	addi	sp,sp,8
    9ee0:	f800283a 	ret

00009ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9ee4:	defffd04 	addi	sp,sp,-12
    9ee8:	dfc00215 	stw	ra,8(sp)
    9eec:	df000115 	stw	fp,4(sp)
    9ef0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9ef4:	00800074 	movhi	r2,1
    9ef8:	10b83604 	addi	r2,r2,-7976
    9efc:	10800017 	ldw	r2,0(r2)
    9f00:	1005003a 	cmpeq	r2,r2,zero
    9f04:	1000061e 	bne	r2,zero,9f20 <alt_get_errno+0x3c>
    9f08:	00800074 	movhi	r2,1
    9f0c:	10b83604 	addi	r2,r2,-7976
    9f10:	10800017 	ldw	r2,0(r2)
    9f14:	103ee83a 	callr	r2
    9f18:	e0bfff15 	stw	r2,-4(fp)
    9f1c:	00000306 	br	9f2c <alt_get_errno+0x48>
    9f20:	00800074 	movhi	r2,1
    9f24:	10b84104 	addi	r2,r2,-7932
    9f28:	e0bfff15 	stw	r2,-4(fp)
    9f2c:	e0bfff17 	ldw	r2,-4(fp)
}
    9f30:	e037883a 	mov	sp,fp
    9f34:	dfc00117 	ldw	ra,4(sp)
    9f38:	df000017 	ldw	fp,0(sp)
    9f3c:	dec00204 	addi	sp,sp,8
    9f40:	f800283a 	ret

00009f44 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9f44:	defff804 	addi	sp,sp,-32
    9f48:	dfc00715 	stw	ra,28(sp)
    9f4c:	df000615 	stw	fp,24(sp)
    9f50:	df000604 	addi	fp,sp,24
    9f54:	e13ffc15 	stw	r4,-16(fp)
    9f58:	e17ffd15 	stw	r5,-12(fp)
    9f5c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    9f60:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f64:	e0bffc17 	ldw	r2,-16(fp)
    9f68:	1004803a 	cmplt	r2,r2,zero
    9f6c:	1000081e 	bne	r2,zero,9f90 <lseek+0x4c>
    9f70:	e0bffc17 	ldw	r2,-16(fp)
    9f74:	10800324 	muli	r2,r2,12
    9f78:	1007883a 	mov	r3,r2
    9f7c:	00800074 	movhi	r2,1
    9f80:	10b76804 	addi	r2,r2,-8800
    9f84:	1887883a 	add	r3,r3,r2
    9f88:	e0ffff15 	stw	r3,-4(fp)
    9f8c:	00000106 	br	9f94 <lseek+0x50>
    9f90:	e03fff15 	stw	zero,-4(fp)
    9f94:	e0bfff17 	ldw	r2,-4(fp)
    9f98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    9f9c:	e0bffb17 	ldw	r2,-20(fp)
    9fa0:	1005003a 	cmpeq	r2,r2,zero
    9fa4:	1000111e 	bne	r2,zero,9fec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9fa8:	e0bffb17 	ldw	r2,-20(fp)
    9fac:	10800017 	ldw	r2,0(r2)
    9fb0:	10800717 	ldw	r2,28(r2)
    9fb4:	1005003a 	cmpeq	r2,r2,zero
    9fb8:	1000091e 	bne	r2,zero,9fe0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9fbc:	e0bffb17 	ldw	r2,-20(fp)
    9fc0:	10800017 	ldw	r2,0(r2)
    9fc4:	10800717 	ldw	r2,28(r2)
    9fc8:	e13ffb17 	ldw	r4,-20(fp)
    9fcc:	e17ffd17 	ldw	r5,-12(fp)
    9fd0:	e1bffe17 	ldw	r6,-8(fp)
    9fd4:	103ee83a 	callr	r2
    9fd8:	e0bffa15 	stw	r2,-24(fp)
    9fdc:	00000506 	br	9ff4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    9fe0:	00bfde84 	movi	r2,-134
    9fe4:	e0bffa15 	stw	r2,-24(fp)
    9fe8:	00000206 	br	9ff4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    9fec:	00bfebc4 	movi	r2,-81
    9ff0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    9ff4:	e0bffa17 	ldw	r2,-24(fp)
    9ff8:	1004403a 	cmpge	r2,r2,zero
    9ffc:	1000071e 	bne	r2,zero,a01c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a000:	000a0340 	call	a034 <alt_get_errno>
    a004:	1007883a 	mov	r3,r2
    a008:	e0bffa17 	ldw	r2,-24(fp)
    a00c:	0085c83a 	sub	r2,zero,r2
    a010:	18800015 	stw	r2,0(r3)
    rc = -1;
    a014:	00bfffc4 	movi	r2,-1
    a018:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a01c:	e0bffa17 	ldw	r2,-24(fp)
}
    a020:	e037883a 	mov	sp,fp
    a024:	dfc00117 	ldw	ra,4(sp)
    a028:	df000017 	ldw	fp,0(sp)
    a02c:	dec00204 	addi	sp,sp,8
    a030:	f800283a 	ret

0000a034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a034:	defffd04 	addi	sp,sp,-12
    a038:	dfc00215 	stw	ra,8(sp)
    a03c:	df000115 	stw	fp,4(sp)
    a040:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a044:	00800074 	movhi	r2,1
    a048:	10b83604 	addi	r2,r2,-7976
    a04c:	10800017 	ldw	r2,0(r2)
    a050:	1005003a 	cmpeq	r2,r2,zero
    a054:	1000061e 	bne	r2,zero,a070 <alt_get_errno+0x3c>
    a058:	00800074 	movhi	r2,1
    a05c:	10b83604 	addi	r2,r2,-7976
    a060:	10800017 	ldw	r2,0(r2)
    a064:	103ee83a 	callr	r2
    a068:	e0bfff15 	stw	r2,-4(fp)
    a06c:	00000306 	br	a07c <alt_get_errno+0x48>
    a070:	00800074 	movhi	r2,1
    a074:	10b84104 	addi	r2,r2,-7932
    a078:	e0bfff15 	stw	r2,-4(fp)
    a07c:	e0bfff17 	ldw	r2,-4(fp)
}
    a080:	e037883a 	mov	sp,fp
    a084:	dfc00117 	ldw	ra,4(sp)
    a088:	df000017 	ldw	fp,0(sp)
    a08c:	dec00204 	addi	sp,sp,8
    a090:	f800283a 	ret

0000a094 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a094:	defffd04 	addi	sp,sp,-12
    a098:	dfc00215 	stw	ra,8(sp)
    a09c:	df000115 	stw	fp,4(sp)
    a0a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a0a4:	0009883a 	mov	r4,zero
    a0a8:	000a55c0 	call	a55c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a0ac:	000a5900 	call	a590 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a0b0:	01000074 	movhi	r4,1
    a0b4:	21355004 	addi	r4,r4,-10944
    a0b8:	01400074 	movhi	r5,1
    a0bc:	29755004 	addi	r5,r5,-10944
    a0c0:	01800074 	movhi	r6,1
    a0c4:	31b55004 	addi	r6,r6,-10944
    a0c8:	000c6800 	call	c680 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a0cc:	000c1940 	call	c194 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a0d0:	01000074 	movhi	r4,1
    a0d4:	21307e04 	addi	r4,r4,-15880
    a0d8:	000cdec0 	call	cdec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a0dc:	d1201717 	ldw	r4,-32676(gp)
    a0e0:	d1601817 	ldw	r5,-32672(gp)
    a0e4:	d1a01917 	ldw	r6,-32668(gp)
    a0e8:	00001fc0 	call	1fc <main>
    a0ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a0f0:	01000044 	movi	r4,1
    a0f4:	0009a980 	call	9a98 <close>
  exit (result);
    a0f8:	e13fff17 	ldw	r4,-4(fp)
    a0fc:	000ce000 	call	ce00 <exit>

0000a100 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a100:	defffe04 	addi	sp,sp,-8
    a104:	df000115 	stw	fp,4(sp)
    a108:	df000104 	addi	fp,sp,4
    a10c:	e13fff15 	stw	r4,-4(fp)
}
    a110:	e037883a 	mov	sp,fp
    a114:	df000017 	ldw	fp,0(sp)
    a118:	dec00104 	addi	sp,sp,4
    a11c:	f800283a 	ret

0000a120 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a120:	defffe04 	addi	sp,sp,-8
    a124:	df000115 	stw	fp,4(sp)
    a128:	df000104 	addi	fp,sp,4
    a12c:	e13fff15 	stw	r4,-4(fp)
}
    a130:	e037883a 	mov	sp,fp
    a134:	df000017 	ldw	fp,0(sp)
    a138:	dec00104 	addi	sp,sp,4
    a13c:	f800283a 	ret

0000a140 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a140:	defff704 	addi	sp,sp,-36
    a144:	dfc00815 	stw	ra,32(sp)
    a148:	df000715 	stw	fp,28(sp)
    a14c:	df000704 	addi	fp,sp,28
    a150:	e13ffb15 	stw	r4,-20(fp)
    a154:	e17ffc15 	stw	r5,-16(fp)
    a158:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a15c:	e0bffb17 	ldw	r2,-20(fp)
    a160:	1004803a 	cmplt	r2,r2,zero
    a164:	1000081e 	bne	r2,zero,a188 <read+0x48>
    a168:	e0bffb17 	ldw	r2,-20(fp)
    a16c:	10800324 	muli	r2,r2,12
    a170:	1007883a 	mov	r3,r2
    a174:	00800074 	movhi	r2,1
    a178:	10b76804 	addi	r2,r2,-8800
    a17c:	1887883a 	add	r3,r3,r2
    a180:	e0ffff15 	stw	r3,-4(fp)
    a184:	00000106 	br	a18c <read+0x4c>
    a188:	e03fff15 	stw	zero,-4(fp)
    a18c:	e0bfff17 	ldw	r2,-4(fp)
    a190:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a194:	e0bffa17 	ldw	r2,-24(fp)
    a198:	1005003a 	cmpeq	r2,r2,zero
    a19c:	1000241e 	bne	r2,zero,a230 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a1a0:	e0bffa17 	ldw	r2,-24(fp)
    a1a4:	10800217 	ldw	r2,8(r2)
    a1a8:	108000cc 	andi	r2,r2,3
    a1ac:	10800060 	cmpeqi	r2,r2,1
    a1b0:	10001a1e 	bne	r2,zero,a21c <read+0xdc>
    a1b4:	e0bffa17 	ldw	r2,-24(fp)
    a1b8:	10800017 	ldw	r2,0(r2)
    a1bc:	10800517 	ldw	r2,20(r2)
    a1c0:	1005003a 	cmpeq	r2,r2,zero
    a1c4:	1000151e 	bne	r2,zero,a21c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a1c8:	e0bffa17 	ldw	r2,-24(fp)
    a1cc:	10800017 	ldw	r2,0(r2)
    a1d0:	10800517 	ldw	r2,20(r2)
    a1d4:	e17ffc17 	ldw	r5,-16(fp)
    a1d8:	e1bffd17 	ldw	r6,-12(fp)
    a1dc:	e13ffa17 	ldw	r4,-24(fp)
    a1e0:	103ee83a 	callr	r2
    a1e4:	e0bff915 	stw	r2,-28(fp)
    a1e8:	e0bff917 	ldw	r2,-28(fp)
    a1ec:	1004403a 	cmpge	r2,r2,zero
    a1f0:	1000071e 	bne	r2,zero,a210 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a1f4:	000a2600 	call	a260 <alt_get_errno>
    a1f8:	e0fff917 	ldw	r3,-28(fp)
    a1fc:	00c7c83a 	sub	r3,zero,r3
    a200:	10c00015 	stw	r3,0(r2)
          return -1;
    a204:	00bfffc4 	movi	r2,-1
    a208:	e0bffe15 	stw	r2,-8(fp)
    a20c:	00000e06 	br	a248 <read+0x108>
        }
        return rval;
    a210:	e0bff917 	ldw	r2,-28(fp)
    a214:	e0bffe15 	stw	r2,-8(fp)
    a218:	00000b06 	br	a248 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a21c:	000a2600 	call	a260 <alt_get_errno>
    a220:	1007883a 	mov	r3,r2
    a224:	00800344 	movi	r2,13
    a228:	18800015 	stw	r2,0(r3)
    a22c:	00000406 	br	a240 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a230:	000a2600 	call	a260 <alt_get_errno>
    a234:	1007883a 	mov	r3,r2
    a238:	00801444 	movi	r2,81
    a23c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a240:	00bfffc4 	movi	r2,-1
    a244:	e0bffe15 	stw	r2,-8(fp)
    a248:	e0bffe17 	ldw	r2,-8(fp)
}
    a24c:	e037883a 	mov	sp,fp
    a250:	dfc00117 	ldw	ra,4(sp)
    a254:	df000017 	ldw	fp,0(sp)
    a258:	dec00204 	addi	sp,sp,8
    a25c:	f800283a 	ret

0000a260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a260:	defffd04 	addi	sp,sp,-12
    a264:	dfc00215 	stw	ra,8(sp)
    a268:	df000115 	stw	fp,4(sp)
    a26c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a270:	00800074 	movhi	r2,1
    a274:	10b83604 	addi	r2,r2,-7976
    a278:	10800017 	ldw	r2,0(r2)
    a27c:	1005003a 	cmpeq	r2,r2,zero
    a280:	1000061e 	bne	r2,zero,a29c <alt_get_errno+0x3c>
    a284:	00800074 	movhi	r2,1
    a288:	10b83604 	addi	r2,r2,-7976
    a28c:	10800017 	ldw	r2,0(r2)
    a290:	103ee83a 	callr	r2
    a294:	e0bfff15 	stw	r2,-4(fp)
    a298:	00000306 	br	a2a8 <alt_get_errno+0x48>
    a29c:	00800074 	movhi	r2,1
    a2a0:	10b84104 	addi	r2,r2,-7932
    a2a4:	e0bfff15 	stw	r2,-4(fp)
    a2a8:	e0bfff17 	ldw	r2,-4(fp)
}
    a2ac:	e037883a 	mov	sp,fp
    a2b0:	dfc00117 	ldw	ra,4(sp)
    a2b4:	df000017 	ldw	fp,0(sp)
    a2b8:	dec00204 	addi	sp,sp,8
    a2bc:	f800283a 	ret

0000a2c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a2c0:	defffe04 	addi	sp,sp,-8
    a2c4:	df000115 	stw	fp,4(sp)
    a2c8:	df000104 	addi	fp,sp,4
    a2cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a2d0:	e0bfff17 	ldw	r2,-4(fp)
    a2d4:	108000d0 	cmplti	r2,r2,3
    a2d8:	10000d1e 	bne	r2,zero,a310 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a2dc:	e0bfff17 	ldw	r2,-4(fp)
    a2e0:	00c00074 	movhi	r3,1
    a2e4:	18f76804 	addi	r3,r3,-8800
    a2e8:	10800324 	muli	r2,r2,12
    a2ec:	10c5883a 	add	r2,r2,r3
    a2f0:	10800204 	addi	r2,r2,8
    a2f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a2f8:	e0bfff17 	ldw	r2,-4(fp)
    a2fc:	00c00074 	movhi	r3,1
    a300:	18f76804 	addi	r3,r3,-8800
    a304:	10800324 	muli	r2,r2,12
    a308:	10c5883a 	add	r2,r2,r3
    a30c:	10000015 	stw	zero,0(r2)
  }
}
    a310:	e037883a 	mov	sp,fp
    a314:	df000017 	ldw	fp,0(sp)
    a318:	dec00104 	addi	sp,sp,4
    a31c:	f800283a 	ret

0000a320 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a320:	defff804 	addi	sp,sp,-32
    a324:	df000715 	stw	fp,28(sp)
    a328:	df000704 	addi	fp,sp,28
    a32c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a330:	0005303a 	rdctl	r2,status
    a334:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a338:	e0fffb17 	ldw	r3,-20(fp)
    a33c:	00bfff84 	movi	r2,-2
    a340:	1884703a 	and	r2,r3,r2
    a344:	1001703a 	wrctl	status,r2
  
  return context;
    a348:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a34c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a350:	d0a00e17 	ldw	r2,-32712(gp)
    a354:	10c000c4 	addi	r3,r2,3
    a358:	00bfff04 	movi	r2,-4
    a35c:	1884703a 	and	r2,r3,r2
    a360:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a364:	d0e00e17 	ldw	r3,-32712(gp)
    a368:	e0bffe17 	ldw	r2,-8(fp)
    a36c:	1887883a 	add	r3,r3,r2
    a370:	00804034 	movhi	r2,256
    a374:	10800004 	addi	r2,r2,0
    a378:	10c0072e 	bgeu	r2,r3,a398 <sbrk+0x78>
    a37c:	e0bffd17 	ldw	r2,-12(fp)
    a380:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a384:	e0bffa17 	ldw	r2,-24(fp)
    a388:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a38c:	00bfffc4 	movi	r2,-1
    a390:	e0bfff15 	stw	r2,-4(fp)
    a394:	00000c06 	br	a3c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a398:	d0a00e17 	ldw	r2,-32712(gp)
    a39c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a3a0:	d0e00e17 	ldw	r3,-32712(gp)
    a3a4:	e0bffe17 	ldw	r2,-8(fp)
    a3a8:	1885883a 	add	r2,r3,r2
    a3ac:	d0a00e15 	stw	r2,-32712(gp)
    a3b0:	e0bffd17 	ldw	r2,-12(fp)
    a3b4:	e0bff915 	stw	r2,-28(fp)
    a3b8:	e0bff917 	ldw	r2,-28(fp)
    a3bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a3c0:	e0bffc17 	ldw	r2,-16(fp)
    a3c4:	e0bfff15 	stw	r2,-4(fp)
    a3c8:	e0bfff17 	ldw	r2,-4(fp)
} 
    a3cc:	e037883a 	mov	sp,fp
    a3d0:	df000017 	ldw	fp,0(sp)
    a3d4:	dec00104 	addi	sp,sp,4
    a3d8:	f800283a 	ret

0000a3dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a3dc:	defff704 	addi	sp,sp,-36
    a3e0:	dfc00815 	stw	ra,32(sp)
    a3e4:	df000715 	stw	fp,28(sp)
    a3e8:	df000704 	addi	fp,sp,28
    a3ec:	e13ffb15 	stw	r4,-20(fp)
    a3f0:	e17ffc15 	stw	r5,-16(fp)
    a3f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a3f8:	e0bffb17 	ldw	r2,-20(fp)
    a3fc:	1004803a 	cmplt	r2,r2,zero
    a400:	1000081e 	bne	r2,zero,a424 <write+0x48>
    a404:	e0bffb17 	ldw	r2,-20(fp)
    a408:	10800324 	muli	r2,r2,12
    a40c:	1007883a 	mov	r3,r2
    a410:	00800074 	movhi	r2,1
    a414:	10b76804 	addi	r2,r2,-8800
    a418:	1887883a 	add	r3,r3,r2
    a41c:	e0ffff15 	stw	r3,-4(fp)
    a420:	00000106 	br	a428 <write+0x4c>
    a424:	e03fff15 	stw	zero,-4(fp)
    a428:	e0bfff17 	ldw	r2,-4(fp)
    a42c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a430:	e0bffa17 	ldw	r2,-24(fp)
    a434:	1005003a 	cmpeq	r2,r2,zero
    a438:	1000241e 	bne	r2,zero,a4cc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a43c:	e0bffa17 	ldw	r2,-24(fp)
    a440:	10800217 	ldw	r2,8(r2)
    a444:	108000cc 	andi	r2,r2,3
    a448:	1005003a 	cmpeq	r2,r2,zero
    a44c:	10001a1e 	bne	r2,zero,a4b8 <write+0xdc>
    a450:	e0bffa17 	ldw	r2,-24(fp)
    a454:	10800017 	ldw	r2,0(r2)
    a458:	10800617 	ldw	r2,24(r2)
    a45c:	1005003a 	cmpeq	r2,r2,zero
    a460:	1000151e 	bne	r2,zero,a4b8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a464:	e0bffa17 	ldw	r2,-24(fp)
    a468:	10800017 	ldw	r2,0(r2)
    a46c:	10800617 	ldw	r2,24(r2)
    a470:	e17ffc17 	ldw	r5,-16(fp)
    a474:	e1bffd17 	ldw	r6,-12(fp)
    a478:	e13ffa17 	ldw	r4,-24(fp)
    a47c:	103ee83a 	callr	r2
    a480:	e0bff915 	stw	r2,-28(fp)
    a484:	e0bff917 	ldw	r2,-28(fp)
    a488:	1004403a 	cmpge	r2,r2,zero
    a48c:	1000071e 	bne	r2,zero,a4ac <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a490:	000a4fc0 	call	a4fc <alt_get_errno>
    a494:	e0fff917 	ldw	r3,-28(fp)
    a498:	00c7c83a 	sub	r3,zero,r3
    a49c:	10c00015 	stw	r3,0(r2)
        return -1;
    a4a0:	00bfffc4 	movi	r2,-1
    a4a4:	e0bffe15 	stw	r2,-8(fp)
    a4a8:	00000e06 	br	a4e4 <write+0x108>
      }
      return rval;
    a4ac:	e0bff917 	ldw	r2,-28(fp)
    a4b0:	e0bffe15 	stw	r2,-8(fp)
    a4b4:	00000b06 	br	a4e4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a4b8:	000a4fc0 	call	a4fc <alt_get_errno>
    a4bc:	1007883a 	mov	r3,r2
    a4c0:	00800344 	movi	r2,13
    a4c4:	18800015 	stw	r2,0(r3)
    a4c8:	00000406 	br	a4dc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a4cc:	000a4fc0 	call	a4fc <alt_get_errno>
    a4d0:	1007883a 	mov	r3,r2
    a4d4:	00801444 	movi	r2,81
    a4d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a4dc:	00bfffc4 	movi	r2,-1
    a4e0:	e0bffe15 	stw	r2,-8(fp)
    a4e4:	e0bffe17 	ldw	r2,-8(fp)
}
    a4e8:	e037883a 	mov	sp,fp
    a4ec:	dfc00117 	ldw	ra,4(sp)
    a4f0:	df000017 	ldw	fp,0(sp)
    a4f4:	dec00204 	addi	sp,sp,8
    a4f8:	f800283a 	ret

0000a4fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a4fc:	defffd04 	addi	sp,sp,-12
    a500:	dfc00215 	stw	ra,8(sp)
    a504:	df000115 	stw	fp,4(sp)
    a508:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a50c:	00800074 	movhi	r2,1
    a510:	10b83604 	addi	r2,r2,-7976
    a514:	10800017 	ldw	r2,0(r2)
    a518:	1005003a 	cmpeq	r2,r2,zero
    a51c:	1000061e 	bne	r2,zero,a538 <alt_get_errno+0x3c>
    a520:	00800074 	movhi	r2,1
    a524:	10b83604 	addi	r2,r2,-7976
    a528:	10800017 	ldw	r2,0(r2)
    a52c:	103ee83a 	callr	r2
    a530:	e0bfff15 	stw	r2,-4(fp)
    a534:	00000306 	br	a544 <alt_get_errno+0x48>
    a538:	00800074 	movhi	r2,1
    a53c:	10b84104 	addi	r2,r2,-7932
    a540:	e0bfff15 	stw	r2,-4(fp)
    a544:	e0bfff17 	ldw	r2,-4(fp)
}
    a548:	e037883a 	mov	sp,fp
    a54c:	dfc00117 	ldw	ra,4(sp)
    a550:	df000017 	ldw	fp,0(sp)
    a554:	dec00204 	addi	sp,sp,8
    a558:	f800283a 	ret

0000a55c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a55c:	defffd04 	addi	sp,sp,-12
    a560:	dfc00215 	stw	ra,8(sp)
    a564:	df000115 	stw	fp,4(sp)
    a568:	df000104 	addi	fp,sp,4
    a56c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    a570:	000c9bc0 	call	c9bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a574:	00800044 	movi	r2,1
    a578:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a57c:	e037883a 	mov	sp,fp
    a580:	dfc00117 	ldw	ra,4(sp)
    a584:	df000017 	ldw	fp,0(sp)
    a588:	dec00204 	addi	sp,sp,8
    a58c:	f800283a 	ret

0000a590 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a590:	defffe04 	addi	sp,sp,-8
    a594:	dfc00115 	stw	ra,4(sp)
    a598:	df000015 	stw	fp,0(sp)
    a59c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSCLK_TIMER, sysclk_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
    a5a0:	01000074 	movhi	r4,1
    a5a4:	2137c804 	addi	r4,r4,-8416
    a5a8:	000a6180 	call	a618 <alt_epcs_flash_init>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    a5ac:	01000074 	movhi	r4,1
    a5b0:	21380404 	addi	r4,r4,-8176
    a5b4:	000b883a 	mov	r5,zero
    a5b8:	000d883a 	mov	r6,zero
    a5bc:	000b0f40 	call	b0f4 <altera_avalon_uart_init>
    a5c0:	01000074 	movhi	r4,1
    a5c4:	2137fa04 	addi	r4,r4,-8216
    a5c8:	000a5e00 	call	a5e0 <alt_dev_reg>
}
    a5cc:	e037883a 	mov	sp,fp
    a5d0:	dfc00117 	ldw	ra,4(sp)
    a5d4:	df000017 	ldw	fp,0(sp)
    a5d8:	dec00204 	addi	sp,sp,8
    a5dc:	f800283a 	ret

0000a5e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a5e0:	defffd04 	addi	sp,sp,-12
    a5e4:	dfc00215 	stw	ra,8(sp)
    a5e8:	df000115 	stw	fp,4(sp)
    a5ec:	df000104 	addi	fp,sp,4
    a5f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a5f4:	e13fff17 	ldw	r4,-4(fp)
    a5f8:	01400074 	movhi	r5,1
    a5fc:	29783304 	addi	r5,r5,-7988
    a600:	000c0800 	call	c080 <alt_dev_llist_insert>
}
    a604:	e037883a 	mov	sp,fp
    a608:	dfc00117 	ldw	ra,4(sp)
    a60c:	df000017 	ldw	fp,0(sp)
    a610:	dec00204 	addi	sp,sp,8
    a614:	f800283a 	ret

0000a618 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    a618:	defffc04 	addi	sp,sp,-16
    a61c:	dfc00315 	stw	ra,12(sp)
    a620:	df000215 	stw	fp,8(sp)
    a624:	df000204 	addi	fp,sp,8
    a628:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    a62c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    a630:	e13fff17 	ldw	r4,-4(fp)
    a634:	000a6a40 	call	a6a4 <alt_epcs_flash_query>
    a638:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    a63c:	e0bffe17 	ldw	r2,-8(fp)
    a640:	1004c03a 	cmpne	r2,r2,zero
    a644:	1000031e 	bne	r2,zero,a654 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    a648:	e13fff17 	ldw	r4,-4(fp)
    a64c:	000a66c0 	call	a66c <alt_flash_device_register>
    a650:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    a654:	e0bffe17 	ldw	r2,-8(fp)
}
    a658:	e037883a 	mov	sp,fp
    a65c:	dfc00117 	ldw	ra,4(sp)
    a660:	df000017 	ldw	fp,0(sp)
    a664:	dec00204 	addi	sp,sp,8
    a668:	f800283a 	ret

0000a66c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    a66c:	defffd04 	addi	sp,sp,-12
    a670:	dfc00215 	stw	ra,8(sp)
    a674:	df000115 	stw	fp,4(sp)
    a678:	df000104 	addi	fp,sp,4
    a67c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    a680:	e13fff17 	ldw	r4,-4(fp)
    a684:	01400074 	movhi	r5,1
    a688:	29783704 	addi	r5,r5,-7972
    a68c:	000c0800 	call	c080 <alt_dev_llist_insert>
}
    a690:	e037883a 	mov	sp,fp
    a694:	dfc00117 	ldw	ra,4(sp)
    a698:	df000017 	ldw	fp,0(sp)
    a69c:	dec00204 	addi	sp,sp,8
    a6a0:	f800283a 	ret

0000a6a4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    a6a4:	defffc04 	addi	sp,sp,-16
    a6a8:	dfc00315 	stw	ra,12(sp)
    a6ac:	df000215 	stw	fp,8(sp)
    a6b0:	df000204 	addi	fp,sp,8
    a6b4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    a6b8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    a6bc:	e0bfff17 	ldw	r2,-4(fp)
    a6c0:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    a6c4:	e0bfff17 	ldw	r2,-4(fp)
    a6c8:	11002d17 	ldw	r4,180(r2)
    a6cc:	000bee40 	call	bee4 <epcs_read_electronic_signature>
    a6d0:	10c03fcc 	andi	r3,r2,255
    a6d4:	e0bfff17 	ldw	r2,-4(fp)
    a6d8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    a6dc:	e0bfff17 	ldw	r2,-4(fp)
    a6e0:	10802f17 	ldw	r2,188(r2)
    a6e4:	10800598 	cmpnei	r2,r2,22
    a6e8:	10000a1e 	bne	r2,zero,a714 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    a6ec:	e0ffff17 	ldw	r3,-4(fp)
    a6f0:	00802034 	movhi	r2,128
    a6f4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
    a6f8:	e0ffff17 	ldw	r3,-4(fp)
    a6fc:	00802004 	movi	r2,128
    a700:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    a704:	e0ffff17 	ldw	r3,-4(fp)
    a708:	00800074 	movhi	r2,1
    a70c:	18801015 	stw	r2,64(r3)
    a710:	00007306 	br	a8e0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    a714:	e0bfff17 	ldw	r2,-4(fp)
    a718:	10802f17 	ldw	r2,188(r2)
    a71c:	10800518 	cmpnei	r2,r2,20
    a720:	10000a1e 	bne	r2,zero,a74c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    a724:	e0ffff17 	ldw	r3,-4(fp)
    a728:	00800834 	movhi	r2,32
    a72c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
    a730:	e0ffff17 	ldw	r3,-4(fp)
    a734:	00800804 	movi	r2,32
    a738:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    a73c:	e0ffff17 	ldw	r3,-4(fp)
    a740:	00800074 	movhi	r2,1
    a744:	18801015 	stw	r2,64(r3)
    a748:	00006506 	br	a8e0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    a74c:	e0bfff17 	ldw	r2,-4(fp)
    a750:	10802f17 	ldw	r2,188(r2)
    a754:	108004d8 	cmpnei	r2,r2,19
    a758:	10000a1e 	bne	r2,zero,a784 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    a75c:	e0ffff17 	ldw	r3,-4(fp)
    a760:	00800434 	movhi	r2,16
    a764:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
    a768:	e0ffff17 	ldw	r3,-4(fp)
    a76c:	00800404 	movi	r2,16
    a770:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    a774:	e0ffff17 	ldw	r3,-4(fp)
    a778:	00800074 	movhi	r2,1
    a77c:	18801015 	stw	r2,64(r3)
    a780:	00005706 	br	a8e0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    a784:	e0bfff17 	ldw	r2,-4(fp)
    a788:	10802f17 	ldw	r2,188(r2)
    a78c:	10800498 	cmpnei	r2,r2,18
    a790:	10000a1e 	bne	r2,zero,a7bc <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    a794:	e0ffff17 	ldw	r3,-4(fp)
    a798:	00800234 	movhi	r2,8
    a79c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
    a7a0:	e0ffff17 	ldw	r3,-4(fp)
    a7a4:	00800204 	movi	r2,8
    a7a8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    a7ac:	e0ffff17 	ldw	r3,-4(fp)
    a7b0:	00800074 	movhi	r2,1
    a7b4:	18801015 	stw	r2,64(r3)
    a7b8:	00004906 	br	a8e0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    a7bc:	e0bfff17 	ldw	r2,-4(fp)
    a7c0:	10802f17 	ldw	r2,188(r2)
    a7c4:	10800418 	cmpnei	r2,r2,16
    a7c8:	10000a1e 	bne	r2,zero,a7f4 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    a7cc:	e0ffff17 	ldw	r3,-4(fp)
    a7d0:	008000b4 	movhi	r2,2
    a7d4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
    a7d8:	e0ffff17 	ldw	r3,-4(fp)
    a7dc:	00800104 	movi	r2,4
    a7e0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
    a7e4:	e0ffff17 	ldw	r3,-4(fp)
    a7e8:	00a00014 	movui	r2,32768
    a7ec:	18801015 	stw	r2,64(r3)
    a7f0:	00003b06 	br	a8e0 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    a7f4:	e0bfff17 	ldw	r2,-4(fp)
    a7f8:	11002d17 	ldw	r4,180(r2)
    a7fc:	000bf500 	call	bf50 <epcs_read_device_id>
    a800:	1007883a 	mov	r3,r2
    a804:	e0bfff17 	ldw	r2,-4(fp)
    a808:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    a80c:	e0bfff17 	ldw	r2,-4(fp)
    a810:	10c02f17 	ldw	r3,188(r2)
    a814:	00804034 	movhi	r2,256
    a818:	10bfffc4 	addi	r2,r2,-1
    a81c:	1886703a 	and	r3,r3,r2
    a820:	00800874 	movhi	r2,33
    a824:	10ae8604 	addi	r2,r2,-17896
    a828:	18800a1e 	bne	r3,r2,a854 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    a82c:	e0ffff17 	ldw	r3,-4(fp)
    a830:	00804034 	movhi	r2,256
    a834:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    a838:	e0ffff17 	ldw	r3,-4(fp)
    a83c:	00804004 	movi	r2,256
    a840:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    a844:	e0ffff17 	ldw	r3,-4(fp)
    a848:	00800074 	movhi	r2,1
    a84c:	18801015 	stw	r2,64(r3)
    a850:	00002306 	br	a8e0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    a854:	e0bfff17 	ldw	r2,-4(fp)
    a858:	10802f17 	ldw	r2,188(r2)
    a85c:	10803fcc 	andi	r2,r2,255
    a860:	10800618 	cmpnei	r2,r2,24
    a864:	10000a1e 	bne	r2,zero,a890 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    a868:	e0ffff17 	ldw	r3,-4(fp)
    a86c:	00804034 	movhi	r2,256
    a870:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
    a874:	e0ffff17 	ldw	r3,-4(fp)
    a878:	00801004 	movi	r2,64
    a87c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
    a880:	e0ffff17 	ldw	r3,-4(fp)
    a884:	00800134 	movhi	r2,4
    a888:	18801015 	stw	r2,64(r3)
    a88c:	00001406 	br	a8e0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    a890:	e0bfff17 	ldw	r2,-4(fp)
    a894:	10802f17 	ldw	r2,188(r2)
    a898:	10803fcc 	andi	r2,r2,255
    a89c:	10800658 	cmpnei	r2,r2,25
    a8a0:	10000d1e 	bne	r2,zero,a8d8 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    a8a4:	e0ffff17 	ldw	r3,-4(fp)
    a8a8:	00808034 	movhi	r2,512
    a8ac:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    a8b0:	e0ffff17 	ldw	r3,-4(fp)
    a8b4:	00808004 	movi	r2,512
    a8b8:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    a8bc:	e0ffff17 	ldw	r3,-4(fp)
    a8c0:	00800074 	movhi	r2,1
    a8c4:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    a8c8:	e0ffff17 	ldw	r3,-4(fp)
    a8cc:	00800044 	movi	r2,1
    a8d0:	18803115 	stw	r2,196(r3)
    a8d4:	00000206 	br	a8e0 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    a8d8:	00bffb44 	movi	r2,-19
    a8dc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    a8e0:	e0bfff17 	ldw	r2,-4(fp)
    a8e4:	10800e17 	ldw	r2,56(r2)
    a8e8:	1007883a 	mov	r3,r2
    a8ec:	e0bfff17 	ldw	r2,-4(fp)
    a8f0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
    a8f4:	e0ffff17 	ldw	r3,-4(fp)
    a8f8:	00800044 	movi	r2,1
    a8fc:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
    a900:	e0bfff17 	ldw	r2,-4(fp)
    a904:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    a908:	e0ffff17 	ldw	r3,-4(fp)
    a90c:	00804004 	movi	r2,256
    a910:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
    a914:	e0bffe17 	ldw	r2,-8(fp)
}
    a918:	e037883a 	mov	sp,fp
    a91c:	dfc00117 	ldw	ra,4(sp)
    a920:	df000017 	ldw	fp,0(sp)
    a924:	dec00204 	addi	sp,sp,8
    a928:	f800283a 	ret

0000a92c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    a92c:	deffeb04 	addi	sp,sp,-84
    a930:	dfc01415 	stw	ra,80(sp)
    a934:	df001315 	stw	fp,76(sp)
    a938:	df001304 	addi	fp,sp,76
    a93c:	e13ff915 	stw	r4,-28(fp)
    a940:	e17ffa15 	stw	r5,-24(fp)
    a944:	e1bffb15 	stw	r6,-20(fp)
    a948:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    a94c:	00800804 	movi	r2,32
    a950:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
    a954:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
    a958:	00002c06 	br	aa0c <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    a95c:	e0bff017 	ldw	r2,-64(fp)
    a960:	e0bfff15 	stw	r2,-4(fp)
    a964:	e0fffc17 	ldw	r3,-16(fp)
    a968:	e0fffe15 	stw	r3,-8(fp)
    a96c:	e0bfff17 	ldw	r2,-4(fp)
    a970:	e0fffe17 	ldw	r3,-8(fp)
    a974:	10c0022e 	bgeu	r2,r3,a980 <alt_epcs_flash_memcmp+0x54>
    a978:	e0bfff17 	ldw	r2,-4(fp)
    a97c:	e0bffe15 	stw	r2,-8(fp)
    a980:	e0fffe17 	ldw	r3,-8(fp)
    a984:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    a988:	e0fffb17 	ldw	r3,-20(fp)
    a98c:	e0bfef17 	ldw	r2,-68(fp)
    a990:	188b883a 	add	r5,r3,r2
    a994:	e1bff104 	addi	r6,fp,-60
    a998:	e13ff917 	ldw	r4,-28(fp)
    a99c:	e1ffee17 	ldw	r7,-72(fp)
    a9a0:	000af640 	call	af64 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    a9a4:	1004403a 	cmpge	r2,r2,zero
    a9a8:	1000031e 	bne	r2,zero,a9b8 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    a9ac:	00bfffc4 	movi	r2,-1
    a9b0:	e0bffd15 	stw	r2,-12(fp)
    a9b4:	00001906 	br	aa1c <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    a9b8:	e0fffa17 	ldw	r3,-24(fp)
    a9bc:	e0bfef17 	ldw	r2,-68(fp)
    a9c0:	1889883a 	add	r4,r3,r2
    a9c4:	e1bfee17 	ldw	r6,-72(fp)
    a9c8:	e17ff104 	addi	r5,fp,-60
    a9cc:	000ce380 	call	ce38 <memcmp>
    a9d0:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
    a9d4:	e0bfed17 	ldw	r2,-76(fp)
    a9d8:	1005003a 	cmpeq	r2,r2,zero
    a9dc:	1000031e 	bne	r2,zero,a9ec <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
    a9e0:	e0ffed17 	ldw	r3,-76(fp)
    a9e4:	e0fffd15 	stw	r3,-12(fp)
    a9e8:	00000c06 	br	aa1c <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
    a9ec:	e0ffee17 	ldw	r3,-72(fp)
    a9f0:	e0bffc17 	ldw	r2,-16(fp)
    a9f4:	10c5c83a 	sub	r2,r2,r3
    a9f8:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
    a9fc:	e0ffef17 	ldw	r3,-68(fp)
    aa00:	e0bfee17 	ldw	r2,-72(fp)
    aa04:	1885883a 	add	r2,r3,r2
    aa08:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    aa0c:	e0bffc17 	ldw	r2,-16(fp)
    aa10:	1004c03a 	cmpne	r2,r2,zero
    aa14:	103fd11e 	bne	r2,zero,a95c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    aa18:	e03ffd15 	stw	zero,-12(fp)
    aa1c:	e0bffd17 	ldw	r2,-12(fp)
}
    aa20:	e037883a 	mov	sp,fp
    aa24:	dfc00117 	ldw	ra,4(sp)
    aa28:	df000017 	ldw	fp,0(sp)
    aa2c:	dec00204 	addi	sp,sp,8
    aa30:	f800283a 	ret

0000aa34 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    aa34:	defff204 	addi	sp,sp,-56
    aa38:	dfc00d15 	stw	ra,52(sp)
    aa3c:	df000c15 	stw	fp,48(sp)
    aa40:	df000c04 	addi	fp,sp,48
    aa44:	e13ffa15 	stw	r4,-24(fp)
    aa48:	e17ffb15 	stw	r5,-20(fp)
    aa4c:	e1bffc15 	stw	r6,-16(fp)
    aa50:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
    aa54:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    aa58:	e03ff815 	stw	zero,-32(fp)
    aa5c:	00008b06 	br	ac8c <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    aa60:	e0bff817 	ldw	r2,-32(fp)
    aa64:	e0fffa17 	ldw	r3,-24(fp)
    aa68:	1004913a 	slli	r2,r2,4
    aa6c:	10c5883a 	add	r2,r2,r3
    aa70:	10800d04 	addi	r2,r2,52
    aa74:	10c00017 	ldw	r3,0(r2)
    aa78:	e0bffb17 	ldw	r2,-20(fp)
    aa7c:	10c08016 	blt	r2,r3,ac80 <alt_epcs_flash_write+0x24c>
    aa80:	e0bff817 	ldw	r2,-32(fp)
    aa84:	e0fffa17 	ldw	r3,-24(fp)
    aa88:	1004913a 	slli	r2,r2,4
    aa8c:	10c5883a 	add	r2,r2,r3
    aa90:	10800d04 	addi	r2,r2,52
    aa94:	11000017 	ldw	r4,0(r2)
    aa98:	e0bff817 	ldw	r2,-32(fp)
    aa9c:	e0fffa17 	ldw	r3,-24(fp)
    aaa0:	1004913a 	slli	r2,r2,4
    aaa4:	10c5883a 	add	r2,r2,r3
    aaa8:	10800e04 	addi	r2,r2,56
    aaac:	10800017 	ldw	r2,0(r2)
    aab0:	2087883a 	add	r3,r4,r2
    aab4:	e0bffb17 	ldw	r2,-20(fp)
    aab8:	10c0710e 	bge	r2,r3,ac80 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    aabc:	e0bff817 	ldw	r2,-32(fp)
    aac0:	e0fffa17 	ldw	r3,-24(fp)
    aac4:	1004913a 	slli	r2,r2,4
    aac8:	10c5883a 	add	r2,r2,r3
    aacc:	10800d04 	addi	r2,r2,52
    aad0:	10800017 	ldw	r2,0(r2)
    aad4:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    aad8:	e03ff715 	stw	zero,-36(fp)
    aadc:	00006006 	br	ac60 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
    aae0:	e0fffb17 	ldw	r3,-20(fp)
    aae4:	e0bff517 	ldw	r2,-44(fp)
    aae8:	18805116 	blt	r3,r2,ac30 <alt_epcs_flash_write+0x1fc>
    aaec:	e0bff817 	ldw	r2,-32(fp)
    aaf0:	e0fffa17 	ldw	r3,-24(fp)
    aaf4:	1004913a 	slli	r2,r2,4
    aaf8:	10c5883a 	add	r2,r2,r3
    aafc:	10801004 	addi	r2,r2,64
    ab00:	10c00017 	ldw	r3,0(r2)
    ab04:	e0bff517 	ldw	r2,-44(fp)
    ab08:	1887883a 	add	r3,r3,r2
    ab0c:	e0bffb17 	ldw	r2,-20(fp)
    ab10:	10c0470e 	bge	r2,r3,ac30 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    ab14:	e0bff817 	ldw	r2,-32(fp)
    ab18:	e0fffa17 	ldw	r3,-24(fp)
    ab1c:	1004913a 	slli	r2,r2,4
    ab20:	10c5883a 	add	r2,r2,r3
    ab24:	10801004 	addi	r2,r2,64
    ab28:	10c00017 	ldw	r3,0(r2)
    ab2c:	e0bff517 	ldw	r2,-44(fp)
    ab30:	1887883a 	add	r3,r3,r2
    ab34:	e0bffb17 	ldw	r2,-20(fp)
    ab38:	1885c83a 	sub	r2,r3,r2
    ab3c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    ab40:	e0bff617 	ldw	r2,-40(fp)
    ab44:	e0bfff15 	stw	r2,-4(fp)
    ab48:	e0fffd17 	ldw	r3,-12(fp)
    ab4c:	e0fffe15 	stw	r3,-8(fp)
    ab50:	e0bfff17 	ldw	r2,-4(fp)
    ab54:	e0fffe17 	ldw	r3,-8(fp)
    ab58:	10c0020e 	bge	r2,r3,ab64 <alt_epcs_flash_write+0x130>
    ab5c:	e0bfff17 	ldw	r2,-4(fp)
    ab60:	e0bffe15 	stw	r2,-8(fp)
    ab64:	e0fffe17 	ldw	r3,-8(fp)
    ab68:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    ab6c:	e1fff617 	ldw	r7,-40(fp)
    ab70:	e13ffa17 	ldw	r4,-24(fp)
    ab74:	e17ffc17 	ldw	r5,-16(fp)
    ab78:	e1bffb17 	ldw	r6,-20(fp)
    ab7c:	000a92c0 	call	a92c <alt_epcs_flash_memcmp>
    ab80:	1005003a 	cmpeq	r2,r2,zero
    ab84:	1000131e 	bne	r2,zero,abd4 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    ab88:	e0bffa17 	ldw	r2,-24(fp)
    ab8c:	10800817 	ldw	r2,32(r2)
    ab90:	e13ffa17 	ldw	r4,-24(fp)
    ab94:	e17ff517 	ldw	r5,-44(fp)
    ab98:	103ee83a 	callr	r2
    ab9c:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
    aba0:	e0bff917 	ldw	r2,-28(fp)
    aba4:	1004c03a 	cmpne	r2,r2,zero
    aba8:	10000a1e 	bne	r2,zero,abd4 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
    abac:	e0bffa17 	ldw	r2,-24(fp)
    abb0:	10c00917 	ldw	r3,36(r2)
    abb4:	e0bff617 	ldw	r2,-40(fp)
    abb8:	d8800015 	stw	r2,0(sp)
    abbc:	e13ffa17 	ldw	r4,-24(fp)
    abc0:	e17ff517 	ldw	r5,-44(fp)
    abc4:	e1bffb17 	ldw	r6,-20(fp)
    abc8:	e1fffc17 	ldw	r7,-16(fp)
    abcc:	183ee83a 	callr	r3
    abd0:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    abd4:	e0fffd17 	ldw	r3,-12(fp)
    abd8:	e0bff617 	ldw	r2,-40(fp)
    abdc:	18802f26 	beq	r3,r2,ac9c <alt_epcs_flash_write+0x268>
    abe0:	e0bff917 	ldw	r2,-28(fp)
    abe4:	1004c03a 	cmpne	r2,r2,zero
    abe8:	10002c1e 	bne	r2,zero,ac9c <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
    abec:	e0fffd17 	ldw	r3,-12(fp)
    abf0:	e0bff617 	ldw	r2,-40(fp)
    abf4:	1885c83a 	sub	r2,r3,r2
    abf8:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    abfc:	e0bff817 	ldw	r2,-32(fp)
    ac00:	e0fffa17 	ldw	r3,-24(fp)
    ac04:	1004913a 	slli	r2,r2,4
    ac08:	10c5883a 	add	r2,r2,r3
    ac0c:	10801004 	addi	r2,r2,64
    ac10:	10c00017 	ldw	r3,0(r2)
    ac14:	e0bff517 	ldw	r2,-44(fp)
    ac18:	1885883a 	add	r2,r3,r2
    ac1c:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    ac20:	e0fffc17 	ldw	r3,-16(fp)
    ac24:	e0bff617 	ldw	r2,-40(fp)
    ac28:	1885883a 	add	r2,r3,r2
    ac2c:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    ac30:	e0bff817 	ldw	r2,-32(fp)
    ac34:	e0fffa17 	ldw	r3,-24(fp)
    ac38:	1004913a 	slli	r2,r2,4
    ac3c:	10c5883a 	add	r2,r2,r3
    ac40:	10801004 	addi	r2,r2,64
    ac44:	10c00017 	ldw	r3,0(r2)
    ac48:	e0bff517 	ldw	r2,-44(fp)
    ac4c:	10c5883a 	add	r2,r2,r3
    ac50:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    ac54:	e0bff717 	ldw	r2,-36(fp)
    ac58:	10800044 	addi	r2,r2,1
    ac5c:	e0bff715 	stw	r2,-36(fp)
    ac60:	e0bff817 	ldw	r2,-32(fp)
    ac64:	e0fffa17 	ldw	r3,-24(fp)
    ac68:	1004913a 	slli	r2,r2,4
    ac6c:	10c5883a 	add	r2,r2,r3
    ac70:	10800f04 	addi	r2,r2,60
    ac74:	10c00017 	ldw	r3,0(r2)
    ac78:	e0bff717 	ldw	r2,-36(fp)
    ac7c:	10ff9816 	blt	r2,r3,aae0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    ac80:	e0bff817 	ldw	r2,-32(fp)
    ac84:	10800044 	addi	r2,r2,1
    ac88:	e0bff815 	stw	r2,-32(fp)
    ac8c:	e0bffa17 	ldw	r2,-24(fp)
    ac90:	10c00c17 	ldw	r3,48(r2)
    ac94:	e0bff817 	ldw	r2,-32(fp)
    ac98:	10ff7116 	blt	r2,r3,aa60 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    ac9c:	e0bff917 	ldw	r2,-28(fp)
}
    aca0:	e037883a 	mov	sp,fp
    aca4:	dfc00117 	ldw	ra,4(sp)
    aca8:	df000017 	ldw	fp,0(sp)
    acac:	dec00204 	addi	sp,sp,8
    acb0:	f800283a 	ret

0000acb4 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    acb4:	defffa04 	addi	sp,sp,-24
    acb8:	df000515 	stw	fp,20(sp)
    acbc:	df000504 	addi	fp,sp,20
    acc0:	e13ffd15 	stw	r4,-12(fp)
    acc4:	e17ffe15 	stw	r5,-8(fp)
    acc8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    accc:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    acd0:	e0bffd17 	ldw	r2,-12(fp)
    acd4:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
    acd8:	e0bffb17 	ldw	r2,-20(fp)
    acdc:	10c00c17 	ldw	r3,48(r2)
    ace0:	e0bfff17 	ldw	r2,-4(fp)
    ace4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    ace8:	e0bffb17 	ldw	r2,-20(fp)
    acec:	10800c17 	ldw	r2,48(r2)
    acf0:	1004c03a 	cmpne	r2,r2,zero
    acf4:	1000031e 	bne	r2,zero,ad04 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
    acf8:	00bffec4 	movi	r2,-5
    acfc:	e0bffc15 	stw	r2,-16(fp)
    ad00:	00000b06 	br	ad30 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    ad04:	e0bffb17 	ldw	r2,-20(fp)
    ad08:	10800c17 	ldw	r2,48(r2)
    ad0c:	10800250 	cmplti	r2,r2,9
    ad10:	1000031e 	bne	r2,zero,ad20 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
    ad14:	00bffd04 	movi	r2,-12
    ad18:	e0bffc15 	stw	r2,-16(fp)
    ad1c:	00000406 	br	ad30 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
    ad20:	e0bffb17 	ldw	r2,-20(fp)
    ad24:	10c00d04 	addi	r3,r2,52
    ad28:	e0bffe17 	ldw	r2,-8(fp)
    ad2c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    ad30:	e0bffc17 	ldw	r2,-16(fp)
}
    ad34:	e037883a 	mov	sp,fp
    ad38:	df000017 	ldw	fp,0(sp)
    ad3c:	dec00104 	addi	sp,sp,4
    ad40:	f800283a 	ret

0000ad44 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    ad44:	defffa04 	addi	sp,sp,-24
    ad48:	dfc00515 	stw	ra,20(sp)
    ad4c:	df000415 	stw	fp,16(sp)
    ad50:	df000404 	addi	fp,sp,16
    ad54:	e13ffe15 	stw	r4,-8(fp)
    ad58:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    ad5c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    ad60:	e0bffe17 	ldw	r2,-8(fp)
    ad64:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    ad68:	e13ffe17 	ldw	r4,-8(fp)
    ad6c:	e17fff17 	ldw	r5,-4(fp)
    ad70:	000adb40 	call	adb4 <alt_epcs_test_address>
    ad74:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
    ad78:	e0bffd17 	ldw	r2,-12(fp)
    ad7c:	1004803a 	cmplt	r2,r2,zero
    ad80:	1000061e 	bne	r2,zero,ad9c <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    ad84:	e0bffc17 	ldw	r2,-16(fp)
    ad88:	11002d17 	ldw	r4,180(r2)
    ad8c:	e17fff17 	ldw	r5,-4(fp)
    ad90:	e0bffc17 	ldw	r2,-16(fp)
    ad94:	11803117 	ldw	r6,196(r2)
    ad98:	000ba0c0 	call	ba0c <epcs_sector_erase>
  }
  return ret_code;
    ad9c:	e0bffd17 	ldw	r2,-12(fp)
}
    ada0:	e037883a 	mov	sp,fp
    ada4:	dfc00117 	ldw	ra,4(sp)
    ada8:	df000017 	ldw	fp,0(sp)
    adac:	dec00204 	addi	sp,sp,8
    adb0:	f800283a 	ret

0000adb4 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    adb4:	defff904 	addi	sp,sp,-28
    adb8:	df000615 	stw	fp,24(sp)
    adbc:	df000604 	addi	fp,sp,24
    adc0:	e13ffe15 	stw	r4,-8(fp)
    adc4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    adc8:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    adcc:	e0bffe17 	ldw	r2,-8(fp)
    add0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    add4:	e0bffc17 	ldw	r2,-16(fp)
    add8:	10800c17 	ldw	r2,48(r2)
    addc:	10bfffc4 	addi	r2,r2,-1
    ade0:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    ade4:	e0bffb17 	ldw	r2,-20(fp)
    ade8:	e0fffc17 	ldw	r3,-16(fp)
    adec:	1004913a 	slli	r2,r2,4
    adf0:	10c5883a 	add	r2,r2,r3
    adf4:	10800d04 	addi	r2,r2,52
    adf8:	11000017 	ldw	r4,0(r2)
    adfc:	e0bffb17 	ldw	r2,-20(fp)
    ae00:	e0fffc17 	ldw	r3,-16(fp)
    ae04:	1004913a 	slli	r2,r2,4
    ae08:	10c5883a 	add	r2,r2,r3
    ae0c:	10800e04 	addi	r2,r2,56
    ae10:	10800017 	ldw	r2,0(r2)
    ae14:	2085883a 	add	r2,r4,r2
    ae18:	10bfffc4 	addi	r2,r2,-1
    ae1c:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
    ae20:	e0ffff17 	ldw	r3,-4(fp)
    ae24:	e0bffa17 	ldw	r2,-24(fp)
    ae28:	10c0022e 	bgeu	r2,r3,ae34 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    ae2c:	00bffec4 	movi	r2,-5
    ae30:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
    ae34:	e0bffd17 	ldw	r2,-12(fp)
}
    ae38:	e037883a 	mov	sp,fp
    ae3c:	df000017 	ldw	fp,0(sp)
    ae40:	dec00104 	addi	sp,sp,4
    ae44:	f800283a 	ret

0000ae48 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    ae48:	defff204 	addi	sp,sp,-56
    ae4c:	dfc00d15 	stw	ra,52(sp)
    ae50:	df000c15 	stw	fp,48(sp)
    ae54:	df000c04 	addi	fp,sp,48
    ae58:	e13ffa15 	stw	r4,-24(fp)
    ae5c:	e17ffb15 	stw	r5,-20(fp)
    ae60:	e1bffc15 	stw	r6,-16(fp)
    ae64:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    ae68:	e0bffa17 	ldw	r2,-24(fp)
    ae6c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    ae70:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    ae74:	e13ffa17 	ldw	r4,-24(fp)
    ae78:	e17ffc17 	ldw	r5,-16(fp)
    ae7c:	000adb40 	call	adb4 <alt_epcs_test_address>
    ae80:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    ae84:	e0bff917 	ldw	r2,-28(fp)
    ae88:	1004803a 	cmplt	r2,r2,zero
    ae8c:	10002f1e 	bne	r2,zero,af4c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    ae90:	00002b06 	br	af40 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    ae94:	e0bff817 	ldw	r2,-32(fp)
    ae98:	10c03017 	ldw	r3,192(r2)
    ae9c:	e0bffc17 	ldw	r2,-16(fp)
    aea0:	1887883a 	add	r3,r3,r2
    aea4:	e0bff817 	ldw	r2,-32(fp)
    aea8:	10803017 	ldw	r2,192(r2)
    aeac:	0085c83a 	sub	r2,zero,r2
    aeb0:	1884703a 	and	r2,r3,r2
    aeb4:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    aeb8:	e0fff517 	ldw	r3,-44(fp)
    aebc:	e0bffc17 	ldw	r2,-16(fp)
    aec0:	1885c83a 	sub	r2,r3,r2
    aec4:	e0c00217 	ldw	r3,8(fp)
    aec8:	e0ffff15 	stw	r3,-4(fp)
    aecc:	e0bffe15 	stw	r2,-8(fp)
    aed0:	e0bfff17 	ldw	r2,-4(fp)
    aed4:	e0fffe17 	ldw	r3,-8(fp)
    aed8:	10c0020e 	bge	r2,r3,aee4 <alt_epcs_flash_write_block+0x9c>
    aedc:	e0bfff17 	ldw	r2,-4(fp)
    aee0:	e0bffe15 	stw	r2,-8(fp)
    aee4:	e0fffe17 	ldw	r3,-8(fp)
    aee8:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    aeec:	e0bff817 	ldw	r2,-32(fp)
    aef0:	11002d17 	ldw	r4,180(r2)
    aef4:	e0fffd17 	ldw	r3,-12(fp)
    aef8:	e0bff717 	ldw	r2,-36(fp)
    aefc:	188d883a 	add	r6,r3,r2
    af00:	e0bff817 	ldw	r2,-32(fp)
    af04:	10803117 	ldw	r2,196(r2)
    af08:	d8800015 	stw	r2,0(sp)
    af0c:	e17ffc17 	ldw	r5,-16(fp)
    af10:	e1fff617 	ldw	r7,-40(fp)
    af14:	000bd740 	call	bd74 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    af18:	e0c00217 	ldw	r3,8(fp)
    af1c:	e0bff617 	ldw	r2,-40(fp)
    af20:	1885c83a 	sub	r2,r3,r2
    af24:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    af28:	e0fff717 	ldw	r3,-36(fp)
    af2c:	e0bff617 	ldw	r2,-40(fp)
    af30:	1885883a 	add	r2,r3,r2
    af34:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    af38:	e0bff517 	ldw	r2,-44(fp)
    af3c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    af40:	e0800217 	ldw	r2,8(fp)
    af44:	1004c03a 	cmpne	r2,r2,zero
    af48:	103fd21e 	bne	r2,zero,ae94 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    af4c:	e0bff917 	ldw	r2,-28(fp)
}
    af50:	e037883a 	mov	sp,fp
    af54:	dfc00117 	ldw	ra,4(sp)
    af58:	df000017 	ldw	fp,0(sp)
    af5c:	dec00204 	addi	sp,sp,8
    af60:	f800283a 	ret

0000af64 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    af64:	defff704 	addi	sp,sp,-36
    af68:	dfc00815 	stw	ra,32(sp)
    af6c:	df000715 	stw	fp,28(sp)
    af70:	df000704 	addi	fp,sp,28
    af74:	e13ffc15 	stw	r4,-16(fp)
    af78:	e17ffd15 	stw	r5,-12(fp)
    af7c:	e1bffe15 	stw	r6,-8(fp)
    af80:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    af84:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    af88:	e0bffc17 	ldw	r2,-16(fp)
    af8c:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    af90:	e13ffc17 	ldw	r4,-16(fp)
    af94:	e17ffd17 	ldw	r5,-12(fp)
    af98:	000adb40 	call	adb4 <alt_epcs_test_address>
    af9c:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
    afa0:	e0bffb17 	ldw	r2,-20(fp)
    afa4:	1004803a 	cmplt	r2,r2,zero
    afa8:	10000e1e 	bne	r2,zero,afe4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    afac:	e0bffa17 	ldw	r2,-24(fp)
    afb0:	11002d17 	ldw	r4,180(r2)
    afb4:	e1bffe17 	ldw	r6,-8(fp)
    afb8:	e0bffa17 	ldw	r2,-24(fp)
    afbc:	10803117 	ldw	r2,196(r2)
    afc0:	d8800015 	stw	r2,0(sp)
    afc4:	e17ffd17 	ldw	r5,-12(fp)
    afc8:	e1ffff17 	ldw	r7,-4(fp)
    afcc:	000bb740 	call	bb74 <epcs_read_buffer>
    afd0:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    afd4:	e0fffb17 	ldw	r3,-20(fp)
    afd8:	e0bfff17 	ldw	r2,-4(fp)
    afdc:	1880011e 	bne	r3,r2,afe4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    afe0:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
    afe4:	e0bffb17 	ldw	r2,-20(fp)
}
    afe8:	e037883a 	mov	sp,fp
    afec:	dfc00117 	ldw	ra,4(sp)
    aff0:	df000017 	ldw	fp,0(sp)
    aff4:	dec00204 	addi	sp,sp,8
    aff8:	f800283a 	ret

0000affc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    affc:	defffa04 	addi	sp,sp,-24
    b000:	dfc00515 	stw	ra,20(sp)
    b004:	df000415 	stw	fp,16(sp)
    b008:	df000404 	addi	fp,sp,16
    b00c:	e13ffd15 	stw	r4,-12(fp)
    b010:	e17ffe15 	stw	r5,-8(fp)
    b014:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b018:	e0bffd17 	ldw	r2,-12(fp)
    b01c:	10800017 	ldw	r2,0(r2)
    b020:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    b024:	e0bffc17 	ldw	r2,-16(fp)
    b028:	11000a04 	addi	r4,r2,40
    b02c:	e0bffd17 	ldw	r2,-12(fp)
    b030:	11c00217 	ldw	r7,8(r2)
    b034:	e17ffe17 	ldw	r5,-8(fp)
    b038:	e1bfff17 	ldw	r6,-4(fp)
    b03c:	000b4f40 	call	b4f4 <altera_avalon_uart_read>
      fd->fd_flags);
}
    b040:	e037883a 	mov	sp,fp
    b044:	dfc00117 	ldw	ra,4(sp)
    b048:	df000017 	ldw	fp,0(sp)
    b04c:	dec00204 	addi	sp,sp,8
    b050:	f800283a 	ret

0000b054 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b054:	defffa04 	addi	sp,sp,-24
    b058:	dfc00515 	stw	ra,20(sp)
    b05c:	df000415 	stw	fp,16(sp)
    b060:	df000404 	addi	fp,sp,16
    b064:	e13ffd15 	stw	r4,-12(fp)
    b068:	e17ffe15 	stw	r5,-8(fp)
    b06c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b070:	e0bffd17 	ldw	r2,-12(fp)
    b074:	10800017 	ldw	r2,0(r2)
    b078:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    b07c:	e0bffc17 	ldw	r2,-16(fp)
    b080:	11000a04 	addi	r4,r2,40
    b084:	e0bffd17 	ldw	r2,-12(fp)
    b088:	11c00217 	ldw	r7,8(r2)
    b08c:	e17ffe17 	ldw	r5,-8(fp)
    b090:	e1bfff17 	ldw	r6,-4(fp)
    b094:	000b7840 	call	b784 <altera_avalon_uart_write>
      fd->fd_flags);
}
    b098:	e037883a 	mov	sp,fp
    b09c:	dfc00117 	ldw	ra,4(sp)
    b0a0:	df000017 	ldw	fp,0(sp)
    b0a4:	dec00204 	addi	sp,sp,8
    b0a8:	f800283a 	ret

0000b0ac <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    b0ac:	defffc04 	addi	sp,sp,-16
    b0b0:	dfc00315 	stw	ra,12(sp)
    b0b4:	df000215 	stw	fp,8(sp)
    b0b8:	df000204 	addi	fp,sp,8
    b0bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b0c0:	e0bfff17 	ldw	r2,-4(fp)
    b0c4:	10800017 	ldw	r2,0(r2)
    b0c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    b0cc:	e0bffe17 	ldw	r2,-8(fp)
    b0d0:	11000a04 	addi	r4,r2,40
    b0d4:	e0bfff17 	ldw	r2,-4(fp)
    b0d8:	11400217 	ldw	r5,8(r2)
    b0dc:	000b4940 	call	b494 <altera_avalon_uart_close>
}
    b0e0:	e037883a 	mov	sp,fp
    b0e4:	dfc00117 	ldw	ra,4(sp)
    b0e8:	df000017 	ldw	fp,0(sp)
    b0ec:	dec00204 	addi	sp,sp,8
    b0f0:	f800283a 	ret

0000b0f4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    b0f4:	defff704 	addi	sp,sp,-36
    b0f8:	dfc00815 	stw	ra,32(sp)
    b0fc:	df000715 	stw	fp,28(sp)
    b100:	df000704 	addi	fp,sp,28
    b104:	e13ffc15 	stw	r4,-16(fp)
    b108:	e17ffd15 	stw	r5,-12(fp)
    b10c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    b110:	e0bffc17 	ldw	r2,-16(fp)
    b114:	10800017 	ldw	r2,0(r2)
    b118:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    b11c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    b120:	1004c03a 	cmpne	r2,r2,zero
    b124:	1000061e 	bne	r2,zero,b140 <altera_avalon_uart_init+0x4c>
    b128:	0005883a 	mov	r2,zero
    b12c:	1004c03a 	cmpne	r2,r2,zero
    b130:	1000031e 	bne	r2,zero,b140 <altera_avalon_uart_init+0x4c>
    b134:	0005883a 	mov	r2,zero
    b138:	1005003a 	cmpeq	r2,r2,zero
    b13c:	1000031e 	bne	r2,zero,b14c <altera_avalon_uart_init+0x58>
    b140:	00800044 	movi	r2,1
    b144:	e0bfff15 	stw	r2,-4(fp)
    b148:	00000106 	br	b150 <altera_avalon_uart_init+0x5c>
    b14c:	e03fff15 	stw	zero,-4(fp)
    b150:	e0bfff17 	ldw	r2,-4(fp)
    b154:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    b158:	e0bffa17 	ldw	r2,-24(fp)
    b15c:	1004c03a 	cmpne	r2,r2,zero
    b160:	1000111e 	bne	r2,zero,b1a8 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    b164:	e0fffc17 	ldw	r3,-16(fp)
    b168:	00832004 	movi	r2,3200
    b16c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    b170:	e0bffb17 	ldw	r2,-20(fp)
    b174:	11000304 	addi	r4,r2,12
    b178:	e0bffc17 	ldw	r2,-16(fp)
    b17c:	10800117 	ldw	r2,4(r2)
    b180:	1007883a 	mov	r3,r2
    b184:	2005883a 	mov	r2,r4
    b188:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    b18c:	d8000015 	stw	zero,0(sp)
    b190:	e13ffd17 	ldw	r4,-12(fp)
    b194:	e17ffe17 	ldw	r5,-8(fp)
    b198:	01800074 	movhi	r6,1
    b19c:	31ac6f04 	addi	r6,r6,-20036
    b1a0:	e1fffc17 	ldw	r7,-16(fp)
    b1a4:	000c2f00 	call	c2f0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    b1a8:	e037883a 	mov	sp,fp
    b1ac:	dfc00117 	ldw	ra,4(sp)
    b1b0:	df000017 	ldw	fp,0(sp)
    b1b4:	dec00204 	addi	sp,sp,8
    b1b8:	f800283a 	ret

0000b1bc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    b1bc:	defffa04 	addi	sp,sp,-24
    b1c0:	dfc00515 	stw	ra,20(sp)
    b1c4:	df000415 	stw	fp,16(sp)
    b1c8:	df000404 	addi	fp,sp,16
    b1cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    b1d0:	e0bfff17 	ldw	r2,-4(fp)
    b1d4:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    b1d8:	e0bffd17 	ldw	r2,-12(fp)
    b1dc:	10800017 	ldw	r2,0(r2)
    b1e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    b1e4:	e0bffc17 	ldw	r2,-16(fp)
    b1e8:	10800204 	addi	r2,r2,8
    b1ec:	10800037 	ldwio	r2,0(r2)
    b1f0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    b1f4:	e0bffc17 	ldw	r2,-16(fp)
    b1f8:	10800204 	addi	r2,r2,8
    b1fc:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    b200:	e0bffc17 	ldw	r2,-16(fp)
    b204:	10800204 	addi	r2,r2,8
    b208:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    b20c:	e0bffe17 	ldw	r2,-8(fp)
    b210:	1080200c 	andi	r2,r2,128
    b214:	1005003a 	cmpeq	r2,r2,zero
    b218:	1000031e 	bne	r2,zero,b228 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    b21c:	e13ffd17 	ldw	r4,-12(fp)
    b220:	e17ffe17 	ldw	r5,-8(fp)
    b224:	000b2580 	call	b258 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    b228:	e0bffe17 	ldw	r2,-8(fp)
    b22c:	1081100c 	andi	r2,r2,1088
    b230:	1005003a 	cmpeq	r2,r2,zero
    b234:	1000031e 	bne	r2,zero,b244 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    b238:	e13ffd17 	ldw	r4,-12(fp)
    b23c:	e17ffe17 	ldw	r5,-8(fp)
    b240:	000b3380 	call	b338 <altera_avalon_uart_txirq>
  }
  

}
    b244:	e037883a 	mov	sp,fp
    b248:	dfc00117 	ldw	ra,4(sp)
    b24c:	df000017 	ldw	fp,0(sp)
    b250:	dec00204 	addi	sp,sp,8
    b254:	f800283a 	ret

0000b258 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b258:	defffc04 	addi	sp,sp,-16
    b25c:	df000315 	stw	fp,12(sp)
    b260:	df000304 	addi	fp,sp,12
    b264:	e13ffe15 	stw	r4,-8(fp)
    b268:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    b26c:	e0bfff17 	ldw	r2,-4(fp)
    b270:	108000cc 	andi	r2,r2,3
    b274:	1004c03a 	cmpne	r2,r2,zero
    b278:	10002b1e 	bne	r2,zero,b328 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    b27c:	e0bffe17 	ldw	r2,-8(fp)
    b280:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b284:	e0bffe17 	ldw	r2,-8(fp)
    b288:	10800317 	ldw	r2,12(r2)
    b28c:	10800044 	addi	r2,r2,1
    b290:	10800fcc 	andi	r2,r2,63
    b294:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    b298:	e0bffe17 	ldw	r2,-8(fp)
    b29c:	11000317 	ldw	r4,12(r2)
    b2a0:	e0bffe17 	ldw	r2,-8(fp)
    b2a4:	10800017 	ldw	r2,0(r2)
    b2a8:	10800037 	ldwio	r2,0(r2)
    b2ac:	1007883a 	mov	r3,r2
    b2b0:	e0bffe17 	ldw	r2,-8(fp)
    b2b4:	2085883a 	add	r2,r4,r2
    b2b8:	10800704 	addi	r2,r2,28
    b2bc:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    b2c0:	e0fffe17 	ldw	r3,-8(fp)
    b2c4:	e0bffd17 	ldw	r2,-12(fp)
    b2c8:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b2cc:	e0bffe17 	ldw	r2,-8(fp)
    b2d0:	10800317 	ldw	r2,12(r2)
    b2d4:	10800044 	addi	r2,r2,1
    b2d8:	10800fcc 	andi	r2,r2,63
    b2dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    b2e0:	e0bffe17 	ldw	r2,-8(fp)
    b2e4:	10c00217 	ldw	r3,8(r2)
    b2e8:	e0bffd17 	ldw	r2,-12(fp)
    b2ec:	18800e1e 	bne	r3,r2,b328 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b2f0:	e0bffe17 	ldw	r2,-8(fp)
    b2f4:	10c00117 	ldw	r3,4(r2)
    b2f8:	00bfdfc4 	movi	r2,-129
    b2fc:	1886703a 	and	r3,r3,r2
    b300:	e0bffe17 	ldw	r2,-8(fp)
    b304:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    b308:	e0bffe17 	ldw	r2,-8(fp)
    b30c:	10800017 	ldw	r2,0(r2)
    b310:	11000304 	addi	r4,r2,12
    b314:	e0bffe17 	ldw	r2,-8(fp)
    b318:	10800117 	ldw	r2,4(r2)
    b31c:	1007883a 	mov	r3,r2
    b320:	2005883a 	mov	r2,r4
    b324:	10c00035 	stwio	r3,0(r2)
  }   
}
    b328:	e037883a 	mov	sp,fp
    b32c:	df000017 	ldw	fp,0(sp)
    b330:	dec00104 	addi	sp,sp,4
    b334:	f800283a 	ret

0000b338 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b338:	defffd04 	addi	sp,sp,-12
    b33c:	df000215 	stw	fp,8(sp)
    b340:	df000204 	addi	fp,sp,8
    b344:	e13ffe15 	stw	r4,-8(fp)
    b348:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    b34c:	e0bffe17 	ldw	r2,-8(fp)
    b350:	10c00417 	ldw	r3,16(r2)
    b354:	e0bffe17 	ldw	r2,-8(fp)
    b358:	10800517 	ldw	r2,20(r2)
    b35c:	18803626 	beq	r3,r2,b438 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b360:	e0bffe17 	ldw	r2,-8(fp)
    b364:	10800617 	ldw	r2,24(r2)
    b368:	1080008c 	andi	r2,r2,2
    b36c:	1005003a 	cmpeq	r2,r2,zero
    b370:	1000041e 	bne	r2,zero,b384 <altera_avalon_uart_txirq+0x4c>
    b374:	e0bfff17 	ldw	r2,-4(fp)
    b378:	1082000c 	andi	r2,r2,2048
    b37c:	1005003a 	cmpeq	r2,r2,zero
    b380:	10001e1e 	bne	r2,zero,b3fc <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    b384:	e0bffe17 	ldw	r2,-8(fp)
    b388:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    b38c:	e0bffe17 	ldw	r2,-8(fp)
    b390:	10800017 	ldw	r2,0(r2)
    b394:	11000104 	addi	r4,r2,4
    b398:	e0bffe17 	ldw	r2,-8(fp)
    b39c:	10c00417 	ldw	r3,16(r2)
    b3a0:	e0bffe17 	ldw	r2,-8(fp)
    b3a4:	1885883a 	add	r2,r3,r2
    b3a8:	10801704 	addi	r2,r2,92
    b3ac:	10800003 	ldbu	r2,0(r2)
    b3b0:	10c03fcc 	andi	r3,r2,255
    b3b4:	2005883a 	mov	r2,r4
    b3b8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    b3bc:	e0bffe17 	ldw	r2,-8(fp)
    b3c0:	10800417 	ldw	r2,16(r2)
    b3c4:	10c00044 	addi	r3,r2,1
    b3c8:	e0bffe17 	ldw	r2,-8(fp)
    b3cc:	10c00415 	stw	r3,16(r2)
    b3d0:	e0bffe17 	ldw	r2,-8(fp)
    b3d4:	10800417 	ldw	r2,16(r2)
    b3d8:	10c00fcc 	andi	r3,r2,63
    b3dc:	e0bffe17 	ldw	r2,-8(fp)
    b3e0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b3e4:	e0bffe17 	ldw	r2,-8(fp)
    b3e8:	10800117 	ldw	r2,4(r2)
    b3ec:	10c01014 	ori	r3,r2,64
    b3f0:	e0bffe17 	ldw	r2,-8(fp)
    b3f4:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b3f8:	00000f06 	br	b438 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    b3fc:	e0bffe17 	ldw	r2,-8(fp)
    b400:	10800017 	ldw	r2,0(r2)
    b404:	10800204 	addi	r2,r2,8
    b408:	10800037 	ldwio	r2,0(r2)
    b40c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    b410:	e0bfff17 	ldw	r2,-4(fp)
    b414:	1082000c 	andi	r2,r2,2048
    b418:	1004c03a 	cmpne	r2,r2,zero
    b41c:	1000061e 	bne	r2,zero,b438 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b420:	e0bffe17 	ldw	r2,-8(fp)
    b424:	10c00117 	ldw	r3,4(r2)
    b428:	00bfefc4 	movi	r2,-65
    b42c:	1886703a 	and	r3,r3,r2
    b430:	e0bffe17 	ldw	r2,-8(fp)
    b434:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    b438:	e0bffe17 	ldw	r2,-8(fp)
    b43c:	10c00417 	ldw	r3,16(r2)
    b440:	e0bffe17 	ldw	r2,-8(fp)
    b444:	10800517 	ldw	r2,20(r2)
    b448:	1880061e 	bne	r3,r2,b464 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b44c:	e0bffe17 	ldw	r2,-8(fp)
    b450:	10c00117 	ldw	r3,4(r2)
    b454:	00beefc4 	movi	r2,-1089
    b458:	1886703a 	and	r3,r3,r2
    b45c:	e0bffe17 	ldw	r2,-8(fp)
    b460:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b464:	e0bffe17 	ldw	r2,-8(fp)
    b468:	10800017 	ldw	r2,0(r2)
    b46c:	11000304 	addi	r4,r2,12
    b470:	e0bffe17 	ldw	r2,-8(fp)
    b474:	10800117 	ldw	r2,4(r2)
    b478:	1007883a 	mov	r3,r2
    b47c:	2005883a 	mov	r2,r4
    b480:	10c00035 	stwio	r3,0(r2)
}
    b484:	e037883a 	mov	sp,fp
    b488:	df000017 	ldw	fp,0(sp)
    b48c:	dec00104 	addi	sp,sp,4
    b490:	f800283a 	ret

0000b494 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    b494:	defffc04 	addi	sp,sp,-16
    b498:	df000315 	stw	fp,12(sp)
    b49c:	df000304 	addi	fp,sp,12
    b4a0:	e13ffd15 	stw	r4,-12(fp)
    b4a4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b4a8:	00000706 	br	b4c8 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b4ac:	e0bffe17 	ldw	r2,-8(fp)
    b4b0:	1090000c 	andi	r2,r2,16384
    b4b4:	1005003a 	cmpeq	r2,r2,zero
    b4b8:	1000031e 	bne	r2,zero,b4c8 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    b4bc:	00bffd44 	movi	r2,-11
    b4c0:	e0bfff15 	stw	r2,-4(fp)
    b4c4:	00000606 	br	b4e0 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b4c8:	e0bffd17 	ldw	r2,-12(fp)
    b4cc:	10c00417 	ldw	r3,16(r2)
    b4d0:	e0bffd17 	ldw	r2,-12(fp)
    b4d4:	10800517 	ldw	r2,20(r2)
    b4d8:	18bff41e 	bne	r3,r2,b4ac <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b4dc:	e03fff15 	stw	zero,-4(fp)
    b4e0:	e0bfff17 	ldw	r2,-4(fp)
}
    b4e4:	e037883a 	mov	sp,fp
    b4e8:	df000017 	ldw	fp,0(sp)
    b4ec:	dec00104 	addi	sp,sp,4
    b4f0:	f800283a 	ret

0000b4f4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    b4f4:	defff004 	addi	sp,sp,-64
    b4f8:	dfc00f15 	stw	ra,60(sp)
    b4fc:	df000e15 	stw	fp,56(sp)
    b500:	df000e04 	addi	fp,sp,56
    b504:	e13ffb15 	stw	r4,-20(fp)
    b508:	e17ffc15 	stw	r5,-16(fp)
    b50c:	e1bffd15 	stw	r6,-12(fp)
    b510:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    b514:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    b518:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    b51c:	e0bffe17 	ldw	r2,-8(fp)
    b520:	1090000c 	andi	r2,r2,16384
    b524:	1005003a 	cmpeq	r2,r2,zero
    b528:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    b52c:	e0bffb17 	ldw	r2,-20(fp)
    b530:	10800217 	ldw	r2,8(r2)
    b534:	10800044 	addi	r2,r2,1
    b538:	10800fcc 	andi	r2,r2,63
    b53c:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b540:	00001906 	br	b5a8 <altera_avalon_uart_read+0xb4>
    {
      count++;
    b544:	e0bff617 	ldw	r2,-40(fp)
    b548:	10800044 	addi	r2,r2,1
    b54c:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    b550:	e0bffb17 	ldw	r2,-20(fp)
    b554:	10c00217 	ldw	r3,8(r2)
    b558:	e0bffb17 	ldw	r2,-20(fp)
    b55c:	1885883a 	add	r2,r3,r2
    b560:	10800704 	addi	r2,r2,28
    b564:	10800003 	ldbu	r2,0(r2)
    b568:	1007883a 	mov	r3,r2
    b56c:	e0bffc17 	ldw	r2,-16(fp)
    b570:	10c00005 	stb	r3,0(r2)
    b574:	e0bffc17 	ldw	r2,-16(fp)
    b578:	10800044 	addi	r2,r2,1
    b57c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    b580:	e0bffb17 	ldw	r2,-20(fp)
    b584:	10800217 	ldw	r2,8(r2)
    b588:	10c00044 	addi	r3,r2,1
    b58c:	e0bffb17 	ldw	r2,-20(fp)
    b590:	10c00215 	stw	r3,8(r2)
    b594:	e0bffb17 	ldw	r2,-20(fp)
    b598:	10800217 	ldw	r2,8(r2)
    b59c:	10c00fcc 	andi	r3,r2,63
    b5a0:	e0bffb17 	ldw	r2,-20(fp)
    b5a4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b5a8:	e0fff617 	ldw	r3,-40(fp)
    b5ac:	e0bffd17 	ldw	r2,-12(fp)
    b5b0:	1880050e 	bge	r3,r2,b5c8 <altera_avalon_uart_read+0xd4>
    b5b4:	e0bffb17 	ldw	r2,-20(fp)
    b5b8:	10c00217 	ldw	r3,8(r2)
    b5bc:	e0bffb17 	ldw	r2,-20(fp)
    b5c0:	10800317 	ldw	r2,12(r2)
    b5c4:	18bfdf1e 	bne	r3,r2,b544 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    b5c8:	e0bff617 	ldw	r2,-40(fp)
    b5cc:	1004c03a 	cmpne	r2,r2,zero
    b5d0:	1000271e 	bne	r2,zero,b670 <altera_avalon_uart_read+0x17c>
    b5d4:	e0bffb17 	ldw	r2,-20(fp)
    b5d8:	10c00217 	ldw	r3,8(r2)
    b5dc:	e0bffb17 	ldw	r2,-20(fp)
    b5e0:	10800317 	ldw	r2,12(r2)
    b5e4:	1880221e 	bne	r3,r2,b670 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    b5e8:	e0bff917 	ldw	r2,-28(fp)
    b5ec:	1004c03a 	cmpne	r2,r2,zero
    b5f0:	1000061e 	bne	r2,zero,b60c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    b5f4:	000b7240 	call	b724 <alt_get_errno>
    b5f8:	00c002c4 	movi	r3,11
    b5fc:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    b600:	00800044 	movi	r2,1
    b604:	e0bff705 	stb	r2,-36(fp)
        break;
    b608:	00001f06 	br	b688 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b60c:	0005303a 	rdctl	r2,status
    b610:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b614:	e0fff517 	ldw	r3,-44(fp)
    b618:	00bfff84 	movi	r2,-2
    b61c:	1884703a 	and	r2,r3,r2
    b620:	1001703a 	wrctl	status,r2
  
  return context;
    b624:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    b628:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b62c:	e0bffb17 	ldw	r2,-20(fp)
    b630:	10800117 	ldw	r2,4(r2)
    b634:	10c02014 	ori	r3,r2,128
    b638:	e0bffb17 	ldw	r2,-20(fp)
    b63c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b640:	e0bffb17 	ldw	r2,-20(fp)
    b644:	10800017 	ldw	r2,0(r2)
    b648:	11000304 	addi	r4,r2,12
    b64c:	e0bffb17 	ldw	r2,-20(fp)
    b650:	10800117 	ldw	r2,4(r2)
    b654:	1007883a 	mov	r3,r2
    b658:	2005883a 	mov	r2,r4
    b65c:	10c00035 	stwio	r3,0(r2)
    b660:	e0bffa17 	ldw	r2,-24(fp)
    b664:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b668:	e0bff417 	ldw	r2,-48(fp)
    b66c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    b670:	e0bff617 	ldw	r2,-40(fp)
    b674:	1004c03a 	cmpne	r2,r2,zero
    b678:	1000031e 	bne	r2,zero,b688 <altera_avalon_uart_read+0x194>
    b67c:	e0bffd17 	ldw	r2,-12(fp)
    b680:	1004c03a 	cmpne	r2,r2,zero
    b684:	103fc81e 	bne	r2,zero,b5a8 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b688:	0005303a 	rdctl	r2,status
    b68c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b690:	e0fff317 	ldw	r3,-52(fp)
    b694:	00bfff84 	movi	r2,-2
    b698:	1884703a 	and	r2,r3,r2
    b69c:	1001703a 	wrctl	status,r2
  
  return context;
    b6a0:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    b6a4:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b6a8:	e0bffb17 	ldw	r2,-20(fp)
    b6ac:	10800117 	ldw	r2,4(r2)
    b6b0:	10c02014 	ori	r3,r2,128
    b6b4:	e0bffb17 	ldw	r2,-20(fp)
    b6b8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b6bc:	e0bffb17 	ldw	r2,-20(fp)
    b6c0:	10800017 	ldw	r2,0(r2)
    b6c4:	11000304 	addi	r4,r2,12
    b6c8:	e0bffb17 	ldw	r2,-20(fp)
    b6cc:	10800117 	ldw	r2,4(r2)
    b6d0:	1007883a 	mov	r3,r2
    b6d4:	2005883a 	mov	r2,r4
    b6d8:	10c00035 	stwio	r3,0(r2)
    b6dc:	e0bffa17 	ldw	r2,-24(fp)
    b6e0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6e4:	e0bff217 	ldw	r2,-56(fp)
    b6e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    b6ec:	e0bff703 	ldbu	r2,-36(fp)
    b6f0:	1005003a 	cmpeq	r2,r2,zero
    b6f4:	1000031e 	bne	r2,zero,b704 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    b6f8:	00bffd04 	movi	r2,-12
    b6fc:	e0bfff15 	stw	r2,-4(fp)
    b700:	00000206 	br	b70c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    b704:	e0bff617 	ldw	r2,-40(fp)
    b708:	e0bfff15 	stw	r2,-4(fp)
    b70c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b710:	e037883a 	mov	sp,fp
    b714:	dfc00117 	ldw	ra,4(sp)
    b718:	df000017 	ldw	fp,0(sp)
    b71c:	dec00204 	addi	sp,sp,8
    b720:	f800283a 	ret

0000b724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b724:	defffd04 	addi	sp,sp,-12
    b728:	dfc00215 	stw	ra,8(sp)
    b72c:	df000115 	stw	fp,4(sp)
    b730:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b734:	00800074 	movhi	r2,1
    b738:	10b83604 	addi	r2,r2,-7976
    b73c:	10800017 	ldw	r2,0(r2)
    b740:	1005003a 	cmpeq	r2,r2,zero
    b744:	1000061e 	bne	r2,zero,b760 <alt_get_errno+0x3c>
    b748:	00800074 	movhi	r2,1
    b74c:	10b83604 	addi	r2,r2,-7976
    b750:	10800017 	ldw	r2,0(r2)
    b754:	103ee83a 	callr	r2
    b758:	e0bfff15 	stw	r2,-4(fp)
    b75c:	00000306 	br	b76c <alt_get_errno+0x48>
    b760:	00800074 	movhi	r2,1
    b764:	10b84104 	addi	r2,r2,-7932
    b768:	e0bfff15 	stw	r2,-4(fp)
    b76c:	e0bfff17 	ldw	r2,-4(fp)
}
    b770:	e037883a 	mov	sp,fp
    b774:	dfc00117 	ldw	ra,4(sp)
    b778:	df000017 	ldw	fp,0(sp)
    b77c:	dec00204 	addi	sp,sp,8
    b780:	f800283a 	ret

0000b784 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    b784:	defff204 	addi	sp,sp,-56
    b788:	dfc00d15 	stw	ra,52(sp)
    b78c:	df000c15 	stw	fp,48(sp)
    b790:	df000c04 	addi	fp,sp,48
    b794:	e13ffc15 	stw	r4,-16(fp)
    b798:	e17ffd15 	stw	r5,-12(fp)
    b79c:	e1bffe15 	stw	r6,-8(fp)
    b7a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    b7a4:	e0bffe17 	ldw	r2,-8(fp)
    b7a8:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    b7ac:	e0bfff17 	ldw	r2,-4(fp)
    b7b0:	1090000c 	andi	r2,r2,16384
    b7b4:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    b7b8:	00004006 	br	b8bc <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b7bc:	e0bffc17 	ldw	r2,-16(fp)
    b7c0:	10800517 	ldw	r2,20(r2)
    b7c4:	10800044 	addi	r2,r2,1
    b7c8:	10800fcc 	andi	r2,r2,63
    b7cc:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    b7d0:	e0bffc17 	ldw	r2,-16(fp)
    b7d4:	10c00417 	ldw	r3,16(r2)
    b7d8:	e0bff917 	ldw	r2,-28(fp)
    b7dc:	1880251e 	bne	r3,r2,b874 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    b7e0:	e0bffa17 	ldw	r2,-24(fp)
    b7e4:	1005003a 	cmpeq	r2,r2,zero
    b7e8:	1000051e 	bne	r2,zero,b800 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    b7ec:	000b94c0 	call	b94c <alt_get_errno>
    b7f0:	1007883a 	mov	r3,r2
    b7f4:	008002c4 	movi	r2,11
    b7f8:	18800015 	stw	r2,0(r3)
        break;
    b7fc:	00003206 	br	b8c8 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b800:	0005303a 	rdctl	r2,status
    b804:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b808:	e0fff717 	ldw	r3,-36(fp)
    b80c:	00bfff84 	movi	r2,-2
    b810:	1884703a 	and	r2,r3,r2
    b814:	1001703a 	wrctl	status,r2
  
  return context;
    b818:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    b81c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b820:	e0bffc17 	ldw	r2,-16(fp)
    b824:	10800117 	ldw	r2,4(r2)
    b828:	10c11014 	ori	r3,r2,1088
    b82c:	e0bffc17 	ldw	r2,-16(fp)
    b830:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b834:	e0bffc17 	ldw	r2,-16(fp)
    b838:	10800017 	ldw	r2,0(r2)
    b83c:	11000304 	addi	r4,r2,12
    b840:	e0bffc17 	ldw	r2,-16(fp)
    b844:	10800117 	ldw	r2,4(r2)
    b848:	1007883a 	mov	r3,r2
    b84c:	2005883a 	mov	r2,r4
    b850:	10c00035 	stwio	r3,0(r2)
    b854:	e0bffb17 	ldw	r2,-20(fp)
    b858:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b85c:	e0bff617 	ldw	r2,-40(fp)
    b860:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    b864:	e0bffc17 	ldw	r2,-16(fp)
    b868:	10c00417 	ldw	r3,16(r2)
    b86c:	e0bff917 	ldw	r2,-28(fp)
    b870:	18bffc26 	beq	r3,r2,b864 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    b874:	e0bff817 	ldw	r2,-32(fp)
    b878:	10bfffc4 	addi	r2,r2,-1
    b87c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    b880:	e0bffc17 	ldw	r2,-16(fp)
    b884:	10c00517 	ldw	r3,20(r2)
    b888:	e0bffd17 	ldw	r2,-12(fp)
    b88c:	10800003 	ldbu	r2,0(r2)
    b890:	1009883a 	mov	r4,r2
    b894:	e0bffc17 	ldw	r2,-16(fp)
    b898:	1885883a 	add	r2,r3,r2
    b89c:	10801704 	addi	r2,r2,92
    b8a0:	11000005 	stb	r4,0(r2)
    b8a4:	e0bffd17 	ldw	r2,-12(fp)
    b8a8:	10800044 	addi	r2,r2,1
    b8ac:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    b8b0:	e0fffc17 	ldw	r3,-16(fp)
    b8b4:	e0bff917 	ldw	r2,-28(fp)
    b8b8:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    b8bc:	e0bff817 	ldw	r2,-32(fp)
    b8c0:	1004c03a 	cmpne	r2,r2,zero
    b8c4:	103fbd1e 	bne	r2,zero,b7bc <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8c8:	0005303a 	rdctl	r2,status
    b8cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8d0:	e0fff517 	ldw	r3,-44(fp)
    b8d4:	00bfff84 	movi	r2,-2
    b8d8:	1884703a 	and	r2,r3,r2
    b8dc:	1001703a 	wrctl	status,r2
  
  return context;
    b8e0:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    b8e4:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b8e8:	e0bffc17 	ldw	r2,-16(fp)
    b8ec:	10800117 	ldw	r2,4(r2)
    b8f0:	10c11014 	ori	r3,r2,1088
    b8f4:	e0bffc17 	ldw	r2,-16(fp)
    b8f8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b8fc:	e0bffc17 	ldw	r2,-16(fp)
    b900:	10800017 	ldw	r2,0(r2)
    b904:	11000304 	addi	r4,r2,12
    b908:	e0bffc17 	ldw	r2,-16(fp)
    b90c:	10800117 	ldw	r2,4(r2)
    b910:	1007883a 	mov	r3,r2
    b914:	2005883a 	mov	r2,r4
    b918:	10c00035 	stwio	r3,0(r2)
    b91c:	e0bffb17 	ldw	r2,-20(fp)
    b920:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b924:	e0bff417 	ldw	r2,-48(fp)
    b928:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    b92c:	e0fffe17 	ldw	r3,-8(fp)
    b930:	e0bff817 	ldw	r2,-32(fp)
    b934:	1885c83a 	sub	r2,r3,r2
}
    b938:	e037883a 	mov	sp,fp
    b93c:	dfc00117 	ldw	ra,4(sp)
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00204 	addi	sp,sp,8
    b948:	f800283a 	ret

0000b94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b94c:	defffd04 	addi	sp,sp,-12
    b950:	dfc00215 	stw	ra,8(sp)
    b954:	df000115 	stw	fp,4(sp)
    b958:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b95c:	00800074 	movhi	r2,1
    b960:	10b83604 	addi	r2,r2,-7976
    b964:	10800017 	ldw	r2,0(r2)
    b968:	1005003a 	cmpeq	r2,r2,zero
    b96c:	1000061e 	bne	r2,zero,b988 <alt_get_errno+0x3c>
    b970:	00800074 	movhi	r2,1
    b974:	10b83604 	addi	r2,r2,-7976
    b978:	10800017 	ldw	r2,0(r2)
    b97c:	103ee83a 	callr	r2
    b980:	e0bfff15 	stw	r2,-4(fp)
    b984:	00000306 	br	b994 <alt_get_errno+0x48>
    b988:	00800074 	movhi	r2,1
    b98c:	10b84104 	addi	r2,r2,-7932
    b990:	e0bfff15 	stw	r2,-4(fp)
    b994:	e0bfff17 	ldw	r2,-4(fp)
}
    b998:	e037883a 	mov	sp,fp
    b99c:	dfc00117 	ldw	ra,4(sp)
    b9a0:	df000017 	ldw	fp,0(sp)
    b9a4:	dec00204 	addi	sp,sp,8
    b9a8:	f800283a 	ret

0000b9ac <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    b9ac:	defff904 	addi	sp,sp,-28
    b9b0:	dfc00615 	stw	ra,24(sp)
    b9b4:	df000515 	stw	fp,20(sp)
    b9b8:	df000504 	addi	fp,sp,20
    b9bc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    b9c0:	00800144 	movi	r2,5
    b9c4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    b9c8:	00800044 	movi	r2,1
    b9cc:	d8800015 	stw	r2,0(sp)
    b9d0:	e0bffe44 	addi	r2,fp,-7
    b9d4:	d8800115 	stw	r2,4(sp)
    b9d8:	d8000215 	stw	zero,8(sp)
    b9dc:	e13fff17 	ldw	r4,-4(fp)
    b9e0:	000b883a 	mov	r5,zero
    b9e4:	01800044 	movi	r6,1
    b9e8:	e1fffe04 	addi	r7,fp,-8
    b9ec:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    b9f0:	e0bffe43 	ldbu	r2,-7(fp)
    b9f4:	10803fcc 	andi	r2,r2,255
}
    b9f8:	e037883a 	mov	sp,fp
    b9fc:	dfc00117 	ldw	ra,4(sp)
    ba00:	df000017 	ldw	fp,0(sp)
    ba04:	dec00204 	addi	sp,sp,8
    ba08:	f800283a 	ret

0000ba0c <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    ba0c:	defff504 	addi	sp,sp,-44
    ba10:	dfc00a15 	stw	ra,40(sp)
    ba14:	df000915 	stw	fp,36(sp)
    ba18:	df000904 	addi	fp,sp,36
    ba1c:	e13ffd15 	stw	r4,-12(fp)
    ba20:	e17ffe15 	stw	r5,-8(fp)
    ba24:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    ba28:	e0bfff17 	ldw	r2,-4(fp)
    ba2c:	1005003a 	cmpeq	r2,r2,zero
    ba30:	1000121e 	bne	r2,zero,ba7c <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    ba34:	00bff604 	movi	r2,-40
    ba38:	e0bffb05 	stb	r2,-20(fp)
      se[1] = (offset >> 24) & 0xFF;
    ba3c:	e0bffe17 	ldw	r2,-8(fp)
    ba40:	1004d63a 	srli	r2,r2,24
    ba44:	e0bffb45 	stb	r2,-19(fp)
      se[2] = (offset >> 16) & 0xFF;
    ba48:	e0bffe17 	ldw	r2,-8(fp)
    ba4c:	1004d43a 	srli	r2,r2,16
    ba50:	e0bffb85 	stb	r2,-18(fp)
      se[3] = (offset >> 8) & 0xFF;
    ba54:	e0bffe17 	ldw	r2,-8(fp)
    ba58:	1004d23a 	srli	r2,r2,8
    ba5c:	e0bffbc5 	stb	r2,-17(fp)
      se[4] = offset & 0xFF;
    ba60:	e0bffe17 	ldw	r2,-8(fp)
    ba64:	e0bffc05 	stb	r2,-16(fp)
      len   = 5;
    ba68:	00800144 	movi	r2,5
    ba6c:	e0bffa05 	stb	r2,-24(fp)
      epcs_enter_4_bytes_mode(base);
    ba70:	e13ffd17 	ldw	r4,-12(fp)
    ba74:	000bfd00 	call	bfd0 <epcs_enter_4_bytes_mode>
    ba78:	00000c06 	br	baac <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    ba7c:	00bff604 	movi	r2,-40
    ba80:	e0bffb05 	stb	r2,-20(fp)
      se[1] = (offset >> 16) & 0xFF;
    ba84:	e0bffe17 	ldw	r2,-8(fp)
    ba88:	1004d43a 	srli	r2,r2,16
    ba8c:	e0bffb45 	stb	r2,-19(fp)
      se[2] = (offset >> 8) & 0xFF;
    ba90:	e0bffe17 	ldw	r2,-8(fp)
    ba94:	1004d23a 	srli	r2,r2,8
    ba98:	e0bffb85 	stb	r2,-18(fp)
      se[3] = offset & 0xFF;
    ba9c:	e0bffe17 	ldw	r2,-8(fp)
    baa0:	e0bffbc5 	stb	r2,-17(fp)
      len   = 4;
    baa4:	00800104 	movi	r2,4
    baa8:	e0bffa05 	stb	r2,-24(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    baac:	e13ffd17 	ldw	r4,-12(fp)
    bab0:	000bcc00 	call	bcc0 <epcs_write_enable>

  alt_avalon_spi_command(
    bab4:	e1bffa03 	ldbu	r6,-24(fp)
    bab8:	e1fffb04 	addi	r7,fp,-20
    babc:	d8000015 	stw	zero,0(sp)
    bac0:	d8000115 	stw	zero,4(sp)
    bac4:	d8000215 	stw	zero,8(sp)
    bac8:	e13ffd17 	ldw	r4,-12(fp)
    bacc:	000b883a 	mov	r5,zero
    bad0:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    bad4:	e13ffd17 	ldw	r4,-12(fp)
    bad8:	000bb040 	call	bb04 <epcs_await_wip_released>

  if(four_bytes_mode)
    badc:	e0bfff17 	ldw	r2,-4(fp)
    bae0:	1005003a 	cmpeq	r2,r2,zero
    bae4:	1000021e 	bne	r2,zero,baf0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    bae8:	e13ffd17 	ldw	r4,-12(fp)
    baec:	000c0280 	call	c028 <epcs_exit_4_bytes_mode>
  }
}
    baf0:	e037883a 	mov	sp,fp
    baf4:	dfc00117 	ldw	ra,4(sp)
    baf8:	df000017 	ldw	fp,0(sp)
    bafc:	dec00204 	addi	sp,sp,8
    bb00:	f800283a 	ret

0000bb04 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    bb04:	defffd04 	addi	sp,sp,-12
    bb08:	dfc00215 	stw	ra,8(sp)
    bb0c:	df000115 	stw	fp,4(sp)
    bb10:	df000104 	addi	fp,sp,4
    bb14:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    bb18:	e13fff17 	ldw	r4,-4(fp)
    bb1c:	000bb3c0 	call	bb3c <epcs_test_wip>
    bb20:	1004c03a 	cmpne	r2,r2,zero
    bb24:	103ffc1e 	bne	r2,zero,bb18 <epcs_await_wip_released+0x14>
  {
  }
}
    bb28:	e037883a 	mov	sp,fp
    bb2c:	dfc00117 	ldw	ra,4(sp)
    bb30:	df000017 	ldw	fp,0(sp)
    bb34:	dec00204 	addi	sp,sp,8
    bb38:	f800283a 	ret

0000bb3c <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    bb3c:	defffd04 	addi	sp,sp,-12
    bb40:	dfc00215 	stw	ra,8(sp)
    bb44:	df000115 	stw	fp,4(sp)
    bb48:	df000104 	addi	fp,sp,4
    bb4c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    bb50:	e13fff17 	ldw	r4,-4(fp)
    bb54:	000b9ac0 	call	b9ac <epcs_read_status_register>
    bb58:	10803fcc 	andi	r2,r2,255
    bb5c:	1080004c 	andi	r2,r2,1
}
    bb60:	e037883a 	mov	sp,fp
    bb64:	dfc00117 	ldw	ra,4(sp)
    bb68:	df000017 	ldw	fp,0(sp)
    bb6c:	dec00204 	addi	sp,sp,8
    bb70:	f800283a 	ret

0000bb74 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    bb74:	defff404 	addi	sp,sp,-48
    bb78:	dfc00b15 	stw	ra,44(sp)
    bb7c:	df000a15 	stw	fp,40(sp)
    bb80:	df000a04 	addi	fp,sp,40
    bb84:	e13ffc15 	stw	r4,-16(fp)
    bb88:	e17ffd15 	stw	r5,-12(fp)
    bb8c:	e1bffe15 	stw	r6,-8(fp)
    bb90:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    bb94:	008000c4 	movi	r2,3
    bb98:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    bb9c:	e0800217 	ldw	r2,8(fp)
    bba0:	1005003a 	cmpeq	r2,r2,zero
    bba4:	10001c1e 	bne	r2,zero,bc18 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    bba8:	e0bffd17 	ldw	r2,-12(fp)
    bbac:	1005d63a 	srai	r2,r2,24
    bbb0:	1007883a 	mov	r3,r2
    bbb4:	00bfffc4 	movi	r2,-1
    bbb8:	1884703a 	and	r2,r3,r2
    bbbc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    bbc0:	e0bffd17 	ldw	r2,-12(fp)
    bbc4:	1005d43a 	srai	r2,r2,16
    bbc8:	1007883a 	mov	r3,r2
    bbcc:	00bfffc4 	movi	r2,-1
    bbd0:	1884703a 	and	r2,r3,r2
    bbd4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    bbd8:	e0bffd17 	ldw	r2,-12(fp)
    bbdc:	1005d23a 	srai	r2,r2,8
    bbe0:	1007883a 	mov	r3,r2
    bbe4:	00bfffc4 	movi	r2,-1
    bbe8:	1884703a 	and	r2,r3,r2
    bbec:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    bbf0:	e0bffd17 	ldw	r2,-12(fp)
    bbf4:	1007883a 	mov	r3,r2
    bbf8:	00bfffc4 	movi	r2,-1
    bbfc:	1884703a 	and	r2,r3,r2
    bc00:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    bc04:	00800144 	movi	r2,5
    bc08:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    bc0c:	e13ffc17 	ldw	r4,-16(fp)
    bc10:	000bfd00 	call	bfd0 <epcs_enter_4_bytes_mode>
    bc14:	00001306 	br	bc64 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    bc18:	e0bffd17 	ldw	r2,-12(fp)
    bc1c:	1005d43a 	srai	r2,r2,16
    bc20:	1007883a 	mov	r3,r2
    bc24:	00bfffc4 	movi	r2,-1
    bc28:	1884703a 	and	r2,r3,r2
    bc2c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    bc30:	e0bffd17 	ldw	r2,-12(fp)
    bc34:	1005d23a 	srai	r2,r2,8
    bc38:	1007883a 	mov	r3,r2
    bc3c:	00bfffc4 	movi	r2,-1
    bc40:	1884703a 	and	r2,r3,r2
    bc44:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    bc48:	e0bffd17 	ldw	r2,-12(fp)
    bc4c:	1007883a 	mov	r3,r2
    bc50:	00bfffc4 	movi	r2,-1
    bc54:	1884703a 	and	r2,r3,r2
    bc58:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    bc5c:	00800104 	movi	r2,4
    bc60:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    bc64:	e13ffc17 	ldw	r4,-16(fp)
    bc68:	000bb040 	call	bb04 <epcs_await_wip_released>

  alt_avalon_spi_command(
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	e1fffa04 	addi	r7,fp,-24
    bc74:	d8800015 	stw	r2,0(sp)
    bc78:	e0bffe17 	ldw	r2,-8(fp)
    bc7c:	d8800115 	stw	r2,4(sp)
    bc80:	d8000215 	stw	zero,8(sp)
    bc84:	e13ffc17 	ldw	r4,-16(fp)
    bc88:	000b883a 	mov	r5,zero
    bc8c:	e1bff917 	ldw	r6,-28(fp)
    bc90:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    bc94:	e0800217 	ldw	r2,8(fp)
    bc98:	1005003a 	cmpeq	r2,r2,zero
    bc9c:	1000021e 	bne	r2,zero,bca8 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    bca0:	e13ffc17 	ldw	r4,-16(fp)
    bca4:	000c0280 	call	c028 <epcs_exit_4_bytes_mode>
  }

  return length;
    bca8:	e0bfff17 	ldw	r2,-4(fp)
}
    bcac:	e037883a 	mov	sp,fp
    bcb0:	dfc00117 	ldw	ra,4(sp)
    bcb4:	df000017 	ldw	fp,0(sp)
    bcb8:	dec00204 	addi	sp,sp,8
    bcbc:	f800283a 	ret

0000bcc0 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    bcc0:	defff904 	addi	sp,sp,-28
    bcc4:	dfc00615 	stw	ra,24(sp)
    bcc8:	df000515 	stw	fp,20(sp)
    bccc:	df000504 	addi	fp,sp,20
    bcd0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    bcd4:	00800184 	movi	r2,6
    bcd8:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    bcdc:	d8000015 	stw	zero,0(sp)
    bce0:	d8000115 	stw	zero,4(sp)
    bce4:	d8000215 	stw	zero,8(sp)
    bce8:	e13fff17 	ldw	r4,-4(fp)
    bcec:	000b883a 	mov	r5,zero
    bcf0:	01800044 	movi	r6,1
    bcf4:	e1fffe04 	addi	r7,fp,-8
    bcf8:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    bcfc:	e037883a 	mov	sp,fp
    bd00:	dfc00117 	ldw	ra,4(sp)
    bd04:	df000017 	ldw	fp,0(sp)
    bd08:	dec00204 	addi	sp,sp,8
    bd0c:	f800283a 	ret

0000bd10 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    bd10:	defff804 	addi	sp,sp,-32
    bd14:	dfc00715 	stw	ra,28(sp)
    bd18:	df000615 	stw	fp,24(sp)
    bd1c:	df000604 	addi	fp,sp,24
    bd20:	e13ffe15 	stw	r4,-8(fp)
    bd24:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    bd28:	00800044 	movi	r2,1
    bd2c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    bd30:	e0bfff03 	ldbu	r2,-4(fp)
    bd34:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    bd38:	d8000015 	stw	zero,0(sp)
    bd3c:	d8000115 	stw	zero,4(sp)
    bd40:	d8000215 	stw	zero,8(sp)
    bd44:	e13ffe17 	ldw	r4,-8(fp)
    bd48:	000b883a 	mov	r5,zero
    bd4c:	01800084 	movi	r6,2
    bd50:	e1fffd04 	addi	r7,fp,-12
    bd54:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    bd58:	e13ffe17 	ldw	r4,-8(fp)
    bd5c:	000bb040 	call	bb04 <epcs_await_wip_released>
}
    bd60:	e037883a 	mov	sp,fp
    bd64:	dfc00117 	ldw	ra,4(sp)
    bd68:	df000017 	ldw	fp,0(sp)
    bd6c:	dec00204 	addi	sp,sp,8
    bd70:	f800283a 	ret

0000bd74 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    bd74:	defff404 	addi	sp,sp,-48
    bd78:	dfc00b15 	stw	ra,44(sp)
    bd7c:	df000a15 	stw	fp,40(sp)
    bd80:	df000a04 	addi	fp,sp,40
    bd84:	e13ffc15 	stw	r4,-16(fp)
    bd88:	e17ffd15 	stw	r5,-12(fp)
    bd8c:	e1bffe15 	stw	r6,-8(fp)
    bd90:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    bd94:	00800084 	movi	r2,2
    bd98:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    bd9c:	e0800217 	ldw	r2,8(fp)
    bda0:	1005003a 	cmpeq	r2,r2,zero
    bda4:	10001c1e 	bne	r2,zero,be18 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    bda8:	e0bffd17 	ldw	r2,-12(fp)
    bdac:	1005d63a 	srai	r2,r2,24
    bdb0:	1007883a 	mov	r3,r2
    bdb4:	00bfffc4 	movi	r2,-1
    bdb8:	1884703a 	and	r2,r3,r2
    bdbc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    bdc0:	e0bffd17 	ldw	r2,-12(fp)
    bdc4:	1005d43a 	srai	r2,r2,16
    bdc8:	1007883a 	mov	r3,r2
    bdcc:	00bfffc4 	movi	r2,-1
    bdd0:	1884703a 	and	r2,r3,r2
    bdd4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    bdd8:	e0bffd17 	ldw	r2,-12(fp)
    bddc:	1005d23a 	srai	r2,r2,8
    bde0:	1007883a 	mov	r3,r2
    bde4:	00bfffc4 	movi	r2,-1
    bde8:	1884703a 	and	r2,r3,r2
    bdec:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    bdf0:	e0bffd17 	ldw	r2,-12(fp)
    bdf4:	1007883a 	mov	r3,r2
    bdf8:	00bfffc4 	movi	r2,-1
    bdfc:	1884703a 	and	r2,r3,r2
    be00:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    be04:	00800144 	movi	r2,5
    be08:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    be0c:	e13ffc17 	ldw	r4,-16(fp)
    be10:	000bfd00 	call	bfd0 <epcs_enter_4_bytes_mode>
    be14:	00001306 	br	be64 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    be18:	e0bffd17 	ldw	r2,-12(fp)
    be1c:	1005d43a 	srai	r2,r2,16
    be20:	1007883a 	mov	r3,r2
    be24:	00bfffc4 	movi	r2,-1
    be28:	1884703a 	and	r2,r3,r2
    be2c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    be30:	e0bffd17 	ldw	r2,-12(fp)
    be34:	1005d23a 	srai	r2,r2,8
    be38:	1007883a 	mov	r3,r2
    be3c:	00bfffc4 	movi	r2,-1
    be40:	1884703a 	and	r2,r3,r2
    be44:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    be48:	e0bffd17 	ldw	r2,-12(fp)
    be4c:	1007883a 	mov	r3,r2
    be50:	00bfffc4 	movi	r2,-1
    be54:	1884703a 	and	r2,r3,r2
    be58:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    be5c:	00800104 	movi	r2,4
    be60:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    be64:	e13ffc17 	ldw	r4,-16(fp)
    be68:	000bcc00 	call	bcc0 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    be6c:	e1fffa04 	addi	r7,fp,-24
    be70:	d8000015 	stw	zero,0(sp)
    be74:	d8000115 	stw	zero,4(sp)
    be78:	00800044 	movi	r2,1
    be7c:	d8800215 	stw	r2,8(sp)
    be80:	e13ffc17 	ldw	r4,-16(fp)
    be84:	000b883a 	mov	r5,zero
    be88:	e1bff917 	ldw	r6,-28(fp)
    be8c:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    be90:	e1bfff17 	ldw	r6,-4(fp)
    be94:	d8000015 	stw	zero,0(sp)
    be98:	d8000115 	stw	zero,4(sp)
    be9c:	d8000215 	stw	zero,8(sp)
    bea0:	e13ffc17 	ldw	r4,-16(fp)
    bea4:	000b883a 	mov	r5,zero
    bea8:	e1fffe17 	ldw	r7,-8(fp)
    beac:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    beb0:	e13ffc17 	ldw	r4,-16(fp)
    beb4:	000bb040 	call	bb04 <epcs_await_wip_released>

  if(four_bytes_mode)
    beb8:	e0800217 	ldw	r2,8(fp)
    bebc:	1005003a 	cmpeq	r2,r2,zero
    bec0:	1000021e 	bne	r2,zero,becc <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    bec4:	e13ffc17 	ldw	r4,-16(fp)
    bec8:	000c0280 	call	c028 <epcs_exit_4_bytes_mode>
  }

  return length;
    becc:	e0bfff17 	ldw	r2,-4(fp)
}
    bed0:	e037883a 	mov	sp,fp
    bed4:	dfc00117 	ldw	ra,4(sp)
    bed8:	df000017 	ldw	fp,0(sp)
    bedc:	dec00204 	addi	sp,sp,8
    bee0:	f800283a 	ret

0000bee4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    bee4:	defff804 	addi	sp,sp,-32
    bee8:	dfc00715 	stw	ra,28(sp)
    beec:	df000615 	stw	fp,24(sp)
    bef0:	df000604 	addi	fp,sp,24
    bef4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    bef8:	00bfeac4 	movi	r2,-85
    befc:	e0bffd05 	stb	r2,-12(fp)
    bf00:	e03ffd45 	stb	zero,-11(fp)
    bf04:	e03ffd85 	stb	zero,-10(fp)
    bf08:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    bf0c:	00800044 	movi	r2,1
    bf10:	d8800015 	stw	r2,0(sp)
    bf14:	e0bffe04 	addi	r2,fp,-8
    bf18:	d8800115 	stw	r2,4(sp)
    bf1c:	d8000215 	stw	zero,8(sp)
    bf20:	e13fff17 	ldw	r4,-4(fp)
    bf24:	000b883a 	mov	r5,zero
    bf28:	01800104 	movi	r6,4
    bf2c:	e1fffd04 	addi	r7,fp,-12
    bf30:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    bf34:	e0bffe03 	ldbu	r2,-8(fp)
    bf38:	10803fcc 	andi	r2,r2,255
}
    bf3c:	e037883a 	mov	sp,fp
    bf40:	dfc00117 	ldw	ra,4(sp)
    bf44:	df000017 	ldw	fp,0(sp)
    bf48:	dec00204 	addi	sp,sp,8
    bf4c:	f800283a 	ret

0000bf50 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    bf50:	defff804 	addi	sp,sp,-32
    bf54:	dfc00715 	stw	ra,28(sp)
    bf58:	df000615 	stw	fp,24(sp)
    bf5c:	df000604 	addi	fp,sp,24
    bf60:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    bf64:	00bfe7c4 	movi	r2,-97
    bf68:	e0bffd05 	stb	r2,-12(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    bf6c:	008000c4 	movi	r2,3
    bf70:	d8800015 	stw	r2,0(sp)
    bf74:	e0bffe04 	addi	r2,fp,-8
    bf78:	d8800115 	stw	r2,4(sp)
    bf7c:	d8000215 	stw	zero,8(sp)
    bf80:	e13fff17 	ldw	r4,-4(fp)
    bf84:	000b883a 	mov	r5,zero
    bf88:	01800044 	movi	r6,1
    bf8c:	e1fffd04 	addi	r7,fp,-12
    bf90:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    bf94:	e0bffe03 	ldbu	r2,-8(fp)
    bf98:	10803fcc 	andi	r2,r2,255
    bf9c:	1006943a 	slli	r3,r2,16
    bfa0:	e0bffe43 	ldbu	r2,-7(fp)
    bfa4:	10803fcc 	andi	r2,r2,255
    bfa8:	1004923a 	slli	r2,r2,8
    bfac:	1886b03a 	or	r3,r3,r2
    bfb0:	e0bffe83 	ldbu	r2,-6(fp)
    bfb4:	10803fcc 	andi	r2,r2,255
    bfb8:	1884b03a 	or	r2,r3,r2
}
    bfbc:	e037883a 	mov	sp,fp
    bfc0:	dfc00117 	ldw	ra,4(sp)
    bfc4:	df000017 	ldw	fp,0(sp)
    bfc8:	dec00204 	addi	sp,sp,8
    bfcc:	f800283a 	ret

0000bfd0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    bfd0:	defff904 	addi	sp,sp,-28
    bfd4:	dfc00615 	stw	ra,24(sp)
    bfd8:	df000515 	stw	fp,20(sp)
    bfdc:	df000504 	addi	fp,sp,20
    bfe0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    bfe4:	00bfedc4 	movi	r2,-73
    bfe8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    bfec:	e13fff17 	ldw	r4,-4(fp)
    bff0:	000bcc00 	call	bcc0 <epcs_write_enable>

  alt_avalon_spi_command(
    bff4:	d8000015 	stw	zero,0(sp)
    bff8:	d8000115 	stw	zero,4(sp)
    bffc:	d8000215 	stw	zero,8(sp)
    c000:	e13fff17 	ldw	r4,-4(fp)
    c004:	000b883a 	mov	r5,zero
    c008:	01800044 	movi	r6,1
    c00c:	e1fffe04 	addi	r7,fp,-8
    c010:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    c014:	e037883a 	mov	sp,fp
    c018:	dfc00117 	ldw	ra,4(sp)
    c01c:	df000017 	ldw	fp,0(sp)
    c020:	dec00204 	addi	sp,sp,8
    c024:	f800283a 	ret

0000c028 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    c028:	defff904 	addi	sp,sp,-28
    c02c:	dfc00615 	stw	ra,24(sp)
    c030:	df000515 	stw	fp,20(sp)
    c034:	df000504 	addi	fp,sp,20
    c038:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    c03c:	00bffa44 	movi	r2,-23
    c040:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    c044:	e13fff17 	ldw	r4,-4(fp)
    c048:	000bcc00 	call	bcc0 <epcs_write_enable>

  alt_avalon_spi_command(
    c04c:	d8000015 	stw	zero,0(sp)
    c050:	d8000115 	stw	zero,4(sp)
    c054:	d8000215 	stw	zero,8(sp)
    c058:	e13fff17 	ldw	r4,-4(fp)
    c05c:	000b883a 	mov	r5,zero
    c060:	01800044 	movi	r6,1
    c064:	e1fffe04 	addi	r7,fp,-8
    c068:	000c9dc0 	call	c9dc <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    c06c:	e037883a 	mov	sp,fp
    c070:	dfc00117 	ldw	ra,4(sp)
    c074:	df000017 	ldw	fp,0(sp)
    c078:	dec00204 	addi	sp,sp,8
    c07c:	f800283a 	ret

0000c080 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c080:	defff904 	addi	sp,sp,-28
    c084:	dfc00615 	stw	ra,24(sp)
    c088:	df000515 	stw	fp,20(sp)
    c08c:	df000504 	addi	fp,sp,20
    c090:	e13ffd15 	stw	r4,-12(fp)
    c094:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c098:	e0bffd17 	ldw	r2,-12(fp)
    c09c:	1005003a 	cmpeq	r2,r2,zero
    c0a0:	1000041e 	bne	r2,zero,c0b4 <alt_dev_llist_insert+0x34>
    c0a4:	e0bffd17 	ldw	r2,-12(fp)
    c0a8:	10800217 	ldw	r2,8(r2)
    c0ac:	1004c03a 	cmpne	r2,r2,zero
    c0b0:	1000071e 	bne	r2,zero,c0d0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c0b4:	000c1340 	call	c134 <alt_get_errno>
    c0b8:	1007883a 	mov	r3,r2
    c0bc:	00800584 	movi	r2,22
    c0c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c0c4:	00bffa84 	movi	r2,-22
    c0c8:	e0bfff15 	stw	r2,-4(fp)
    c0cc:	00001306 	br	c11c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c0d0:	e0fffd17 	ldw	r3,-12(fp)
    c0d4:	e0bffe17 	ldw	r2,-8(fp)
    c0d8:	e0bffb15 	stw	r2,-20(fp)
    c0dc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c0e0:	e0fffc17 	ldw	r3,-16(fp)
    c0e4:	e0bffb17 	ldw	r2,-20(fp)
    c0e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c0ec:	e0bffb17 	ldw	r2,-20(fp)
    c0f0:	10c00017 	ldw	r3,0(r2)
    c0f4:	e0bffc17 	ldw	r2,-16(fp)
    c0f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c0fc:	e0bffb17 	ldw	r2,-20(fp)
    c100:	10c00017 	ldw	r3,0(r2)
    c104:	e0bffc17 	ldw	r2,-16(fp)
    c108:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c10c:	e0fffb17 	ldw	r3,-20(fp)
    c110:	e0bffc17 	ldw	r2,-16(fp)
    c114:	18800015 	stw	r2,0(r3)

  return 0;  
    c118:	e03fff15 	stw	zero,-4(fp)
    c11c:	e0bfff17 	ldw	r2,-4(fp)
}
    c120:	e037883a 	mov	sp,fp
    c124:	dfc00117 	ldw	ra,4(sp)
    c128:	df000017 	ldw	fp,0(sp)
    c12c:	dec00204 	addi	sp,sp,8
    c130:	f800283a 	ret

0000c134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c134:	defffd04 	addi	sp,sp,-12
    c138:	dfc00215 	stw	ra,8(sp)
    c13c:	df000115 	stw	fp,4(sp)
    c140:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c144:	00800074 	movhi	r2,1
    c148:	10b83604 	addi	r2,r2,-7976
    c14c:	10800017 	ldw	r2,0(r2)
    c150:	1005003a 	cmpeq	r2,r2,zero
    c154:	1000061e 	bne	r2,zero,c170 <alt_get_errno+0x3c>
    c158:	00800074 	movhi	r2,1
    c15c:	10b83604 	addi	r2,r2,-7976
    c160:	10800017 	ldw	r2,0(r2)
    c164:	103ee83a 	callr	r2
    c168:	e0bfff15 	stw	r2,-4(fp)
    c16c:	00000306 	br	c17c <alt_get_errno+0x48>
    c170:	00800074 	movhi	r2,1
    c174:	10b84104 	addi	r2,r2,-7932
    c178:	e0bfff15 	stw	r2,-4(fp)
    c17c:	e0bfff17 	ldw	r2,-4(fp)
}
    c180:	e037883a 	mov	sp,fp
    c184:	dfc00117 	ldw	ra,4(sp)
    c188:	df000017 	ldw	fp,0(sp)
    c18c:	dec00204 	addi	sp,sp,8
    c190:	f800283a 	ret

0000c194 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c194:	defffd04 	addi	sp,sp,-12
    c198:	dfc00215 	stw	ra,8(sp)
    c19c:	df000115 	stw	fp,4(sp)
    c1a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c1a4:	00bfff04 	movi	r2,-4
    c1a8:	00c00074 	movhi	r3,1
    c1ac:	18f47e04 	addi	r3,r3,-11784
    c1b0:	1885883a 	add	r2,r3,r2
    c1b4:	e0bfff15 	stw	r2,-4(fp)
    c1b8:	00000606 	br	c1d4 <_do_ctors+0x40>
        (*ctor) (); 
    c1bc:	e0bfff17 	ldw	r2,-4(fp)
    c1c0:	10800017 	ldw	r2,0(r2)
    c1c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c1c8:	e0bfff17 	ldw	r2,-4(fp)
    c1cc:	10bfff04 	addi	r2,r2,-4
    c1d0:	e0bfff15 	stw	r2,-4(fp)
    c1d4:	e0ffff17 	ldw	r3,-4(fp)
    c1d8:	00800074 	movhi	r2,1
    c1dc:	10b47d04 	addi	r2,r2,-11788
    c1e0:	18bff62e 	bgeu	r3,r2,c1bc <_do_ctors+0x28>
        (*ctor) (); 
}
    c1e4:	e037883a 	mov	sp,fp
    c1e8:	dfc00117 	ldw	ra,4(sp)
    c1ec:	df000017 	ldw	fp,0(sp)
    c1f0:	dec00204 	addi	sp,sp,8
    c1f4:	f800283a 	ret

0000c1f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c1f8:	defffd04 	addi	sp,sp,-12
    c1fc:	dfc00215 	stw	ra,8(sp)
    c200:	df000115 	stw	fp,4(sp)
    c204:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c208:	00bfff04 	movi	r2,-4
    c20c:	00c00074 	movhi	r3,1
    c210:	18f47e04 	addi	r3,r3,-11784
    c214:	1885883a 	add	r2,r3,r2
    c218:	e0bfff15 	stw	r2,-4(fp)
    c21c:	00000606 	br	c238 <_do_dtors+0x40>
        (*dtor) (); 
    c220:	e0bfff17 	ldw	r2,-4(fp)
    c224:	10800017 	ldw	r2,0(r2)
    c228:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c22c:	e0bfff17 	ldw	r2,-4(fp)
    c230:	10bfff04 	addi	r2,r2,-4
    c234:	e0bfff15 	stw	r2,-4(fp)
    c238:	e0ffff17 	ldw	r3,-4(fp)
    c23c:	00800074 	movhi	r2,1
    c240:	10b47e04 	addi	r2,r2,-11784
    c244:	18bff62e 	bgeu	r3,r2,c220 <_do_dtors+0x28>
        (*dtor) (); 
}
    c248:	e037883a 	mov	sp,fp
    c24c:	dfc00117 	ldw	ra,4(sp)
    c250:	df000017 	ldw	fp,0(sp)
    c254:	dec00204 	addi	sp,sp,8
    c258:	f800283a 	ret

0000c25c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c25c:	defff904 	addi	sp,sp,-28
    c260:	dfc00615 	stw	ra,24(sp)
    c264:	df000515 	stw	fp,20(sp)
    c268:	df000504 	addi	fp,sp,20
    c26c:	e13ffd15 	stw	r4,-12(fp)
    c270:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c274:	e0bffe17 	ldw	r2,-8(fp)
    c278:	10800017 	ldw	r2,0(r2)
    c27c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c280:	e13ffd17 	ldw	r4,-12(fp)
    c284:	00005180 	call	518 <strlen>
    c288:	10800044 	addi	r2,r2,1
    c28c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c290:	00000d06 	br	c2c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	11000217 	ldw	r4,8(r2)
    c29c:	e1bffb17 	ldw	r6,-20(fp)
    c2a0:	e17ffd17 	ldw	r5,-12(fp)
    c2a4:	000ce380 	call	ce38 <memcmp>
    c2a8:	1004c03a 	cmpne	r2,r2,zero
    c2ac:	1000031e 	bne	r2,zero,c2bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c2b0:	e0bffc17 	ldw	r2,-16(fp)
    c2b4:	e0bfff15 	stw	r2,-4(fp)
    c2b8:	00000706 	br	c2d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c2bc:	e0bffc17 	ldw	r2,-16(fp)
    c2c0:	10800017 	ldw	r2,0(r2)
    c2c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c2c8:	e0fffe17 	ldw	r3,-8(fp)
    c2cc:	e0bffc17 	ldw	r2,-16(fp)
    c2d0:	10fff01e 	bne	r2,r3,c294 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c2d4:	e03fff15 	stw	zero,-4(fp)
    c2d8:	e0bfff17 	ldw	r2,-4(fp)
}
    c2dc:	e037883a 	mov	sp,fp
    c2e0:	dfc00117 	ldw	ra,4(sp)
    c2e4:	df000017 	ldw	fp,0(sp)
    c2e8:	dec00204 	addi	sp,sp,8
    c2ec:	f800283a 	ret

0000c2f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c2f0:	defff904 	addi	sp,sp,-28
    c2f4:	dfc00615 	stw	ra,24(sp)
    c2f8:	df000515 	stw	fp,20(sp)
    c2fc:	df000504 	addi	fp,sp,20
    c300:	e13ffc15 	stw	r4,-16(fp)
    c304:	e17ffd15 	stw	r5,-12(fp)
    c308:	e1bffe15 	stw	r6,-8(fp)
    c30c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c310:	e0800217 	ldw	r2,8(fp)
    c314:	d8800015 	stw	r2,0(sp)
    c318:	e13ffc17 	ldw	r4,-16(fp)
    c31c:	e17ffd17 	ldw	r5,-12(fp)
    c320:	e1bffe17 	ldw	r6,-8(fp)
    c324:	e1ffff17 	ldw	r7,-4(fp)
    c328:	000c4c40 	call	c4c4 <alt_iic_isr_register>
}  
    c32c:	e037883a 	mov	sp,fp
    c330:	dfc00117 	ldw	ra,4(sp)
    c334:	df000017 	ldw	fp,0(sp)
    c338:	dec00204 	addi	sp,sp,8
    c33c:	f800283a 	ret

0000c340 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c340:	defff904 	addi	sp,sp,-28
    c344:	df000615 	stw	fp,24(sp)
    c348:	df000604 	addi	fp,sp,24
    c34c:	e13ffe15 	stw	r4,-8(fp)
    c350:	e17fff15 	stw	r5,-4(fp)
    c354:	e0bfff17 	ldw	r2,-4(fp)
    c358:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c35c:	0005303a 	rdctl	r2,status
    c360:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c364:	e0fffb17 	ldw	r3,-20(fp)
    c368:	00bfff84 	movi	r2,-2
    c36c:	1884703a 	and	r2,r3,r2
    c370:	1001703a 	wrctl	status,r2
  
  return context;
    c374:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c378:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c37c:	e0fffc17 	ldw	r3,-16(fp)
    c380:	00800044 	movi	r2,1
    c384:	10c4983a 	sll	r2,r2,r3
    c388:	1007883a 	mov	r3,r2
    c38c:	00800074 	movhi	r2,1
    c390:	10b84504 	addi	r2,r2,-7916
    c394:	10800017 	ldw	r2,0(r2)
    c398:	1886b03a 	or	r3,r3,r2
    c39c:	00800074 	movhi	r2,1
    c3a0:	10b84504 	addi	r2,r2,-7916
    c3a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c3a8:	00800074 	movhi	r2,1
    c3ac:	10b84504 	addi	r2,r2,-7916
    c3b0:	10800017 	ldw	r2,0(r2)
    c3b4:	100170fa 	wrctl	ienable,r2
    c3b8:	e0bffd17 	ldw	r2,-12(fp)
    c3bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c3c0:	e0bffa17 	ldw	r2,-24(fp)
    c3c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c3c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c3cc:	e037883a 	mov	sp,fp
    c3d0:	df000017 	ldw	fp,0(sp)
    c3d4:	dec00104 	addi	sp,sp,4
    c3d8:	f800283a 	ret

0000c3dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c3dc:	defff904 	addi	sp,sp,-28
    c3e0:	df000615 	stw	fp,24(sp)
    c3e4:	df000604 	addi	fp,sp,24
    c3e8:	e13ffe15 	stw	r4,-8(fp)
    c3ec:	e17fff15 	stw	r5,-4(fp)
    c3f0:	e0bfff17 	ldw	r2,-4(fp)
    c3f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c3f8:	0005303a 	rdctl	r2,status
    c3fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c400:	e0fffb17 	ldw	r3,-20(fp)
    c404:	00bfff84 	movi	r2,-2
    c408:	1884703a 	and	r2,r3,r2
    c40c:	1001703a 	wrctl	status,r2
  
  return context;
    c410:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c414:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c418:	e0fffc17 	ldw	r3,-16(fp)
    c41c:	00800044 	movi	r2,1
    c420:	10c4983a 	sll	r2,r2,r3
    c424:	0084303a 	nor	r2,zero,r2
    c428:	1007883a 	mov	r3,r2
    c42c:	00800074 	movhi	r2,1
    c430:	10b84504 	addi	r2,r2,-7916
    c434:	10800017 	ldw	r2,0(r2)
    c438:	1886703a 	and	r3,r3,r2
    c43c:	00800074 	movhi	r2,1
    c440:	10b84504 	addi	r2,r2,-7916
    c444:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c448:	00800074 	movhi	r2,1
    c44c:	10b84504 	addi	r2,r2,-7916
    c450:	10800017 	ldw	r2,0(r2)
    c454:	100170fa 	wrctl	ienable,r2
    c458:	e0bffd17 	ldw	r2,-12(fp)
    c45c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c460:	e0bffa17 	ldw	r2,-24(fp)
    c464:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c468:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c46c:	e037883a 	mov	sp,fp
    c470:	df000017 	ldw	fp,0(sp)
    c474:	dec00104 	addi	sp,sp,4
    c478:	f800283a 	ret

0000c47c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c47c:	defffc04 	addi	sp,sp,-16
    c480:	df000315 	stw	fp,12(sp)
    c484:	df000304 	addi	fp,sp,12
    c488:	e13ffe15 	stw	r4,-8(fp)
    c48c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c490:	000530fa 	rdctl	r2,ienable
    c494:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c498:	e0ffff17 	ldw	r3,-4(fp)
    c49c:	00800044 	movi	r2,1
    c4a0:	10c4983a 	sll	r2,r2,r3
    c4a4:	1007883a 	mov	r3,r2
    c4a8:	e0bffd17 	ldw	r2,-12(fp)
    c4ac:	1884703a 	and	r2,r3,r2
    c4b0:	1004c03a 	cmpne	r2,r2,zero
}
    c4b4:	e037883a 	mov	sp,fp
    c4b8:	df000017 	ldw	fp,0(sp)
    c4bc:	dec00104 	addi	sp,sp,4
    c4c0:	f800283a 	ret

0000c4c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c4c4:	defff404 	addi	sp,sp,-48
    c4c8:	dfc00b15 	stw	ra,44(sp)
    c4cc:	df000a15 	stw	fp,40(sp)
    c4d0:	df000a04 	addi	fp,sp,40
    c4d4:	e13ffb15 	stw	r4,-20(fp)
    c4d8:	e17ffc15 	stw	r5,-16(fp)
    c4dc:	e1bffd15 	stw	r6,-12(fp)
    c4e0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c4e4:	00bffa84 	movi	r2,-22
    c4e8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c4ec:	e0bffc17 	ldw	r2,-16(fp)
    c4f0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c4f4:	e0bff917 	ldw	r2,-28(fp)
    c4f8:	10800808 	cmpgei	r2,r2,32
    c4fc:	1000291e 	bne	r2,zero,c5a4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c500:	0005303a 	rdctl	r2,status
    c504:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c508:	e0fff717 	ldw	r3,-36(fp)
    c50c:	00bfff84 	movi	r2,-2
    c510:	1884703a 	and	r2,r3,r2
    c514:	1001703a 	wrctl	status,r2
  
  return context;
    c518:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c51c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c520:	e0bff917 	ldw	r2,-28(fp)
    c524:	00c00074 	movhi	r3,1
    c528:	18f85004 	addi	r3,r3,-7872
    c52c:	100490fa 	slli	r2,r2,3
    c530:	10c7883a 	add	r3,r2,r3
    c534:	e0bffd17 	ldw	r2,-12(fp)
    c538:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c53c:	e0bff917 	ldw	r2,-28(fp)
    c540:	00c00074 	movhi	r3,1
    c544:	18f85004 	addi	r3,r3,-7872
    c548:	100490fa 	slli	r2,r2,3
    c54c:	10c5883a 	add	r2,r2,r3
    c550:	10c00104 	addi	r3,r2,4
    c554:	e0bffe17 	ldw	r2,-8(fp)
    c558:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c55c:	e0bffd17 	ldw	r2,-12(fp)
    c560:	1005003a 	cmpeq	r2,r2,zero
    c564:	1000051e 	bne	r2,zero,c57c <alt_iic_isr_register+0xb8>
    c568:	e17ff917 	ldw	r5,-28(fp)
    c56c:	e13ffb17 	ldw	r4,-20(fp)
    c570:	000c3400 	call	c340 <alt_ic_irq_enable>
    c574:	e0bfff15 	stw	r2,-4(fp)
    c578:	00000406 	br	c58c <alt_iic_isr_register+0xc8>
    c57c:	e17ff917 	ldw	r5,-28(fp)
    c580:	e13ffb17 	ldw	r4,-20(fp)
    c584:	000c3dc0 	call	c3dc <alt_ic_irq_disable>
    c588:	e0bfff15 	stw	r2,-4(fp)
    c58c:	e0bfff17 	ldw	r2,-4(fp)
    c590:	e0bffa15 	stw	r2,-24(fp)
    c594:	e0bff817 	ldw	r2,-32(fp)
    c598:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c59c:	e0bff617 	ldw	r2,-40(fp)
    c5a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c5a4:	e0bffa17 	ldw	r2,-24(fp)
}
    c5a8:	e037883a 	mov	sp,fp
    c5ac:	dfc00117 	ldw	ra,4(sp)
    c5b0:	df000017 	ldw	fp,0(sp)
    c5b4:	dec00204 	addi	sp,sp,8
    c5b8:	f800283a 	ret

0000c5bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c5bc:	defff904 	addi	sp,sp,-28
    c5c0:	dfc00615 	stw	ra,24(sp)
    c5c4:	df000515 	stw	fp,20(sp)
    c5c8:	df000504 	addi	fp,sp,20
    c5cc:	e13ffc15 	stw	r4,-16(fp)
    c5d0:	e17ffd15 	stw	r5,-12(fp)
    c5d4:	e1bffe15 	stw	r6,-8(fp)
    c5d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c5dc:	e13ffd17 	ldw	r4,-12(fp)
    c5e0:	e17ffe17 	ldw	r5,-8(fp)
    c5e4:	e1bfff17 	ldw	r6,-4(fp)
    c5e8:	000c7d40 	call	c7d4 <open>
    c5ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c5f0:	e0bffb17 	ldw	r2,-20(fp)
    c5f4:	1004803a 	cmplt	r2,r2,zero
    c5f8:	10001c1e 	bne	r2,zero,c66c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c5fc:	e0bffb17 	ldw	r2,-20(fp)
    c600:	00c00074 	movhi	r3,1
    c604:	18f76804 	addi	r3,r3,-8800
    c608:	10800324 	muli	r2,r2,12
    c60c:	10c5883a 	add	r2,r2,r3
    c610:	10c00017 	ldw	r3,0(r2)
    c614:	e0bffc17 	ldw	r2,-16(fp)
    c618:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c61c:	e0bffb17 	ldw	r2,-20(fp)
    c620:	00c00074 	movhi	r3,1
    c624:	18f76804 	addi	r3,r3,-8800
    c628:	10800324 	muli	r2,r2,12
    c62c:	10c5883a 	add	r2,r2,r3
    c630:	10800104 	addi	r2,r2,4
    c634:	10c00017 	ldw	r3,0(r2)
    c638:	e0bffc17 	ldw	r2,-16(fp)
    c63c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c640:	e0bffb17 	ldw	r2,-20(fp)
    c644:	00c00074 	movhi	r3,1
    c648:	18f76804 	addi	r3,r3,-8800
    c64c:	10800324 	muli	r2,r2,12
    c650:	10c5883a 	add	r2,r2,r3
    c654:	10800204 	addi	r2,r2,8
    c658:	10c00017 	ldw	r3,0(r2)
    c65c:	e0bffc17 	ldw	r2,-16(fp)
    c660:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c664:	e13ffb17 	ldw	r4,-20(fp)
    c668:	000a2c00 	call	a2c0 <alt_release_fd>
  }
} 
    c66c:	e037883a 	mov	sp,fp
    c670:	dfc00117 	ldw	ra,4(sp)
    c674:	df000017 	ldw	fp,0(sp)
    c678:	dec00204 	addi	sp,sp,8
    c67c:	f800283a 	ret

0000c680 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c680:	defffb04 	addi	sp,sp,-20
    c684:	dfc00415 	stw	ra,16(sp)
    c688:	df000315 	stw	fp,12(sp)
    c68c:	df000304 	addi	fp,sp,12
    c690:	e13ffd15 	stw	r4,-12(fp)
    c694:	e17ffe15 	stw	r5,-8(fp)
    c698:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c69c:	01000074 	movhi	r4,1
    c6a0:	21376b04 	addi	r4,r4,-8788
    c6a4:	e17ffd17 	ldw	r5,-12(fp)
    c6a8:	01800044 	movi	r6,1
    c6ac:	01c07fc4 	movi	r7,511
    c6b0:	000c5bc0 	call	c5bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c6b4:	01000074 	movhi	r4,1
    c6b8:	21376804 	addi	r4,r4,-8800
    c6bc:	e17ffe17 	ldw	r5,-8(fp)
    c6c0:	000d883a 	mov	r6,zero
    c6c4:	01c07fc4 	movi	r7,511
    c6c8:	000c5bc0 	call	c5bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c6cc:	01000074 	movhi	r4,1
    c6d0:	21376e04 	addi	r4,r4,-8776
    c6d4:	e17fff17 	ldw	r5,-4(fp)
    c6d8:	01800044 	movi	r6,1
    c6dc:	01c07fc4 	movi	r7,511
    c6e0:	000c5bc0 	call	c5bc <alt_open_fd>
}  
    c6e4:	e037883a 	mov	sp,fp
    c6e8:	dfc00117 	ldw	ra,4(sp)
    c6ec:	df000017 	ldw	fp,0(sp)
    c6f0:	dec00204 	addi	sp,sp,8
    c6f4:	f800283a 	ret

0000c6f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c6f8:	defffc04 	addi	sp,sp,-16
    c6fc:	df000315 	stw	fp,12(sp)
    c700:	df000304 	addi	fp,sp,12
    c704:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c708:	e0bffe17 	ldw	r2,-8(fp)
    c70c:	10800217 	ldw	r2,8(r2)
    c710:	10d00034 	orhi	r3,r2,16384
    c714:	e0bffe17 	ldw	r2,-8(fp)
    c718:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c71c:	e03ffd15 	stw	zero,-12(fp)
    c720:	00002006 	br	c7a4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c724:	e0bffd17 	ldw	r2,-12(fp)
    c728:	00c00074 	movhi	r3,1
    c72c:	18f76804 	addi	r3,r3,-8800
    c730:	10800324 	muli	r2,r2,12
    c734:	10c5883a 	add	r2,r2,r3
    c738:	10c00017 	ldw	r3,0(r2)
    c73c:	e0bffe17 	ldw	r2,-8(fp)
    c740:	10800017 	ldw	r2,0(r2)
    c744:	1880141e 	bne	r3,r2,c798 <alt_file_locked+0xa0>
    c748:	e0bffd17 	ldw	r2,-12(fp)
    c74c:	00c00074 	movhi	r3,1
    c750:	18f76804 	addi	r3,r3,-8800
    c754:	10800324 	muli	r2,r2,12
    c758:	10c5883a 	add	r2,r2,r3
    c75c:	10800204 	addi	r2,r2,8
    c760:	10800017 	ldw	r2,0(r2)
    c764:	1004403a 	cmpge	r2,r2,zero
    c768:	10000b1e 	bne	r2,zero,c798 <alt_file_locked+0xa0>
    c76c:	e0bffd17 	ldw	r2,-12(fp)
    c770:	10800324 	muli	r2,r2,12
    c774:	1007883a 	mov	r3,r2
    c778:	00800074 	movhi	r2,1
    c77c:	10b76804 	addi	r2,r2,-8800
    c780:	1887883a 	add	r3,r3,r2
    c784:	e0bffe17 	ldw	r2,-8(fp)
    c788:	18800326 	beq	r3,r2,c798 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c78c:	00bffcc4 	movi	r2,-13
    c790:	e0bfff15 	stw	r2,-4(fp)
    c794:	00000a06 	br	c7c0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c798:	e0bffd17 	ldw	r2,-12(fp)
    c79c:	10800044 	addi	r2,r2,1
    c7a0:	e0bffd15 	stw	r2,-12(fp)
    c7a4:	00800074 	movhi	r2,1
    c7a8:	10b83504 	addi	r2,r2,-7980
    c7ac:	10800017 	ldw	r2,0(r2)
    c7b0:	1007883a 	mov	r3,r2
    c7b4:	e0bffd17 	ldw	r2,-12(fp)
    c7b8:	18bfda2e 	bgeu	r3,r2,c724 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c7bc:	e03fff15 	stw	zero,-4(fp)
    c7c0:	e0bfff17 	ldw	r2,-4(fp)
}
    c7c4:	e037883a 	mov	sp,fp
    c7c8:	df000017 	ldw	fp,0(sp)
    c7cc:	dec00104 	addi	sp,sp,4
    c7d0:	f800283a 	ret

0000c7d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c7d4:	defff404 	addi	sp,sp,-48
    c7d8:	dfc00b15 	stw	ra,44(sp)
    c7dc:	df000a15 	stw	fp,40(sp)
    c7e0:	df000a04 	addi	fp,sp,40
    c7e4:	e13ffb15 	stw	r4,-20(fp)
    c7e8:	e17ffc15 	stw	r5,-16(fp)
    c7ec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c7f0:	00bfffc4 	movi	r2,-1
    c7f4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c7f8:	00bffb44 	movi	r2,-19
    c7fc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c800:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c804:	e13ffb17 	ldw	r4,-20(fp)
    c808:	01400074 	movhi	r5,1
    c80c:	29783304 	addi	r5,r5,-7988
    c810:	000c25c0 	call	c25c <alt_find_dev>
    c814:	e0bffa15 	stw	r2,-24(fp)
    c818:	e0bffa17 	ldw	r2,-24(fp)
    c81c:	1004c03a 	cmpne	r2,r2,zero
    c820:	1000051e 	bne	r2,zero,c838 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c824:	e13ffb17 	ldw	r4,-20(fp)
    c828:	000cc140 	call	cc14 <alt_find_file>
    c82c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c830:	00800044 	movi	r2,1
    c834:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c838:	e0bffa17 	ldw	r2,-24(fp)
    c83c:	1005003a 	cmpeq	r2,r2,zero
    c840:	1000301e 	bne	r2,zero,c904 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c844:	e13ffa17 	ldw	r4,-24(fp)
    c848:	000cd340 	call	cd34 <alt_get_fd>
    c84c:	e0bff815 	stw	r2,-32(fp)
    c850:	e0bff817 	ldw	r2,-32(fp)
    c854:	1004403a 	cmpge	r2,r2,zero
    c858:	1000031e 	bne	r2,zero,c868 <open+0x94>
    {
      status = index;
    c85c:	e0bff817 	ldw	r2,-32(fp)
    c860:	e0bff715 	stw	r2,-36(fp)
    c864:	00002906 	br	c90c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    c868:	e0bff817 	ldw	r2,-32(fp)
    c86c:	10800324 	muli	r2,r2,12
    c870:	1007883a 	mov	r3,r2
    c874:	00800074 	movhi	r2,1
    c878:	10b76804 	addi	r2,r2,-8800
    c87c:	1885883a 	add	r2,r3,r2
    c880:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c884:	e0fffc17 	ldw	r3,-16(fp)
    c888:	00900034 	movhi	r2,16384
    c88c:	10bfffc4 	addi	r2,r2,-1
    c890:	1886703a 	and	r3,r3,r2
    c894:	e0bff917 	ldw	r2,-28(fp)
    c898:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c89c:	e0bff617 	ldw	r2,-40(fp)
    c8a0:	1004c03a 	cmpne	r2,r2,zero
    c8a4:	1000061e 	bne	r2,zero,c8c0 <open+0xec>
    c8a8:	e13ff917 	ldw	r4,-28(fp)
    c8ac:	000c6f80 	call	c6f8 <alt_file_locked>
    c8b0:	e0bff715 	stw	r2,-36(fp)
    c8b4:	e0bff717 	ldw	r2,-36(fp)
    c8b8:	1004803a 	cmplt	r2,r2,zero
    c8bc:	1000131e 	bne	r2,zero,c90c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c8c0:	e0bffa17 	ldw	r2,-24(fp)
    c8c4:	10800317 	ldw	r2,12(r2)
    c8c8:	1005003a 	cmpeq	r2,r2,zero
    c8cc:	1000091e 	bne	r2,zero,c8f4 <open+0x120>
    c8d0:	e0bffa17 	ldw	r2,-24(fp)
    c8d4:	10800317 	ldw	r2,12(r2)
    c8d8:	e13ff917 	ldw	r4,-28(fp)
    c8dc:	e17ffb17 	ldw	r5,-20(fp)
    c8e0:	e1bffc17 	ldw	r6,-16(fp)
    c8e4:	e1fffd17 	ldw	r7,-12(fp)
    c8e8:	103ee83a 	callr	r2
    c8ec:	e0bfff15 	stw	r2,-4(fp)
    c8f0:	00000106 	br	c8f8 <open+0x124>
    c8f4:	e03fff15 	stw	zero,-4(fp)
    c8f8:	e0bfff17 	ldw	r2,-4(fp)
    c8fc:	e0bff715 	stw	r2,-36(fp)
    c900:	00000206 	br	c90c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c904:	00bffb44 	movi	r2,-19
    c908:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c90c:	e0bff717 	ldw	r2,-36(fp)
    c910:	1004403a 	cmpge	r2,r2,zero
    c914:	1000091e 	bne	r2,zero,c93c <open+0x168>
  {
    alt_release_fd (index);  
    c918:	e13ff817 	ldw	r4,-32(fp)
    c91c:	000a2c00 	call	a2c0 <alt_release_fd>
    ALT_ERRNO = -status;
    c920:	000c95c0 	call	c95c <alt_get_errno>
    c924:	e0fff717 	ldw	r3,-36(fp)
    c928:	00c7c83a 	sub	r3,zero,r3
    c92c:	10c00015 	stw	r3,0(r2)
    return -1;
    c930:	00bfffc4 	movi	r2,-1
    c934:	e0bffe15 	stw	r2,-8(fp)
    c938:	00000206 	br	c944 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    c93c:	e0bff817 	ldw	r2,-32(fp)
    c940:	e0bffe15 	stw	r2,-8(fp)
    c944:	e0bffe17 	ldw	r2,-8(fp)
}
    c948:	e037883a 	mov	sp,fp
    c94c:	dfc00117 	ldw	ra,4(sp)
    c950:	df000017 	ldw	fp,0(sp)
    c954:	dec00204 	addi	sp,sp,8
    c958:	f800283a 	ret

0000c95c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c95c:	defffd04 	addi	sp,sp,-12
    c960:	dfc00215 	stw	ra,8(sp)
    c964:	df000115 	stw	fp,4(sp)
    c968:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c96c:	00800074 	movhi	r2,1
    c970:	10b83604 	addi	r2,r2,-7976
    c974:	10800017 	ldw	r2,0(r2)
    c978:	1005003a 	cmpeq	r2,r2,zero
    c97c:	1000061e 	bne	r2,zero,c998 <alt_get_errno+0x3c>
    c980:	00800074 	movhi	r2,1
    c984:	10b83604 	addi	r2,r2,-7976
    c988:	10800017 	ldw	r2,0(r2)
    c98c:	103ee83a 	callr	r2
    c990:	e0bfff15 	stw	r2,-4(fp)
    c994:	00000306 	br	c9a4 <alt_get_errno+0x48>
    c998:	00800074 	movhi	r2,1
    c99c:	10b84104 	addi	r2,r2,-7932
    c9a0:	e0bfff15 	stw	r2,-4(fp)
    c9a4:	e0bfff17 	ldw	r2,-4(fp)
}
    c9a8:	e037883a 	mov	sp,fp
    c9ac:	dfc00117 	ldw	ra,4(sp)
    c9b0:	df000017 	ldw	fp,0(sp)
    c9b4:	dec00204 	addi	sp,sp,8
    c9b8:	f800283a 	ret

0000c9bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c9bc:	deffff04 	addi	sp,sp,-4
    c9c0:	df000015 	stw	fp,0(sp)
    c9c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c9c8:	000170fa 	wrctl	ienable,zero
}
    c9cc:	e037883a 	mov	sp,fp
    c9d0:	df000017 	ldw	fp,0(sp)
    c9d4:	dec00104 	addi	sp,sp,4
    c9d8:	f800283a 	ret

0000c9dc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    c9dc:	defff404 	addi	sp,sp,-48
    c9e0:	df000b15 	stw	fp,44(sp)
    c9e4:	df000b04 	addi	fp,sp,44
    c9e8:	e13ffc15 	stw	r4,-16(fp)
    c9ec:	e17ffd15 	stw	r5,-12(fp)
    c9f0:	e1bffe15 	stw	r6,-8(fp)
    c9f4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    c9f8:	e0fffe17 	ldw	r3,-8(fp)
    c9fc:	e0bfff17 	ldw	r2,-4(fp)
    ca00:	10c5883a 	add	r2,r2,r3
    ca04:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    ca08:	e0c00117 	ldw	r3,4(fp)
    ca0c:	e0800217 	ldw	r2,8(fp)
    ca10:	10c5883a 	add	r2,r2,r3
    ca14:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    ca18:	e0800117 	ldw	r2,4(fp)
    ca1c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    ca20:	e0bffe17 	ldw	r2,-8(fp)
    ca24:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    ca28:	00800044 	movi	r2,1
    ca2c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    ca30:	e0bffc17 	ldw	r2,-16(fp)
    ca34:	11000504 	addi	r4,r2,20
    ca38:	e0fffd17 	ldw	r3,-12(fp)
    ca3c:	00800044 	movi	r2,1
    ca40:	10c6983a 	sll	r3,r2,r3
    ca44:	2005883a 	mov	r2,r4
    ca48:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    ca4c:	e0800317 	ldw	r2,12(fp)
    ca50:	1080008c 	andi	r2,r2,2
    ca54:	1004c03a 	cmpne	r2,r2,zero
    ca58:	1000051e 	bne	r2,zero,ca70 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    ca5c:	e0bffc17 	ldw	r2,-16(fp)
    ca60:	10800304 	addi	r2,r2,12
    ca64:	1007883a 	mov	r3,r2
    ca68:	00810004 	movi	r2,1024
    ca6c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    ca70:	e0bffc17 	ldw	r2,-16(fp)
    ca74:	10800037 	ldwio	r2,0(r2)
    ca78:	00000006 	br	ca7c <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    ca7c:	e0bffc17 	ldw	r2,-16(fp)
    ca80:	10800204 	addi	r2,r2,8
    ca84:	10800037 	ldwio	r2,0(r2)
    ca88:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    ca8c:	e0bff717 	ldw	r2,-36(fp)
    ca90:	1080100c 	andi	r2,r2,64
    ca94:	1005003a 	cmpeq	r2,r2,zero
    ca98:	1000031e 	bne	r2,zero,caa8 <alt_avalon_spi_command+0xcc>
    ca9c:	e0bff617 	ldw	r2,-40(fp)
    caa0:	1004c03a 	cmpne	r2,r2,zero
    caa4:	1000041e 	bne	r2,zero,cab8 <alt_avalon_spi_command+0xdc>
    caa8:	e0bff717 	ldw	r2,-36(fp)
    caac:	1080200c 	andi	r2,r2,128
    cab0:	1005003a 	cmpeq	r2,r2,zero
    cab4:	103ff11e 	bne	r2,zero,ca7c <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    cab8:	e0bff717 	ldw	r2,-36(fp)
    cabc:	1080100c 	andi	r2,r2,64
    cac0:	1005003a 	cmpeq	r2,r2,zero
    cac4:	1000201e 	bne	r2,zero,cb48 <alt_avalon_spi_command+0x16c>
    cac8:	e0bff617 	ldw	r2,-40(fp)
    cacc:	10800050 	cmplti	r2,r2,1
    cad0:	10001d1e 	bne	r2,zero,cb48 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    cad4:	e0bff617 	ldw	r2,-40(fp)
    cad8:	10bfffc4 	addi	r2,r2,-1
    cadc:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    cae0:	e0ffff17 	ldw	r3,-4(fp)
    cae4:	e0bffb17 	ldw	r2,-20(fp)
    cae8:	18800b2e 	bgeu	r3,r2,cb18 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    caec:	e0bffc17 	ldw	r2,-16(fp)
    caf0:	11000104 	addi	r4,r2,4
    caf4:	e0bfff17 	ldw	r2,-4(fp)
    caf8:	10800003 	ldbu	r2,0(r2)
    cafc:	10c03fcc 	andi	r3,r2,255
    cb00:	e0bfff17 	ldw	r2,-4(fp)
    cb04:	10800044 	addi	r2,r2,1
    cb08:	e0bfff15 	stw	r2,-4(fp)
    cb0c:	2005883a 	mov	r2,r4
    cb10:	10c00035 	stwio	r3,0(r2)
    cb14:	00000c06 	br	cb48 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    cb18:	e0bff917 	ldw	r2,-28(fp)
    cb1c:	1005003a 	cmpeq	r2,r2,zero
    cb20:	1000071e 	bne	r2,zero,cb40 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    cb24:	e0bff917 	ldw	r2,-28(fp)
    cb28:	10bfffc4 	addi	r2,r2,-1
    cb2c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    cb30:	e0bffc17 	ldw	r2,-16(fp)
    cb34:	10800104 	addi	r2,r2,4
    cb38:	10000035 	stwio	zero,0(r2)
    cb3c:	00000206 	br	cb48 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    cb40:	00bf0004 	movi	r2,-1024
    cb44:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    cb48:	e0bff717 	ldw	r2,-36(fp)
    cb4c:	1080200c 	andi	r2,r2,128
    cb50:	1005003a 	cmpeq	r2,r2,zero
    cb54:	103fc91e 	bne	r2,zero,ca7c <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    cb58:	e0bffc17 	ldw	r2,-16(fp)
    cb5c:	10800037 	ldwio	r2,0(r2)
    cb60:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    cb64:	e0bff817 	ldw	r2,-32(fp)
    cb68:	1005003a 	cmpeq	r2,r2,zero
    cb6c:	1000041e 	bne	r2,zero,cb80 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    cb70:	e0bff817 	ldw	r2,-32(fp)
    cb74:	10bfffc4 	addi	r2,r2,-1
    cb78:	e0bff815 	stw	r2,-32(fp)
    cb7c:	00000706 	br	cb9c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    cb80:	e0bff517 	ldw	r2,-44(fp)
    cb84:	1007883a 	mov	r3,r2
    cb88:	e0800217 	ldw	r2,8(fp)
    cb8c:	10c00005 	stb	r3,0(r2)
    cb90:	e0800217 	ldw	r2,8(fp)
    cb94:	10800044 	addi	r2,r2,1
    cb98:	e0800215 	stw	r2,8(fp)
      credits++;
    cb9c:	e0bff617 	ldw	r2,-40(fp)
    cba0:	10800044 	addi	r2,r2,1
    cba4:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    cba8:	e0bff817 	ldw	r2,-32(fp)
    cbac:	1004c03a 	cmpne	r2,r2,zero
    cbb0:	103fb21e 	bne	r2,zero,ca7c <alt_avalon_spi_command+0xa0>
    cbb4:	e0c00217 	ldw	r3,8(fp)
    cbb8:	e0bffa17 	ldw	r2,-24(fp)
    cbbc:	18800126 	beq	r3,r2,cbc4 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    cbc0:	003fae06 	br	ca7c <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    cbc4:	e0bffc17 	ldw	r2,-16(fp)
    cbc8:	10800204 	addi	r2,r2,8
    cbcc:	10800037 	ldwio	r2,0(r2)
    cbd0:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    cbd4:	e0bff717 	ldw	r2,-36(fp)
    cbd8:	1080080c 	andi	r2,r2,32
    cbdc:	1005003a 	cmpeq	r2,r2,zero
    cbe0:	103ff81e 	bne	r2,zero,cbc4 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    cbe4:	e0800317 	ldw	r2,12(fp)
    cbe8:	1080004c 	andi	r2,r2,1
    cbec:	1004c03a 	cmpne	r2,r2,zero
    cbf0:	1000031e 	bne	r2,zero,cc00 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    cbf4:	e0bffc17 	ldw	r2,-16(fp)
    cbf8:	10800304 	addi	r2,r2,12
    cbfc:	10000035 	stwio	zero,0(r2)

  return read_length;
    cc00:	e0800117 	ldw	r2,4(fp)
}
    cc04:	e037883a 	mov	sp,fp
    cc08:	df000017 	ldw	fp,0(sp)
    cc0c:	dec00104 	addi	sp,sp,4
    cc10:	f800283a 	ret

0000cc14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cc14:	defffa04 	addi	sp,sp,-24
    cc18:	dfc00515 	stw	ra,20(sp)
    cc1c:	df000415 	stw	fp,16(sp)
    cc20:	df000404 	addi	fp,sp,16
    cc24:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cc28:	00800074 	movhi	r2,1
    cc2c:	10b83104 	addi	r2,r2,-7996
    cc30:	10800017 	ldw	r2,0(r2)
    cc34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cc38:	00003306 	br	cd08 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    cc3c:	e0bffd17 	ldw	r2,-12(fp)
    cc40:	11000217 	ldw	r4,8(r2)
    cc44:	00005180 	call	518 <strlen>
    cc48:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    cc4c:	e0bffd17 	ldw	r2,-12(fp)
    cc50:	10c00217 	ldw	r3,8(r2)
    cc54:	e0bffc17 	ldw	r2,-16(fp)
    cc58:	1885883a 	add	r2,r3,r2
    cc5c:	10bfffc4 	addi	r2,r2,-1
    cc60:	10800003 	ldbu	r2,0(r2)
    cc64:	10803fcc 	andi	r2,r2,255
    cc68:	1080201c 	xori	r2,r2,128
    cc6c:	10bfe004 	addi	r2,r2,-128
    cc70:	10800bd8 	cmpnei	r2,r2,47
    cc74:	1000031e 	bne	r2,zero,cc84 <alt_find_file+0x70>
    {
      len -= 1;
    cc78:	e0bffc17 	ldw	r2,-16(fp)
    cc7c:	10bfffc4 	addi	r2,r2,-1
    cc80:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cc84:	e0bffc17 	ldw	r2,-16(fp)
    cc88:	1007883a 	mov	r3,r2
    cc8c:	e0bffe17 	ldw	r2,-8(fp)
    cc90:	1885883a 	add	r2,r3,r2
    cc94:	10800003 	ldbu	r2,0(r2)
    cc98:	10803fcc 	andi	r2,r2,255
    cc9c:	1080201c 	xori	r2,r2,128
    cca0:	10bfe004 	addi	r2,r2,-128
    cca4:	10800be0 	cmpeqi	r2,r2,47
    cca8:	10000a1e 	bne	r2,zero,ccd4 <alt_find_file+0xc0>
    ccac:	e0bffc17 	ldw	r2,-16(fp)
    ccb0:	1007883a 	mov	r3,r2
    ccb4:	e0bffe17 	ldw	r2,-8(fp)
    ccb8:	1885883a 	add	r2,r3,r2
    ccbc:	10800003 	ldbu	r2,0(r2)
    ccc0:	10803fcc 	andi	r2,r2,255
    ccc4:	1080201c 	xori	r2,r2,128
    ccc8:	10bfe004 	addi	r2,r2,-128
    cccc:	1004c03a 	cmpne	r2,r2,zero
    ccd0:	10000a1e 	bne	r2,zero,ccfc <alt_find_file+0xe8>
    ccd4:	e0bffd17 	ldw	r2,-12(fp)
    ccd8:	11000217 	ldw	r4,8(r2)
    ccdc:	e1bffc17 	ldw	r6,-16(fp)
    cce0:	e17ffe17 	ldw	r5,-8(fp)
    cce4:	000ce380 	call	ce38 <memcmp>
    cce8:	1004c03a 	cmpne	r2,r2,zero
    ccec:	1000031e 	bne	r2,zero,ccfc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ccf0:	e0bffd17 	ldw	r2,-12(fp)
    ccf4:	e0bfff15 	stw	r2,-4(fp)
    ccf8:	00000806 	br	cd1c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    ccfc:	e0bffd17 	ldw	r2,-12(fp)
    cd00:	10800017 	ldw	r2,0(r2)
    cd04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cd08:	00c00074 	movhi	r3,1
    cd0c:	18f83104 	addi	r3,r3,-7996
    cd10:	e0bffd17 	ldw	r2,-12(fp)
    cd14:	10ffc91e 	bne	r2,r3,cc3c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cd18:	e03fff15 	stw	zero,-4(fp)
    cd1c:	e0bfff17 	ldw	r2,-4(fp)
}
    cd20:	e037883a 	mov	sp,fp
    cd24:	dfc00117 	ldw	ra,4(sp)
    cd28:	df000017 	ldw	fp,0(sp)
    cd2c:	dec00204 	addi	sp,sp,8
    cd30:	f800283a 	ret

0000cd34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cd34:	defffc04 	addi	sp,sp,-16
    cd38:	df000315 	stw	fp,12(sp)
    cd3c:	df000304 	addi	fp,sp,12
    cd40:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cd44:	00bffa04 	movi	r2,-24
    cd48:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cd4c:	e03ffe15 	stw	zero,-8(fp)
    cd50:	00001e06 	br	cdcc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    cd54:	e0bffe17 	ldw	r2,-8(fp)
    cd58:	00c00074 	movhi	r3,1
    cd5c:	18f76804 	addi	r3,r3,-8800
    cd60:	10800324 	muli	r2,r2,12
    cd64:	10c5883a 	add	r2,r2,r3
    cd68:	10800017 	ldw	r2,0(r2)
    cd6c:	1004c03a 	cmpne	r2,r2,zero
    cd70:	1000131e 	bne	r2,zero,cdc0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    cd74:	e0bffe17 	ldw	r2,-8(fp)
    cd78:	00c00074 	movhi	r3,1
    cd7c:	18f76804 	addi	r3,r3,-8800
    cd80:	10800324 	muli	r2,r2,12
    cd84:	10c7883a 	add	r3,r2,r3
    cd88:	e0bfff17 	ldw	r2,-4(fp)
    cd8c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    cd90:	00800074 	movhi	r2,1
    cd94:	10b83504 	addi	r2,r2,-7980
    cd98:	10c00017 	ldw	r3,0(r2)
    cd9c:	e0bffe17 	ldw	r2,-8(fp)
    cda0:	1880040e 	bge	r3,r2,cdb4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    cda4:	00c00074 	movhi	r3,1
    cda8:	18f83504 	addi	r3,r3,-7980
    cdac:	e0bffe17 	ldw	r2,-8(fp)
    cdb0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    cdb4:	e0bffe17 	ldw	r2,-8(fp)
    cdb8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    cdbc:	00000606 	br	cdd8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cdc0:	e0bffe17 	ldw	r2,-8(fp)
    cdc4:	10800044 	addi	r2,r2,1
    cdc8:	e0bffe15 	stw	r2,-8(fp)
    cdcc:	e0bffe17 	ldw	r2,-8(fp)
    cdd0:	10800810 	cmplti	r2,r2,32
    cdd4:	103fdf1e 	bne	r2,zero,cd54 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cdd8:	e0bffd17 	ldw	r2,-12(fp)
}
    cddc:	e037883a 	mov	sp,fp
    cde0:	df000017 	ldw	fp,0(sp)
    cde4:	dec00104 	addi	sp,sp,4
    cde8:	f800283a 	ret

0000cdec <atexit>:
    cdec:	200b883a 	mov	r5,r4
    cdf0:	000d883a 	mov	r6,zero
    cdf4:	0009883a 	mov	r4,zero
    cdf8:	000f883a 	mov	r7,zero
    cdfc:	000ceac1 	jmpi	ceac <__register_exitproc>

0000ce00 <exit>:
    ce00:	defffe04 	addi	sp,sp,-8
    ce04:	000b883a 	mov	r5,zero
    ce08:	dc000015 	stw	r16,0(sp)
    ce0c:	dfc00115 	stw	ra,4(sp)
    ce10:	2021883a 	mov	r16,r4
    ce14:	000cfe40 	call	cfe4 <__call_exitprocs>
    ce18:	00800074 	movhi	r2,1
    ce1c:	10b82c04 	addi	r2,r2,-8016
    ce20:	11000017 	ldw	r4,0(r2)
    ce24:	20800f17 	ldw	r2,60(r4)
    ce28:	10000126 	beq	r2,zero,ce30 <exit+0x30>
    ce2c:	103ee83a 	callr	r2
    ce30:	8009883a 	mov	r4,r16
    ce34:	000d1d40 	call	d1d4 <_exit>

0000ce38 <memcmp>:
    ce38:	00c000c4 	movi	r3,3
    ce3c:	1980032e 	bgeu	r3,r6,ce4c <memcmp+0x14>
    ce40:	2144b03a 	or	r2,r4,r5
    ce44:	10c4703a 	and	r2,r2,r3
    ce48:	10000f26 	beq	r2,zero,ce88 <memcmp+0x50>
    ce4c:	31ffffc4 	addi	r7,r6,-1
    ce50:	3000061e 	bne	r6,zero,ce6c <memcmp+0x34>
    ce54:	00000a06 	br	ce80 <memcmp+0x48>
    ce58:	39ffffc4 	addi	r7,r7,-1
    ce5c:	00bfffc4 	movi	r2,-1
    ce60:	21000044 	addi	r4,r4,1
    ce64:	29400044 	addi	r5,r5,1
    ce68:	38800526 	beq	r7,r2,ce80 <memcmp+0x48>
    ce6c:	20c00003 	ldbu	r3,0(r4)
    ce70:	28800003 	ldbu	r2,0(r5)
    ce74:	18bff826 	beq	r3,r2,ce58 <memcmp+0x20>
    ce78:	1885c83a 	sub	r2,r3,r2
    ce7c:	f800283a 	ret
    ce80:	0005883a 	mov	r2,zero
    ce84:	f800283a 	ret
    ce88:	180f883a 	mov	r7,r3
    ce8c:	20c00017 	ldw	r3,0(r4)
    ce90:	28800017 	ldw	r2,0(r5)
    ce94:	18bfed1e 	bne	r3,r2,ce4c <memcmp+0x14>
    ce98:	31bfff04 	addi	r6,r6,-4
    ce9c:	21000104 	addi	r4,r4,4
    cea0:	29400104 	addi	r5,r5,4
    cea4:	39bff936 	bltu	r7,r6,ce8c <memcmp+0x54>
    cea8:	003fe806 	br	ce4c <memcmp+0x14>

0000ceac <__register_exitproc>:
    ceac:	defffa04 	addi	sp,sp,-24
    ceb0:	00800074 	movhi	r2,1
    ceb4:	10b82c04 	addi	r2,r2,-8016
    ceb8:	dc000015 	stw	r16,0(sp)
    cebc:	14000017 	ldw	r16,0(r2)
    cec0:	dd000415 	stw	r20,16(sp)
    cec4:	2829883a 	mov	r20,r5
    cec8:	81405217 	ldw	r5,328(r16)
    cecc:	dcc00315 	stw	r19,12(sp)
    ced0:	dc800215 	stw	r18,8(sp)
    ced4:	dc400115 	stw	r17,4(sp)
    ced8:	dfc00515 	stw	ra,20(sp)
    cedc:	2023883a 	mov	r17,r4
    cee0:	3027883a 	mov	r19,r6
    cee4:	3825883a 	mov	r18,r7
    cee8:	28002526 	beq	r5,zero,cf80 <__register_exitproc+0xd4>
    ceec:	29000117 	ldw	r4,4(r5)
    cef0:	008007c4 	movi	r2,31
    cef4:	11002716 	blt	r2,r4,cf94 <__register_exitproc+0xe8>
    cef8:	8800101e 	bne	r17,zero,cf3c <__register_exitproc+0x90>
    cefc:	2105883a 	add	r2,r4,r4
    cf00:	1085883a 	add	r2,r2,r2
    cf04:	20c00044 	addi	r3,r4,1
    cf08:	1145883a 	add	r2,r2,r5
    cf0c:	0009883a 	mov	r4,zero
    cf10:	15000215 	stw	r20,8(r2)
    cf14:	28c00115 	stw	r3,4(r5)
    cf18:	2005883a 	mov	r2,r4
    cf1c:	dfc00517 	ldw	ra,20(sp)
    cf20:	dd000417 	ldw	r20,16(sp)
    cf24:	dcc00317 	ldw	r19,12(sp)
    cf28:	dc800217 	ldw	r18,8(sp)
    cf2c:	dc400117 	ldw	r17,4(sp)
    cf30:	dc000017 	ldw	r16,0(sp)
    cf34:	dec00604 	addi	sp,sp,24
    cf38:	f800283a 	ret
    cf3c:	29802204 	addi	r6,r5,136
    cf40:	00800044 	movi	r2,1
    cf44:	110e983a 	sll	r7,r2,r4
    cf48:	30c04017 	ldw	r3,256(r6)
    cf4c:	2105883a 	add	r2,r4,r4
    cf50:	1085883a 	add	r2,r2,r2
    cf54:	1185883a 	add	r2,r2,r6
    cf58:	19c6b03a 	or	r3,r3,r7
    cf5c:	14802015 	stw	r18,128(r2)
    cf60:	14c00015 	stw	r19,0(r2)
    cf64:	00800084 	movi	r2,2
    cf68:	30c04015 	stw	r3,256(r6)
    cf6c:	88bfe31e 	bne	r17,r2,cefc <__register_exitproc+0x50>
    cf70:	30804117 	ldw	r2,260(r6)
    cf74:	11c4b03a 	or	r2,r2,r7
    cf78:	30804115 	stw	r2,260(r6)
    cf7c:	003fdf06 	br	cefc <__register_exitproc+0x50>
    cf80:	00800074 	movhi	r2,1
    cf84:	10b89004 	addi	r2,r2,-7616
    cf88:	100b883a 	mov	r5,r2
    cf8c:	80805215 	stw	r2,328(r16)
    cf90:	003fd606 	br	ceec <__register_exitproc+0x40>
    cf94:	00800034 	movhi	r2,0
    cf98:	10800004 	addi	r2,r2,0
    cf9c:	1000021e 	bne	r2,zero,cfa8 <__register_exitproc+0xfc>
    cfa0:	013fffc4 	movi	r4,-1
    cfa4:	003fdc06 	br	cf18 <__register_exitproc+0x6c>
    cfa8:	01006404 	movi	r4,400
    cfac:	103ee83a 	callr	r2
    cfb0:	1007883a 	mov	r3,r2
    cfb4:	103ffa26 	beq	r2,zero,cfa0 <__register_exitproc+0xf4>
    cfb8:	80805217 	ldw	r2,328(r16)
    cfbc:	180b883a 	mov	r5,r3
    cfc0:	18000115 	stw	zero,4(r3)
    cfc4:	18800015 	stw	r2,0(r3)
    cfc8:	80c05215 	stw	r3,328(r16)
    cfcc:	18006215 	stw	zero,392(r3)
    cfd0:	18006315 	stw	zero,396(r3)
    cfd4:	0009883a 	mov	r4,zero
    cfd8:	883fc826 	beq	r17,zero,cefc <__register_exitproc+0x50>
    cfdc:	003fd706 	br	cf3c <__register_exitproc+0x90>

0000cfe0 <register_fini>:
    cfe0:	f800283a 	ret

0000cfe4 <__call_exitprocs>:
    cfe4:	00800074 	movhi	r2,1
    cfe8:	10b82c04 	addi	r2,r2,-8016
    cfec:	10800017 	ldw	r2,0(r2)
    cff0:	defff304 	addi	sp,sp,-52
    cff4:	df000b15 	stw	fp,44(sp)
    cff8:	d8800115 	stw	r2,4(sp)
    cffc:	00800034 	movhi	r2,0
    d000:	10800004 	addi	r2,r2,0
    d004:	1005003a 	cmpeq	r2,r2,zero
    d008:	d8800215 	stw	r2,8(sp)
    d00c:	d8800117 	ldw	r2,4(sp)
    d010:	dd400815 	stw	r21,32(sp)
    d014:	dd000715 	stw	r20,28(sp)
    d018:	10805204 	addi	r2,r2,328
    d01c:	dfc00c15 	stw	ra,48(sp)
    d020:	ddc00a15 	stw	r23,40(sp)
    d024:	dd800915 	stw	r22,36(sp)
    d028:	dcc00615 	stw	r19,24(sp)
    d02c:	dc800515 	stw	r18,20(sp)
    d030:	dc400415 	stw	r17,16(sp)
    d034:	dc000315 	stw	r16,12(sp)
    d038:	282b883a 	mov	r21,r5
    d03c:	2039883a 	mov	fp,r4
    d040:	d8800015 	stw	r2,0(sp)
    d044:	2829003a 	cmpeq	r20,r5,zero
    d048:	d8800117 	ldw	r2,4(sp)
    d04c:	14405217 	ldw	r17,328(r2)
    d050:	88001026 	beq	r17,zero,d094 <__call_exitprocs+0xb0>
    d054:	ddc00017 	ldw	r23,0(sp)
    d058:	88800117 	ldw	r2,4(r17)
    d05c:	8c802204 	addi	r18,r17,136
    d060:	143fffc4 	addi	r16,r2,-1
    d064:	80000916 	blt	r16,zero,d08c <__call_exitprocs+0xa8>
    d068:	05bfffc4 	movi	r22,-1
    d06c:	a000151e 	bne	r20,zero,d0c4 <__call_exitprocs+0xe0>
    d070:	8409883a 	add	r4,r16,r16
    d074:	2105883a 	add	r2,r4,r4
    d078:	1485883a 	add	r2,r2,r18
    d07c:	10c02017 	ldw	r3,128(r2)
    d080:	a8c01126 	beq	r21,r3,d0c8 <__call_exitprocs+0xe4>
    d084:	843fffc4 	addi	r16,r16,-1
    d088:	85bff81e 	bne	r16,r22,d06c <__call_exitprocs+0x88>
    d08c:	d8800217 	ldw	r2,8(sp)
    d090:	10003126 	beq	r2,zero,d158 <__call_exitprocs+0x174>
    d094:	dfc00c17 	ldw	ra,48(sp)
    d098:	df000b17 	ldw	fp,44(sp)
    d09c:	ddc00a17 	ldw	r23,40(sp)
    d0a0:	dd800917 	ldw	r22,36(sp)
    d0a4:	dd400817 	ldw	r21,32(sp)
    d0a8:	dd000717 	ldw	r20,28(sp)
    d0ac:	dcc00617 	ldw	r19,24(sp)
    d0b0:	dc800517 	ldw	r18,20(sp)
    d0b4:	dc400417 	ldw	r17,16(sp)
    d0b8:	dc000317 	ldw	r16,12(sp)
    d0bc:	dec00d04 	addi	sp,sp,52
    d0c0:	f800283a 	ret
    d0c4:	8409883a 	add	r4,r16,r16
    d0c8:	88c00117 	ldw	r3,4(r17)
    d0cc:	2105883a 	add	r2,r4,r4
    d0d0:	1445883a 	add	r2,r2,r17
    d0d4:	18ffffc4 	addi	r3,r3,-1
    d0d8:	11800217 	ldw	r6,8(r2)
    d0dc:	1c001526 	beq	r3,r16,d134 <__call_exitprocs+0x150>
    d0e0:	10000215 	stw	zero,8(r2)
    d0e4:	303fe726 	beq	r6,zero,d084 <__call_exitprocs+0xa0>
    d0e8:	00c00044 	movi	r3,1
    d0ec:	1c06983a 	sll	r3,r3,r16
    d0f0:	90804017 	ldw	r2,256(r18)
    d0f4:	8cc00117 	ldw	r19,4(r17)
    d0f8:	1884703a 	and	r2,r3,r2
    d0fc:	10001426 	beq	r2,zero,d150 <__call_exitprocs+0x16c>
    d100:	90804117 	ldw	r2,260(r18)
    d104:	1884703a 	and	r2,r3,r2
    d108:	10000c1e 	bne	r2,zero,d13c <__call_exitprocs+0x158>
    d10c:	2105883a 	add	r2,r4,r4
    d110:	1485883a 	add	r2,r2,r18
    d114:	11400017 	ldw	r5,0(r2)
    d118:	e009883a 	mov	r4,fp
    d11c:	303ee83a 	callr	r6
    d120:	88800117 	ldw	r2,4(r17)
    d124:	98bfc81e 	bne	r19,r2,d048 <__call_exitprocs+0x64>
    d128:	b8800017 	ldw	r2,0(r23)
    d12c:	147fd526 	beq	r2,r17,d084 <__call_exitprocs+0xa0>
    d130:	003fc506 	br	d048 <__call_exitprocs+0x64>
    d134:	8c000115 	stw	r16,4(r17)
    d138:	003fea06 	br	d0e4 <__call_exitprocs+0x100>
    d13c:	2105883a 	add	r2,r4,r4
    d140:	1485883a 	add	r2,r2,r18
    d144:	11000017 	ldw	r4,0(r2)
    d148:	303ee83a 	callr	r6
    d14c:	003ff406 	br	d120 <__call_exitprocs+0x13c>
    d150:	303ee83a 	callr	r6
    d154:	003ff206 	br	d120 <__call_exitprocs+0x13c>
    d158:	88800117 	ldw	r2,4(r17)
    d15c:	1000081e 	bne	r2,zero,d180 <__call_exitprocs+0x19c>
    d160:	89000017 	ldw	r4,0(r17)
    d164:	20000726 	beq	r4,zero,d184 <__call_exitprocs+0x1a0>
    d168:	b9000015 	stw	r4,0(r23)
    d16c:	8809883a 	mov	r4,r17
    d170:	00000000 	call	0 <__alt_mem_sdram>
    d174:	bc400017 	ldw	r17,0(r23)
    d178:	883fb71e 	bne	r17,zero,d058 <__call_exitprocs+0x74>
    d17c:	003fc506 	br	d094 <__call_exitprocs+0xb0>
    d180:	89000017 	ldw	r4,0(r17)
    d184:	882f883a 	mov	r23,r17
    d188:	2023883a 	mov	r17,r4
    d18c:	883fb21e 	bne	r17,zero,d058 <__call_exitprocs+0x74>
    d190:	003fc006 	br	d094 <__call_exitprocs+0xb0>

0000d194 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    d194:	defffd04 	addi	sp,sp,-12
    d198:	df000215 	stw	fp,8(sp)
    d19c:	df000204 	addi	fp,sp,8
    d1a0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    d1a4:	e0bfff17 	ldw	r2,-4(fp)
    d1a8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d1ac:	e0bffe17 	ldw	r2,-8(fp)
    d1b0:	1005003a 	cmpeq	r2,r2,zero
    d1b4:	1000021e 	bne	r2,zero,d1c0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    d1b8:	002af070 	cmpltui	zero,zero,43969
    d1bc:	00000106 	br	d1c4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    d1c0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    d1c4:	e037883a 	mov	sp,fp
    d1c8:	df000017 	ldw	fp,0(sp)
    d1cc:	dec00104 	addi	sp,sp,4
    d1d0:	f800283a 	ret

0000d1d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d1d4:	defffd04 	addi	sp,sp,-12
    d1d8:	dfc00215 	stw	ra,8(sp)
    d1dc:	df000115 	stw	fp,4(sp)
    d1e0:	df000104 	addi	fp,sp,4
    d1e4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    d1e8:	e13fff17 	ldw	r4,-4(fp)
    d1ec:	000d1940 	call	d194 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d1f0:	003fff06 	br	d1f0 <_exit+0x1c>
    d1f4:	0000cfe0 	cmpeqi	zero,zero,831
