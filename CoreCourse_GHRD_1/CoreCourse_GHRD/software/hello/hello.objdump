
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005418 memsz 0x00005418 flags r-x
    LOAD off    0x00006438 vaddr 0x00005438 paddr 0x00005edc align 2**12
         filesz 0x00000aa4 memsz 0x00000aa4 flags rw-
    LOAD off    0x00007980 vaddr 0x00006980 paddr 0x00006980 align 2**12
         filesz 0x00000000 memsz 0x000002d8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005244  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  000053f8  000053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000aa4  00005438  00005edc  00006438  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002d8  00006980  00006980  00007980  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00006f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000caf  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000189e2  00000000  00000000  00008487  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004b8e  00000000  00000000  00020e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c148  00000000  00000000  000259f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001044  00000000  00000000  00031b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016a5  00000000  00000000  00032b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003fb0  00000000  00000000  00034229  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000381dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a84b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003a84e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a853  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a854  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  0003a855  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  0003a85b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  0003a861  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0003a867  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0003a86f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00031f63  00000000  00000000  0003a8a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000053f8 l    d  .rodata	00000000 .rodata
00005438 l    d  .rwdata	00000000 .rwdata
00006980 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00005438 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001bd4 l     F .text	00000058 std
00001ce0 l     F .text	00000008 __fp_lock
00001ce8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00002ca8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002d08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00002e08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00002f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003164 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003390 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00005ed4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000365c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005de8 l     O .rwdata	000000c4 uart_0
00003734 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000392c l     F .text	0000009c altera_avalon_uart_irq
000039c8 l     F .text	000000e0 altera_avalon_uart_rxirq
00003aa8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00003e94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000040bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004360 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004784 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000048c0 l     F .text	000000dc alt_file_locked
00004b24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00005094 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00005248 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00005394 l     F .text	00000040 alt_sim_halt
00002a4c g     F .text	00000070 _isatty_r
000031c4 g     F .text	0000006c alt_main
0000029c g     F .text	000000a0 _puts_r
000069c8 g     O .bss	00000100 alt_irq
00002abc g     F .text	00000078 _lseek_r
00005edc g       *ABS*	00000000 __flash_rwdata_start
00006c58 g       *ABS*	00000000 __alt_heap_start
00002688 g     F .text	00000068 __sseek
00001c3c g     F .text	000000a4 __sinit
00001d3c g     F .text	00000068 __sfmoreglue
00003250 g     F .text	00000020 __malloc_unlock
00001124 g     F .text	000000e0 memmove
00001d2c g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000029d8 g     F .text	00000074 _fstat_r
0000698c g     O .bss	00000004 errno
00006994 g     O .bss	00000004 alt_argv
0000deac g       *ABS*	00000000 _gp
0000350c g     F .text	00000030 usleep
00005c68 g     O .rwdata	00000180 alt_fd_list
00004ba4 g     F .text	00000094 alt_find_dev
00001084 g     F .text	000000a0 memcpy
00001d20 g     F .text	0000000c _cleanup_r
00004848 g     F .text	00000078 alt_io_redirect
000053f8 g       *ABS*	00000000 __DTOR_END__
0000033c g     F .text	00000014 puts
00000000  w      *UND*	00000000 malloc
00005384 g     F .text	00000008 __udivsi3
00002e68 g     F .text	000000c0 isatty
00004e10 g     F .text	00000090 alt_icache_flush
00006980 g     O .bss	00000004 __malloc_top_pad
000003c4 g     F .text	0000049c __sfvwrite_r
000017f8 g     F .text	00000070 _sbrk_r
00002b34 g     F .text	00000078 _read_r
00005ecc g     O .rwdata	00000004 alt_max_fd
000028b4 g     F .text	00000110 _fclose_r
00001ba0 g     F .text	00000034 fflush
00006984 g     O .bss	00000004 __malloc_max_sbrked_mem
00003074 g     F .text	000000f0 lseek
00005eb0 g     O .rwdata	00000004 _global_impure_ptr
00001204 g     F .text	000005f4 _realloc_r
00006c58 g       *ABS*	00000000 __bss_end
0000468c g     F .text	000000f8 alt_iic_isr_register
00003864 g     F .text	000000c8 altera_avalon_uart_init
00001d08 g     F .text	00000018 __fp_lock_all
00004644 g     F .text	00000048 alt_ic_irq_enabled
0000699c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00005c40 g     O .rwdata	00000028 alt_dev_null
00004268 g     F .text	00000044 alt_dcache_flush_all
00005edc g       *ABS*	00000000 __ram_rwdata_end
00005ec4 g     O .rwdata	00000008 alt_dev_list
0000353c g     F .text	00000120 write
00005438 g       *ABS*	00000000 __ram_rodata_end
00002d34 g     F .text	000000d4 fstat
0000538c g     F .text	00000008 __umodsi3
00006c58 g       *ABS*	00000000 end
00003ef4 g     F .text	000001c8 altera_avalon_uart_write
000053f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
000037c4 g     F .text	00000058 altera_avalon_uart_write_fd
0000381c g     F .text	00000048 altera_avalon_uart_close_fd
00001c2c g     F .text	00000004 __sfp_lock_acquire
00000fa0 g     F .text	000000e4 memchr
00001fc0 g     F .text	00000314 _free_r
00005098 g     F .text	000001b0 __call_exitprocs
00005eb8 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00003270 g     F .text	00000120 read
000036f0 g     F .text	00000044 alt_sys_init
00004f60 g     F .text	00000134 __register_exitproc
00005438 g       *ABS*	00000000 __ram_rwdata_start
000053f8 g       *ABS*	00000000 __ram_rodata_start
000069a0 g     O .bss	00000028 __malloc_current_mallinfo
00004d58 g     F .text	000000b8 alt_get_fd
0000411c g     F .text	0000014c alt_busy_sleep
00002844 g     F .text	00000070 _close_r
00004eec g     F .text	00000074 memcmp
00006c58 g       *ABS*	00000000 __alt_stack_base
00001868 g     F .text	0000013c __swsetup_r
00001da4 g     F .text	000000f0 __sfp
00005838 g     O .rwdata	00000408 __malloc_av_
00001c38 g     F .text	00000004 __sinit_lock_release
0000276c g     F .text	00000060 __sread
00000200 g     F .text	00000044 delay_us
00004c38 g     F .text	00000120 alt_find_file
000042ac g     F .text	000000b4 alt_dev_llist_insert
00003230 g     F .text	00000020 __malloc_lock
00003450 g     F .text	000000bc sbrk
000019a4 g     F .text	000001fc _fflush_r
00006980 g       *ABS*	00000000 __bss_start
000025e8 g     F .text	00000098 memset
00000244 g     F .text	00000058 main
00006998 g     O .bss	00000004 alt_envp
00006988 g     O .bss	00000004 __malloc_max_total_mem
00002680 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
000029c4 g     F .text	00000014 fclose
00006ac8 g     O .bss	00000190 _atexit0
00000860 g     F .text	00000740 _malloc_r
00005ed0 g     O .rwdata	00000004 alt_errno
0000239c g     F .text	000000b8 _fwalk
000052c4 g     F .text	00000060 __divsi3
00001e94 g     F .text	0000012c _malloc_trim_r
000053f8 g       *ABS*	00000000 __CTOR_END__
000053f8 g       *ABS*	00000000 __flash_rodata_start
000053f8 g       *ABS*	00000000 __DTOR_LIST__
000036bc g     F .text	00000034 alt_irq_init
000033f0 g     F .text	00000060 alt_release_fd
00004ea0 g     F .text	00000014 atexit
000027cc g     F .text	00000078 _write_r
00005eac g     O .rwdata	00000004 _impure_ptr
00006990 g     O .bss	00000004 alt_argc
00004424 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00001cf0 g     F .text	00000018 __fp_unlock_all
00005ebc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000044b8 g     F .text	00000050 alt_ic_isr_register
00005edc g       *ABS*	00000000 _edata
0000376c g     F .text	00000058 altera_avalon_uart_read_fd
00006c58 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
000045a4 g     F .text	000000a0 alt_ic_irq_disable
000026f0 g     F .text	0000007c __swrite
00005eb4 g     O .rwdata	00000004 __malloc_trim_threshold
00004b84 g     F .text	00000020 altera_nios2_qsys_irq_init
00004eb4 g     F .text	00000038 exit
000022d4 g     F .text	000000c8 _fwalk_reent
00005324 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001c30 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00003c04 g     F .text	00000060 altera_avalon_uart_close
000053d4 g     F .text	00000020 _exit
00002454 g     F .text	00000194 __smakebuf_r
00000350 g     F .text	00000074 strlen
0000499c g     F .text	00000188 open
00004488 g     F .text	00000030 alt_icache_flush_all
00005ed8 g     O .rwdata	00000004 alt_priority_mask
00004508 g     F .text	0000009c alt_ic_irq_enable
00003c64 g     F .text	00000230 altera_avalon_uart_read
000043c0 g     F .text	00000064 _do_ctors
00002bac g     F .text	000000fc close
00002f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00001c34 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18da7204 	addi	r3,r3,27080
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18da7204 	addi	r3,r3,27080
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1d0:	d6b7ab14 	ori	gp,gp,57004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d8:	109a6014 	ori	r2,r2,27008

    movhi r3, %hi(__bss_end)
     1dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1e0:	18db1614 	ori	r3,r3,27736

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	0002f880 	call	2f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	00031c40 	call	31c4 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <delay_us>:
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "unistd.h"

void delay_us(int n)
{
     200:	defffd04 	addi	sp,sp,-12
     204:	df000215 	stw	fp,8(sp)
     208:	df000204 	addi	fp,sp,8
     20c:	e13fff15 	stw	r4,-4(fp)
	int i;
	i = n;
     210:	e0bfff17 	ldw	r2,-4(fp)
     214:	e0bffe15 	stw	r2,-8(fp)
	while(i)
     218:	00000306 	br	228 <delay_us+0x28>
	{
		i--;
     21c:	e0bffe17 	ldw	r2,-8(fp)
     220:	10bfffc4 	addi	r2,r2,-1
     224:	e0bffe15 	stw	r2,-8(fp)

void delay_us(int n)
{
	int i;
	i = n;
	while(i)
     228:	e0bffe17 	ldw	r2,-8(fp)
     22c:	1004c03a 	cmpne	r2,r2,zero
     230:	103ffa1e 	bne	r2,zero,21c <delay_us+0x1c>
	{
		i--;
	}
}
     234:	e037883a 	mov	sp,fp
     238:	df000017 	ldw	fp,0(sp)
     23c:	dec00104 	addi	sp,sp,4
     240:	f800283a 	ret

00000244 <main>:

int main()
{
     244:	defffe04 	addi	sp,sp,-8
     248:	dfc00115 	stw	ra,4(sp)
     24c:	df000015 	stw	fp,0(sp)
     250:	d839883a 	mov	fp,sp
	printf("Hello from Nios II!\n");
     254:	01000034 	movhi	r4,0
     258:	2114fe04 	addi	r4,r4,21496
     25c:	000033c0 	call	33c <puts>
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 5);
     260:	00c04034 	movhi	r3,256
     264:	18c40004 	addi	r3,r3,4096
     268:	00800144 	movi	r2,5
     26c:	18800035 	stwio	r2,0(r3)
		//delay_us(5000000);
		usleep(500000);
     270:	01000234 	movhi	r4,8
     274:	21284804 	addi	r4,r4,-24288
     278:	000350c0 	call	350c <usleep>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 0xa);
     27c:	00c04034 	movhi	r3,256
     280:	18c40004 	addi	r3,r3,4096
     284:	00800284 	movi	r2,10
     288:	18800035 	stwio	r2,0(r3)
		//delay_us(5000000);
		usleep(500000);
     28c:	01000234 	movhi	r4,8
     290:	21284804 	addi	r4,r4,-24288
     294:	000350c0 	call	350c <usleep>
	}
     298:	003ff106 	br	260 <main+0x1c>

0000029c <_puts_r>:
     29c:	defff604 	addi	sp,sp,-40
     2a0:	dc400715 	stw	r17,28(sp)
     2a4:	2023883a 	mov	r17,r4
     2a8:	2809883a 	mov	r4,r5
     2ac:	dfc00915 	stw	ra,36(sp)
     2b0:	dcc00815 	stw	r19,32(sp)
     2b4:	2827883a 	mov	r19,r5
     2b8:	00003500 	call	350 <strlen>
     2bc:	89400217 	ldw	r5,8(r17)
     2c0:	00c00034 	movhi	r3,0
     2c4:	18d50304 	addi	r3,r3,21516
     2c8:	01c00044 	movi	r7,1
     2cc:	12000044 	addi	r8,r2,1
     2d0:	d8c00515 	stw	r3,20(sp)
     2d4:	d9c00615 	stw	r7,24(sp)
     2d8:	d8c00304 	addi	r3,sp,12
     2dc:	01c00084 	movi	r7,2
     2e0:	8809883a 	mov	r4,r17
     2e4:	d80d883a 	mov	r6,sp
     2e8:	d8c00015 	stw	r3,0(sp)
     2ec:	dcc00315 	stw	r19,12(sp)
     2f0:	da000215 	stw	r8,8(sp)
     2f4:	d9c00115 	stw	r7,4(sp)
     2f8:	d8800415 	stw	r2,16(sp)
     2fc:	00003c40 	call	3c4 <__sfvwrite_r>
     300:	00ffffc4 	movi	r3,-1
     304:	10000626 	beq	r2,zero,320 <_puts_r+0x84>
     308:	1805883a 	mov	r2,r3
     30c:	dfc00917 	ldw	ra,36(sp)
     310:	dcc00817 	ldw	r19,32(sp)
     314:	dc400717 	ldw	r17,28(sp)
     318:	dec00a04 	addi	sp,sp,40
     31c:	f800283a 	ret
     320:	00c00284 	movi	r3,10
     324:	1805883a 	mov	r2,r3
     328:	dfc00917 	ldw	ra,36(sp)
     32c:	dcc00817 	ldw	r19,32(sp)
     330:	dc400717 	ldw	r17,28(sp)
     334:	dec00a04 	addi	sp,sp,40
     338:	f800283a 	ret

0000033c <puts>:
     33c:	00800034 	movhi	r2,0
     340:	1097ab04 	addi	r2,r2,24236
     344:	200b883a 	mov	r5,r4
     348:	11000017 	ldw	r4,0(r2)
     34c:	000029c1 	jmpi	29c <_puts_r>

00000350 <strlen>:
     350:	208000cc 	andi	r2,r4,3
     354:	2011883a 	mov	r8,r4
     358:	1000161e 	bne	r2,zero,3b4 <strlen+0x64>
     35c:	20c00017 	ldw	r3,0(r4)
     360:	017fbff4 	movhi	r5,65279
     364:	297fbfc4 	addi	r5,r5,-257
     368:	01e02074 	movhi	r7,32897
     36c:	39e02004 	addi	r7,r7,-32640
     370:	1945883a 	add	r2,r3,r5
     374:	11c4703a 	and	r2,r2,r7
     378:	00c6303a 	nor	r3,zero,r3
     37c:	1886703a 	and	r3,r3,r2
     380:	18000c1e 	bne	r3,zero,3b4 <strlen+0x64>
     384:	280d883a 	mov	r6,r5
     388:	380b883a 	mov	r5,r7
     38c:	21000104 	addi	r4,r4,4
     390:	20800017 	ldw	r2,0(r4)
     394:	1187883a 	add	r3,r2,r6
     398:	1946703a 	and	r3,r3,r5
     39c:	0084303a 	nor	r2,zero,r2
     3a0:	10c4703a 	and	r2,r2,r3
     3a4:	103ff926 	beq	r2,zero,38c <strlen+0x3c>
     3a8:	20800007 	ldb	r2,0(r4)
     3ac:	10000326 	beq	r2,zero,3bc <strlen+0x6c>
     3b0:	21000044 	addi	r4,r4,1
     3b4:	20800007 	ldb	r2,0(r4)
     3b8:	103ffd1e 	bne	r2,zero,3b0 <strlen+0x60>
     3bc:	2205c83a 	sub	r2,r4,r8
     3c0:	f800283a 	ret

000003c4 <__sfvwrite_r>:
     3c4:	30800217 	ldw	r2,8(r6)
     3c8:	defff504 	addi	sp,sp,-44
     3cc:	df000915 	stw	fp,36(sp)
     3d0:	dd800715 	stw	r22,28(sp)
     3d4:	dc800315 	stw	r18,12(sp)
     3d8:	dfc00a15 	stw	ra,40(sp)
     3dc:	ddc00815 	stw	r23,32(sp)
     3e0:	dd400615 	stw	r21,24(sp)
     3e4:	dd000515 	stw	r20,20(sp)
     3e8:	dcc00415 	stw	r19,16(sp)
     3ec:	dc400215 	stw	r17,8(sp)
     3f0:	dc000115 	stw	r16,4(sp)
     3f4:	302d883a 	mov	r22,r6
     3f8:	2039883a 	mov	fp,r4
     3fc:	2825883a 	mov	r18,r5
     400:	10001c26 	beq	r2,zero,474 <__sfvwrite_r+0xb0>
     404:	29c0030b 	ldhu	r7,12(r5)
     408:	3880020c 	andi	r2,r7,8
     40c:	10002726 	beq	r2,zero,4ac <__sfvwrite_r+0xe8>
     410:	28800417 	ldw	r2,16(r5)
     414:	10002526 	beq	r2,zero,4ac <__sfvwrite_r+0xe8>
     418:	3880008c 	andi	r2,r7,2
     41c:	b5400017 	ldw	r21,0(r22)
     420:	10002826 	beq	r2,zero,4c4 <__sfvwrite_r+0x100>
     424:	0021883a 	mov	r16,zero
     428:	0023883a 	mov	r17,zero
     42c:	880d883a 	mov	r6,r17
     430:	e009883a 	mov	r4,fp
     434:	00810004 	movi	r2,1024
     438:	80006e26 	beq	r16,zero,5f4 <__sfvwrite_r+0x230>
     43c:	800f883a 	mov	r7,r16
     440:	91400717 	ldw	r5,28(r18)
     444:	1400012e 	bgeu	r2,r16,44c <__sfvwrite_r+0x88>
     448:	100f883a 	mov	r7,r2
     44c:	90c00917 	ldw	r3,36(r18)
     450:	183ee83a 	callr	r3
     454:	1007883a 	mov	r3,r2
     458:	80a1c83a 	sub	r16,r16,r2
     45c:	88a3883a 	add	r17,r17,r2
     460:	00806d0e 	bge	zero,r2,618 <__sfvwrite_r+0x254>
     464:	b0800217 	ldw	r2,8(r22)
     468:	10c5c83a 	sub	r2,r2,r3
     46c:	b0800215 	stw	r2,8(r22)
     470:	103fee1e 	bne	r2,zero,42c <__sfvwrite_r+0x68>
     474:	0009883a 	mov	r4,zero
     478:	2005883a 	mov	r2,r4
     47c:	dfc00a17 	ldw	ra,40(sp)
     480:	df000917 	ldw	fp,36(sp)
     484:	ddc00817 	ldw	r23,32(sp)
     488:	dd800717 	ldw	r22,28(sp)
     48c:	dd400617 	ldw	r21,24(sp)
     490:	dd000517 	ldw	r20,20(sp)
     494:	dcc00417 	ldw	r19,16(sp)
     498:	dc800317 	ldw	r18,12(sp)
     49c:	dc400217 	ldw	r17,8(sp)
     4a0:	dc000117 	ldw	r16,4(sp)
     4a4:	dec00b04 	addi	sp,sp,44
     4a8:	f800283a 	ret
     4ac:	00018680 	call	1868 <__swsetup_r>
     4b0:	1000e41e 	bne	r2,zero,844 <__sfvwrite_r+0x480>
     4b4:	91c0030b 	ldhu	r7,12(r18)
     4b8:	b5400017 	ldw	r21,0(r22)
     4bc:	3880008c 	andi	r2,r7,2
     4c0:	103fd81e 	bne	r2,zero,424 <__sfvwrite_r+0x60>
     4c4:	3880004c 	andi	r2,r7,1
     4c8:	1005003a 	cmpeq	r2,r2,zero
     4cc:	10005726 	beq	r2,zero,62c <__sfvwrite_r+0x268>
     4d0:	0029883a 	mov	r20,zero
     4d4:	002f883a 	mov	r23,zero
     4d8:	a0004226 	beq	r20,zero,5e4 <__sfvwrite_r+0x220>
     4dc:	3880800c 	andi	r2,r7,512
     4e0:	94000217 	ldw	r16,8(r18)
     4e4:	10008b26 	beq	r2,zero,714 <__sfvwrite_r+0x350>
     4e8:	800d883a 	mov	r6,r16
     4ec:	a400a536 	bltu	r20,r16,784 <__sfvwrite_r+0x3c0>
     4f0:	3881200c 	andi	r2,r7,1152
     4f4:	10002726 	beq	r2,zero,594 <__sfvwrite_r+0x1d0>
     4f8:	90800517 	ldw	r2,20(r18)
     4fc:	92000417 	ldw	r8,16(r18)
     500:	91400017 	ldw	r5,0(r18)
     504:	1087883a 	add	r3,r2,r2
     508:	1887883a 	add	r3,r3,r2
     50c:	1808d7fa 	srli	r4,r3,31
     510:	2a21c83a 	sub	r16,r5,r8
     514:	80800044 	addi	r2,r16,1
     518:	20c9883a 	add	r4,r4,r3
     51c:	2027d07a 	srai	r19,r4,1
     520:	a085883a 	add	r2,r20,r2
     524:	980d883a 	mov	r6,r19
     528:	9880022e 	bgeu	r19,r2,534 <__sfvwrite_r+0x170>
     52c:	1027883a 	mov	r19,r2
     530:	100d883a 	mov	r6,r2
     534:	3881000c 	andi	r2,r7,1024
     538:	1000b826 	beq	r2,zero,81c <__sfvwrite_r+0x458>
     53c:	300b883a 	mov	r5,r6
     540:	e009883a 	mov	r4,fp
     544:	00008600 	call	860 <_malloc_r>
     548:	10003126 	beq	r2,zero,610 <__sfvwrite_r+0x24c>
     54c:	91400417 	ldw	r5,16(r18)
     550:	1009883a 	mov	r4,r2
     554:	800d883a 	mov	r6,r16
     558:	1023883a 	mov	r17,r2
     55c:	00010840 	call	1084 <memcpy>
     560:	90c0030b 	ldhu	r3,12(r18)
     564:	00beffc4 	movi	r2,-1025
     568:	1886703a 	and	r3,r3,r2
     56c:	18c02014 	ori	r3,r3,128
     570:	90c0030d 	sth	r3,12(r18)
     574:	9c07c83a 	sub	r3,r19,r16
     578:	8c05883a 	add	r2,r17,r16
     57c:	a00d883a 	mov	r6,r20
     580:	a021883a 	mov	r16,r20
     584:	90800015 	stw	r2,0(r18)
     588:	90c00215 	stw	r3,8(r18)
     58c:	94400415 	stw	r17,16(r18)
     590:	94c00515 	stw	r19,20(r18)
     594:	91000017 	ldw	r4,0(r18)
     598:	b80b883a 	mov	r5,r23
     59c:	a023883a 	mov	r17,r20
     5a0:	00011240 	call	1124 <memmove>
     5a4:	90c00217 	ldw	r3,8(r18)
     5a8:	90800017 	ldw	r2,0(r18)
     5ac:	a027883a 	mov	r19,r20
     5b0:	1c07c83a 	sub	r3,r3,r16
     5b4:	1405883a 	add	r2,r2,r16
     5b8:	90c00215 	stw	r3,8(r18)
     5bc:	a021883a 	mov	r16,r20
     5c0:	90800015 	stw	r2,0(r18)
     5c4:	b0800217 	ldw	r2,8(r22)
     5c8:	1405c83a 	sub	r2,r2,r16
     5cc:	b0800215 	stw	r2,8(r22)
     5d0:	103fa826 	beq	r2,zero,474 <__sfvwrite_r+0xb0>
     5d4:	a469c83a 	sub	r20,r20,r17
     5d8:	91c0030b 	ldhu	r7,12(r18)
     5dc:	bcef883a 	add	r23,r23,r19
     5e0:	a03fbe1e 	bne	r20,zero,4dc <__sfvwrite_r+0x118>
     5e4:	adc00017 	ldw	r23,0(r21)
     5e8:	ad000117 	ldw	r20,4(r21)
     5ec:	ad400204 	addi	r21,r21,8
     5f0:	003fb906 	br	4d8 <__sfvwrite_r+0x114>
     5f4:	ac400017 	ldw	r17,0(r21)
     5f8:	ac000117 	ldw	r16,4(r21)
     5fc:	ad400204 	addi	r21,r21,8
     600:	003f8a06 	br	42c <__sfvwrite_r+0x68>
     604:	91400417 	ldw	r5,16(r18)
     608:	e009883a 	mov	r4,fp
     60c:	0001fc00 	call	1fc0 <_free_r>
     610:	00800304 	movi	r2,12
     614:	e0800015 	stw	r2,0(fp)
     618:	9080030b 	ldhu	r2,12(r18)
     61c:	013fffc4 	movi	r4,-1
     620:	10801014 	ori	r2,r2,64
     624:	9080030d 	sth	r2,12(r18)
     628:	003f9306 	br	478 <__sfvwrite_r+0xb4>
     62c:	0027883a 	mov	r19,zero
     630:	002f883a 	mov	r23,zero
     634:	d8000015 	stw	zero,0(sp)
     638:	0029883a 	mov	r20,zero
     63c:	98001e26 	beq	r19,zero,6b8 <__sfvwrite_r+0x2f4>
     640:	d8c00017 	ldw	r3,0(sp)
     644:	1804c03a 	cmpne	r2,r3,zero
     648:	10005e26 	beq	r2,zero,7c4 <__sfvwrite_r+0x400>
     64c:	9821883a 	mov	r16,r19
     650:	a4c0012e 	bgeu	r20,r19,658 <__sfvwrite_r+0x294>
     654:	a021883a 	mov	r16,r20
     658:	91000017 	ldw	r4,0(r18)
     65c:	90800417 	ldw	r2,16(r18)
     660:	91800217 	ldw	r6,8(r18)
     664:	91c00517 	ldw	r7,20(r18)
     668:	1100022e 	bgeu	r2,r4,674 <__sfvwrite_r+0x2b0>
     66c:	31e3883a 	add	r17,r6,r7
     670:	8c001616 	blt	r17,r16,6cc <__sfvwrite_r+0x308>
     674:	81c03816 	blt	r16,r7,758 <__sfvwrite_r+0x394>
     678:	90c00917 	ldw	r3,36(r18)
     67c:	91400717 	ldw	r5,28(r18)
     680:	e009883a 	mov	r4,fp
     684:	b80d883a 	mov	r6,r23
     688:	183ee83a 	callr	r3
     68c:	1023883a 	mov	r17,r2
     690:	00bfe10e 	bge	zero,r2,618 <__sfvwrite_r+0x254>
     694:	a469c83a 	sub	r20,r20,r17
     698:	a0001826 	beq	r20,zero,6fc <__sfvwrite_r+0x338>
     69c:	b0800217 	ldw	r2,8(r22)
     6a0:	1445c83a 	sub	r2,r2,r17
     6a4:	b0800215 	stw	r2,8(r22)
     6a8:	103f7226 	beq	r2,zero,474 <__sfvwrite_r+0xb0>
     6ac:	9c67c83a 	sub	r19,r19,r17
     6b0:	bc6f883a 	add	r23,r23,r17
     6b4:	983fe21e 	bne	r19,zero,640 <__sfvwrite_r+0x27c>
     6b8:	adc00017 	ldw	r23,0(r21)
     6bc:	acc00117 	ldw	r19,4(r21)
     6c0:	ad400204 	addi	r21,r21,8
     6c4:	d8000015 	stw	zero,0(sp)
     6c8:	003fdc06 	br	63c <__sfvwrite_r+0x278>
     6cc:	b80b883a 	mov	r5,r23
     6d0:	880d883a 	mov	r6,r17
     6d4:	00011240 	call	1124 <memmove>
     6d8:	90c00017 	ldw	r3,0(r18)
     6dc:	e009883a 	mov	r4,fp
     6e0:	900b883a 	mov	r5,r18
     6e4:	1c47883a 	add	r3,r3,r17
     6e8:	90c00015 	stw	r3,0(r18)
     6ec:	00019a40 	call	19a4 <_fflush_r>
     6f0:	103fc91e 	bne	r2,zero,618 <__sfvwrite_r+0x254>
     6f4:	a469c83a 	sub	r20,r20,r17
     6f8:	a03fe81e 	bne	r20,zero,69c <__sfvwrite_r+0x2d8>
     6fc:	e009883a 	mov	r4,fp
     700:	900b883a 	mov	r5,r18
     704:	00019a40 	call	19a4 <_fflush_r>
     708:	103fc31e 	bne	r2,zero,618 <__sfvwrite_r+0x254>
     70c:	d8000015 	stw	zero,0(sp)
     710:	003fe206 	br	69c <__sfvwrite_r+0x2d8>
     714:	91000017 	ldw	r4,0(r18)
     718:	90800417 	ldw	r2,16(r18)
     71c:	1100022e 	bgeu	r2,r4,728 <__sfvwrite_r+0x364>
     720:	8023883a 	mov	r17,r16
     724:	85003136 	bltu	r16,r20,7ec <__sfvwrite_r+0x428>
     728:	91c00517 	ldw	r7,20(r18)
     72c:	a1c01836 	bltu	r20,r7,790 <__sfvwrite_r+0x3cc>
     730:	90c00917 	ldw	r3,36(r18)
     734:	91400717 	ldw	r5,28(r18)
     738:	e009883a 	mov	r4,fp
     73c:	b80d883a 	mov	r6,r23
     740:	183ee83a 	callr	r3
     744:	1021883a 	mov	r16,r2
     748:	00bfb30e 	bge	zero,r2,618 <__sfvwrite_r+0x254>
     74c:	1023883a 	mov	r17,r2
     750:	1027883a 	mov	r19,r2
     754:	003f9b06 	br	5c4 <__sfvwrite_r+0x200>
     758:	b80b883a 	mov	r5,r23
     75c:	800d883a 	mov	r6,r16
     760:	00011240 	call	1124 <memmove>
     764:	90c00217 	ldw	r3,8(r18)
     768:	90800017 	ldw	r2,0(r18)
     76c:	8023883a 	mov	r17,r16
     770:	1c07c83a 	sub	r3,r3,r16
     774:	1405883a 	add	r2,r2,r16
     778:	90c00215 	stw	r3,8(r18)
     77c:	90800015 	stw	r2,0(r18)
     780:	003fc406 	br	694 <__sfvwrite_r+0x2d0>
     784:	a00d883a 	mov	r6,r20
     788:	a021883a 	mov	r16,r20
     78c:	003f8106 	br	594 <__sfvwrite_r+0x1d0>
     790:	b80b883a 	mov	r5,r23
     794:	a00d883a 	mov	r6,r20
     798:	00011240 	call	1124 <memmove>
     79c:	90c00217 	ldw	r3,8(r18)
     7a0:	90800017 	ldw	r2,0(r18)
     7a4:	a021883a 	mov	r16,r20
     7a8:	1d07c83a 	sub	r3,r3,r20
     7ac:	1505883a 	add	r2,r2,r20
     7b0:	a023883a 	mov	r17,r20
     7b4:	a027883a 	mov	r19,r20
     7b8:	90c00215 	stw	r3,8(r18)
     7bc:	90800015 	stw	r2,0(r18)
     7c0:	003f8006 	br	5c4 <__sfvwrite_r+0x200>
     7c4:	b809883a 	mov	r4,r23
     7c8:	01400284 	movi	r5,10
     7cc:	980d883a 	mov	r6,r19
     7d0:	0000fa00 	call	fa0 <memchr>
     7d4:	10001726 	beq	r2,zero,834 <__sfvwrite_r+0x470>
     7d8:	15c5c83a 	sub	r2,r2,r23
     7dc:	15000044 	addi	r20,r2,1
     7e0:	00800044 	movi	r2,1
     7e4:	d8800015 	stw	r2,0(sp)
     7e8:	003f9806 	br	64c <__sfvwrite_r+0x288>
     7ec:	b80b883a 	mov	r5,r23
     7f0:	800d883a 	mov	r6,r16
     7f4:	00011240 	call	1124 <memmove>
     7f8:	90c00017 	ldw	r3,0(r18)
     7fc:	e009883a 	mov	r4,fp
     800:	900b883a 	mov	r5,r18
     804:	1c07883a 	add	r3,r3,r16
     808:	90c00015 	stw	r3,0(r18)
     80c:	8027883a 	mov	r19,r16
     810:	00019a40 	call	19a4 <_fflush_r>
     814:	103f6b26 	beq	r2,zero,5c4 <__sfvwrite_r+0x200>
     818:	003f7f06 	br	618 <__sfvwrite_r+0x254>
     81c:	400b883a 	mov	r5,r8
     820:	e009883a 	mov	r4,fp
     824:	00012040 	call	1204 <_realloc_r>
     828:	103f7626 	beq	r2,zero,604 <__sfvwrite_r+0x240>
     82c:	1023883a 	mov	r17,r2
     830:	003f5006 	br	574 <__sfvwrite_r+0x1b0>
     834:	00c00044 	movi	r3,1
     838:	9d000044 	addi	r20,r19,1
     83c:	d8c00015 	stw	r3,0(sp)
     840:	003f8206 	br	64c <__sfvwrite_r+0x288>
     844:	9080030b 	ldhu	r2,12(r18)
     848:	00c00244 	movi	r3,9
     84c:	013fffc4 	movi	r4,-1
     850:	10801014 	ori	r2,r2,64
     854:	9080030d 	sth	r2,12(r18)
     858:	e0c00015 	stw	r3,0(fp)
     85c:	003f0606 	br	478 <__sfvwrite_r+0xb4>

00000860 <_malloc_r>:
     860:	defff604 	addi	sp,sp,-40
     864:	28c002c4 	addi	r3,r5,11
     868:	00800584 	movi	r2,22
     86c:	dc800215 	stw	r18,8(sp)
     870:	dfc00915 	stw	ra,36(sp)
     874:	df000815 	stw	fp,32(sp)
     878:	ddc00715 	stw	r23,28(sp)
     87c:	dd800615 	stw	r22,24(sp)
     880:	dd400515 	stw	r21,20(sp)
     884:	dd000415 	stw	r20,16(sp)
     888:	dcc00315 	stw	r19,12(sp)
     88c:	dc400115 	stw	r17,4(sp)
     890:	dc000015 	stw	r16,0(sp)
     894:	2025883a 	mov	r18,r4
     898:	10c01236 	bltu	r2,r3,8e4 <_malloc_r+0x84>
     89c:	04400404 	movi	r17,16
     8a0:	8940142e 	bgeu	r17,r5,8f4 <_malloc_r+0x94>
     8a4:	00800304 	movi	r2,12
     8a8:	0007883a 	mov	r3,zero
     8ac:	90800015 	stw	r2,0(r18)
     8b0:	1805883a 	mov	r2,r3
     8b4:	dfc00917 	ldw	ra,36(sp)
     8b8:	df000817 	ldw	fp,32(sp)
     8bc:	ddc00717 	ldw	r23,28(sp)
     8c0:	dd800617 	ldw	r22,24(sp)
     8c4:	dd400517 	ldw	r21,20(sp)
     8c8:	dd000417 	ldw	r20,16(sp)
     8cc:	dcc00317 	ldw	r19,12(sp)
     8d0:	dc800217 	ldw	r18,8(sp)
     8d4:	dc400117 	ldw	r17,4(sp)
     8d8:	dc000017 	ldw	r16,0(sp)
     8dc:	dec00a04 	addi	sp,sp,40
     8e0:	f800283a 	ret
     8e4:	00bffe04 	movi	r2,-8
     8e8:	18a2703a 	and	r17,r3,r2
     8ec:	883fed16 	blt	r17,zero,8a4 <_malloc_r+0x44>
     8f0:	897fec36 	bltu	r17,r5,8a4 <_malloc_r+0x44>
     8f4:	9009883a 	mov	r4,r18
     8f8:	00032300 	call	3230 <__malloc_lock>
     8fc:	00807dc4 	movi	r2,503
     900:	14402b2e 	bgeu	r2,r17,9b0 <_malloc_r+0x150>
     904:	8806d27a 	srli	r3,r17,9
     908:	18003f1e 	bne	r3,zero,a08 <_malloc_r+0x1a8>
     90c:	880cd0fa 	srli	r6,r17,3
     910:	300490fa 	slli	r2,r6,3
     914:	02c00034 	movhi	r11,0
     918:	5ad60e04 	addi	r11,r11,22584
     91c:	12cb883a 	add	r5,r2,r11
     920:	2c000317 	ldw	r16,12(r5)
     924:	580f883a 	mov	r7,r11
     928:	2c00041e 	bne	r5,r16,93c <_malloc_r+0xdc>
     92c:	00000a06 	br	958 <_malloc_r+0xf8>
     930:	1800860e 	bge	r3,zero,b4c <_malloc_r+0x2ec>
     934:	84000317 	ldw	r16,12(r16)
     938:	2c000726 	beq	r5,r16,958 <_malloc_r+0xf8>
     93c:	80800117 	ldw	r2,4(r16)
     940:	00ffff04 	movi	r3,-4
     944:	10c8703a 	and	r4,r2,r3
     948:	2447c83a 	sub	r3,r4,r17
     94c:	008003c4 	movi	r2,15
     950:	10fff70e 	bge	r2,r3,930 <_malloc_r+0xd0>
     954:	31bfffc4 	addi	r6,r6,-1
     958:	32400044 	addi	r9,r6,1
     95c:	02800034 	movhi	r10,0
     960:	52961004 	addi	r10,r10,22592
     964:	54000217 	ldw	r16,8(r10)
     968:	8280a026 	beq	r16,r10,bec <_malloc_r+0x38c>
     96c:	80800117 	ldw	r2,4(r16)
     970:	00ffff04 	movi	r3,-4
     974:	10ca703a 	and	r5,r2,r3
     978:	2c4dc83a 	sub	r6,r5,r17
     97c:	008003c4 	movi	r2,15
     980:	11808316 	blt	r2,r6,b90 <_malloc_r+0x330>
     984:	52800315 	stw	r10,12(r10)
     988:	52800215 	stw	r10,8(r10)
     98c:	30002916 	blt	r6,zero,a34 <_malloc_r+0x1d4>
     990:	8147883a 	add	r3,r16,r5
     994:	18800117 	ldw	r2,4(r3)
     998:	9009883a 	mov	r4,r18
     99c:	10800054 	ori	r2,r2,1
     9a0:	18800115 	stw	r2,4(r3)
     9a4:	00032500 	call	3250 <__malloc_unlock>
     9a8:	80c00204 	addi	r3,r16,8
     9ac:	003fc006 	br	8b0 <_malloc_r+0x50>
     9b0:	02c00034 	movhi	r11,0
     9b4:	5ad60e04 	addi	r11,r11,22584
     9b8:	8ac5883a 	add	r2,r17,r11
     9bc:	14000317 	ldw	r16,12(r2)
     9c0:	580f883a 	mov	r7,r11
     9c4:	8806d0fa 	srli	r3,r17,3
     9c8:	14006c26 	beq	r2,r16,b7c <_malloc_r+0x31c>
     9cc:	80c00117 	ldw	r3,4(r16)
     9d0:	00bfff04 	movi	r2,-4
     9d4:	81800317 	ldw	r6,12(r16)
     9d8:	1886703a 	and	r3,r3,r2
     9dc:	80c7883a 	add	r3,r16,r3
     9e0:	18800117 	ldw	r2,4(r3)
     9e4:	81400217 	ldw	r5,8(r16)
     9e8:	9009883a 	mov	r4,r18
     9ec:	10800054 	ori	r2,r2,1
     9f0:	18800115 	stw	r2,4(r3)
     9f4:	31400215 	stw	r5,8(r6)
     9f8:	29800315 	stw	r6,12(r5)
     9fc:	00032500 	call	3250 <__malloc_unlock>
     a00:	80c00204 	addi	r3,r16,8
     a04:	003faa06 	br	8b0 <_malloc_r+0x50>
     a08:	00800104 	movi	r2,4
     a0c:	10c0052e 	bgeu	r2,r3,a24 <_malloc_r+0x1c4>
     a10:	00800504 	movi	r2,20
     a14:	10c07836 	bltu	r2,r3,bf8 <_malloc_r+0x398>
     a18:	198016c4 	addi	r6,r3,91
     a1c:	300490fa 	slli	r2,r6,3
     a20:	003fbc06 	br	914 <_malloc_r+0xb4>
     a24:	8804d1ba 	srli	r2,r17,6
     a28:	11800e04 	addi	r6,r2,56
     a2c:	300490fa 	slli	r2,r6,3
     a30:	003fb806 	br	914 <_malloc_r+0xb4>
     a34:	00807fc4 	movi	r2,511
     a38:	1140bb36 	bltu	r2,r5,d28 <_malloc_r+0x4c8>
     a3c:	2806d0fa 	srli	r3,r5,3
     a40:	573ffe04 	addi	fp,r10,-8
     a44:	00800044 	movi	r2,1
     a48:	180890fa 	slli	r4,r3,3
     a4c:	1807d0ba 	srai	r3,r3,2
     a50:	e1c00117 	ldw	r7,4(fp)
     a54:	5909883a 	add	r4,r11,r4
     a58:	21400217 	ldw	r5,8(r4)
     a5c:	10c4983a 	sll	r2,r2,r3
     a60:	81000315 	stw	r4,12(r16)
     a64:	81400215 	stw	r5,8(r16)
     a68:	388eb03a 	or	r7,r7,r2
     a6c:	2c000315 	stw	r16,12(r5)
     a70:	24000215 	stw	r16,8(r4)
     a74:	e1c00115 	stw	r7,4(fp)
     a78:	4807883a 	mov	r3,r9
     a7c:	4800cd16 	blt	r9,zero,db4 <_malloc_r+0x554>
     a80:	1807d0ba 	srai	r3,r3,2
     a84:	00800044 	movi	r2,1
     a88:	10c8983a 	sll	r4,r2,r3
     a8c:	39004436 	bltu	r7,r4,ba0 <_malloc_r+0x340>
     a90:	21c4703a 	and	r2,r4,r7
     a94:	10000a1e 	bne	r2,zero,ac0 <_malloc_r+0x260>
     a98:	2109883a 	add	r4,r4,r4
     a9c:	00bfff04 	movi	r2,-4
     aa0:	4884703a 	and	r2,r9,r2
     aa4:	3906703a 	and	r3,r7,r4
     aa8:	12400104 	addi	r9,r2,4
     aac:	1800041e 	bne	r3,zero,ac0 <_malloc_r+0x260>
     ab0:	2109883a 	add	r4,r4,r4
     ab4:	3904703a 	and	r2,r7,r4
     ab8:	4a400104 	addi	r9,r9,4
     abc:	103ffc26 	beq	r2,zero,ab0 <_malloc_r+0x250>
     ac0:	480490fa 	slli	r2,r9,3
     ac4:	4819883a 	mov	r12,r9
     ac8:	023fff04 	movi	r8,-4
     acc:	589b883a 	add	r13,r11,r2
     ad0:	6807883a 	mov	r3,r13
     ad4:	014003c4 	movi	r5,15
     ad8:	1c000317 	ldw	r16,12(r3)
     adc:	1c00041e 	bne	r3,r16,af0 <_malloc_r+0x290>
     ae0:	0000a706 	br	d80 <_malloc_r+0x520>
     ae4:	3000ab0e 	bge	r6,zero,d94 <_malloc_r+0x534>
     ae8:	84000317 	ldw	r16,12(r16)
     aec:	1c00a426 	beq	r3,r16,d80 <_malloc_r+0x520>
     af0:	80800117 	ldw	r2,4(r16)
     af4:	1204703a 	and	r2,r2,r8
     af8:	144dc83a 	sub	r6,r2,r17
     afc:	29bff90e 	bge	r5,r6,ae4 <_malloc_r+0x284>
     b00:	81000317 	ldw	r4,12(r16)
     b04:	80c00217 	ldw	r3,8(r16)
     b08:	89400054 	ori	r5,r17,1
     b0c:	8445883a 	add	r2,r16,r17
     b10:	20c00215 	stw	r3,8(r4)
     b14:	19000315 	stw	r4,12(r3)
     b18:	81400115 	stw	r5,4(r16)
     b1c:	1187883a 	add	r3,r2,r6
     b20:	31000054 	ori	r4,r6,1
     b24:	50800315 	stw	r2,12(r10)
     b28:	50800215 	stw	r2,8(r10)
     b2c:	19800015 	stw	r6,0(r3)
     b30:	11000115 	stw	r4,4(r2)
     b34:	12800215 	stw	r10,8(r2)
     b38:	12800315 	stw	r10,12(r2)
     b3c:	9009883a 	mov	r4,r18
     b40:	00032500 	call	3250 <__malloc_unlock>
     b44:	80c00204 	addi	r3,r16,8
     b48:	003f5906 	br	8b0 <_malloc_r+0x50>
     b4c:	8109883a 	add	r4,r16,r4
     b50:	20800117 	ldw	r2,4(r4)
     b54:	80c00217 	ldw	r3,8(r16)
     b58:	81400317 	ldw	r5,12(r16)
     b5c:	10800054 	ori	r2,r2,1
     b60:	20800115 	stw	r2,4(r4)
     b64:	28c00215 	stw	r3,8(r5)
     b68:	19400315 	stw	r5,12(r3)
     b6c:	9009883a 	mov	r4,r18
     b70:	00032500 	call	3250 <__malloc_unlock>
     b74:	80c00204 	addi	r3,r16,8
     b78:	003f4d06 	br	8b0 <_malloc_r+0x50>
     b7c:	80800204 	addi	r2,r16,8
     b80:	14000317 	ldw	r16,12(r2)
     b84:	143f911e 	bne	r2,r16,9cc <_malloc_r+0x16c>
     b88:	1a400084 	addi	r9,r3,2
     b8c:	003f7306 	br	95c <_malloc_r+0xfc>
     b90:	88c00054 	ori	r3,r17,1
     b94:	8445883a 	add	r2,r16,r17
     b98:	80c00115 	stw	r3,4(r16)
     b9c:	003fdf06 	br	b1c <_malloc_r+0x2bc>
     ba0:	e4000217 	ldw	r16,8(fp)
     ba4:	00bfff04 	movi	r2,-4
     ba8:	80c00117 	ldw	r3,4(r16)
     bac:	802d883a 	mov	r22,r16
     bb0:	18aa703a 	and	r21,r3,r2
     bb4:	ac401636 	bltu	r21,r17,c10 <_malloc_r+0x3b0>
     bb8:	ac49c83a 	sub	r4,r21,r17
     bbc:	008003c4 	movi	r2,15
     bc0:	1100130e 	bge	r2,r4,c10 <_malloc_r+0x3b0>
     bc4:	88800054 	ori	r2,r17,1
     bc8:	8447883a 	add	r3,r16,r17
     bcc:	80800115 	stw	r2,4(r16)
     bd0:	20800054 	ori	r2,r4,1
     bd4:	18800115 	stw	r2,4(r3)
     bd8:	e0c00215 	stw	r3,8(fp)
     bdc:	9009883a 	mov	r4,r18
     be0:	00032500 	call	3250 <__malloc_unlock>
     be4:	80c00204 	addi	r3,r16,8
     be8:	003f3106 	br	8b0 <_malloc_r+0x50>
     bec:	39c00117 	ldw	r7,4(r7)
     bf0:	573ffe04 	addi	fp,r10,-8
     bf4:	003fa006 	br	a78 <_malloc_r+0x218>
     bf8:	00801504 	movi	r2,84
     bfc:	10c06736 	bltu	r2,r3,d9c <_malloc_r+0x53c>
     c00:	8804d33a 	srli	r2,r17,12
     c04:	11801b84 	addi	r6,r2,110
     c08:	300490fa 	slli	r2,r6,3
     c0c:	003f4106 	br	914 <_malloc_r+0xb4>
     c10:	d0a2b517 	ldw	r2,-29996(gp)
     c14:	d0e00317 	ldw	r3,-32756(gp)
     c18:	053fffc4 	movi	r20,-1
     c1c:	10800404 	addi	r2,r2,16
     c20:	88a7883a 	add	r19,r17,r2
     c24:	1d000326 	beq	r3,r20,c34 <_malloc_r+0x3d4>
     c28:	98c3ffc4 	addi	r3,r19,4095
     c2c:	00bc0004 	movi	r2,-4096
     c30:	18a6703a 	and	r19,r3,r2
     c34:	9009883a 	mov	r4,r18
     c38:	980b883a 	mov	r5,r19
     c3c:	00017f80 	call	17f8 <_sbrk_r>
     c40:	1009883a 	mov	r4,r2
     c44:	15000426 	beq	r2,r20,c58 <_malloc_r+0x3f8>
     c48:	854b883a 	add	r5,r16,r21
     c4c:	1029883a 	mov	r20,r2
     c50:	11405a2e 	bgeu	r2,r5,dbc <_malloc_r+0x55c>
     c54:	87000c26 	beq	r16,fp,c88 <_malloc_r+0x428>
     c58:	e4000217 	ldw	r16,8(fp)
     c5c:	80c00117 	ldw	r3,4(r16)
     c60:	00bfff04 	movi	r2,-4
     c64:	1884703a 	and	r2,r3,r2
     c68:	14400336 	bltu	r2,r17,c78 <_malloc_r+0x418>
     c6c:	1449c83a 	sub	r4,r2,r17
     c70:	008003c4 	movi	r2,15
     c74:	113fd316 	blt	r2,r4,bc4 <_malloc_r+0x364>
     c78:	9009883a 	mov	r4,r18
     c7c:	00032500 	call	3250 <__malloc_unlock>
     c80:	0007883a 	mov	r3,zero
     c84:	003f0a06 	br	8b0 <_malloc_r+0x50>
     c88:	05c00034 	movhi	r23,0
     c8c:	bdda6804 	addi	r23,r23,27040
     c90:	b8800017 	ldw	r2,0(r23)
     c94:	988d883a 	add	r6,r19,r2
     c98:	b9800015 	stw	r6,0(r23)
     c9c:	d0e00317 	ldw	r3,-32756(gp)
     ca0:	00bfffc4 	movi	r2,-1
     ca4:	18808e26 	beq	r3,r2,ee0 <_malloc_r+0x680>
     ca8:	2145c83a 	sub	r2,r4,r5
     cac:	3085883a 	add	r2,r6,r2
     cb0:	b8800015 	stw	r2,0(r23)
     cb4:	20c001cc 	andi	r3,r4,7
     cb8:	18005f1e 	bne	r3,zero,e38 <_malloc_r+0x5d8>
     cbc:	000b883a 	mov	r5,zero
     cc0:	a4c5883a 	add	r2,r20,r19
     cc4:	1083ffcc 	andi	r2,r2,4095
     cc8:	00c40004 	movi	r3,4096
     ccc:	1887c83a 	sub	r3,r3,r2
     cd0:	28e7883a 	add	r19,r5,r3
     cd4:	9009883a 	mov	r4,r18
     cd8:	980b883a 	mov	r5,r19
     cdc:	00017f80 	call	17f8 <_sbrk_r>
     ce0:	1007883a 	mov	r3,r2
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	18807a26 	beq	r3,r2,ed4 <_malloc_r+0x674>
     cec:	1d05c83a 	sub	r2,r3,r20
     cf0:	9885883a 	add	r2,r19,r2
     cf4:	10c00054 	ori	r3,r2,1
     cf8:	b8800017 	ldw	r2,0(r23)
     cfc:	a021883a 	mov	r16,r20
     d00:	a0c00115 	stw	r3,4(r20)
     d04:	9885883a 	add	r2,r19,r2
     d08:	b8800015 	stw	r2,0(r23)
     d0c:	e5000215 	stw	r20,8(fp)
     d10:	b7003626 	beq	r22,fp,dec <_malloc_r+0x58c>
     d14:	018003c4 	movi	r6,15
     d18:	35404b36 	bltu	r6,r21,e48 <_malloc_r+0x5e8>
     d1c:	00800044 	movi	r2,1
     d20:	a0800115 	stw	r2,4(r20)
     d24:	003fcd06 	br	c5c <_malloc_r+0x3fc>
     d28:	2808d27a 	srli	r4,r5,9
     d2c:	2000371e 	bne	r4,zero,e0c <_malloc_r+0x5ac>
     d30:	2808d0fa 	srli	r4,r5,3
     d34:	200690fa 	slli	r3,r4,3
     d38:	1ad1883a 	add	r8,r3,r11
     d3c:	41800217 	ldw	r6,8(r8)
     d40:	41805b26 	beq	r8,r6,eb0 <_malloc_r+0x650>
     d44:	30800117 	ldw	r2,4(r6)
     d48:	00ffff04 	movi	r3,-4
     d4c:	10c4703a 	and	r2,r2,r3
     d50:	2880022e 	bgeu	r5,r2,d5c <_malloc_r+0x4fc>
     d54:	31800217 	ldw	r6,8(r6)
     d58:	41bffa1e 	bne	r8,r6,d44 <_malloc_r+0x4e4>
     d5c:	32000317 	ldw	r8,12(r6)
     d60:	39c00117 	ldw	r7,4(r7)
     d64:	82000315 	stw	r8,12(r16)
     d68:	81800215 	stw	r6,8(r16)
     d6c:	07000034 	movhi	fp,0
     d70:	e7160e04 	addi	fp,fp,22584
     d74:	34000315 	stw	r16,12(r6)
     d78:	44000215 	stw	r16,8(r8)
     d7c:	003f3e06 	br	a78 <_malloc_r+0x218>
     d80:	63000044 	addi	r12,r12,1
     d84:	608000cc 	andi	r2,r12,3
     d88:	10005d26 	beq	r2,zero,f00 <_malloc_r+0x6a0>
     d8c:	18c00204 	addi	r3,r3,8
     d90:	003f5106 	br	ad8 <_malloc_r+0x278>
     d94:	8089883a 	add	r4,r16,r2
     d98:	003f6d06 	br	b50 <_malloc_r+0x2f0>
     d9c:	00805504 	movi	r2,340
     da0:	10c02036 	bltu	r2,r3,e24 <_malloc_r+0x5c4>
     da4:	8804d3fa 	srli	r2,r17,15
     da8:	11801dc4 	addi	r6,r2,119
     dac:	300490fa 	slli	r2,r6,3
     db0:	003ed806 	br	914 <_malloc_r+0xb4>
     db4:	48c000c4 	addi	r3,r9,3
     db8:	003f3106 	br	a80 <_malloc_r+0x220>
     dbc:	05c00034 	movhi	r23,0
     dc0:	bdda6804 	addi	r23,r23,27040
     dc4:	b8800017 	ldw	r2,0(r23)
     dc8:	988d883a 	add	r6,r19,r2
     dcc:	b9800015 	stw	r6,0(r23)
     dd0:	293fb21e 	bne	r5,r4,c9c <_malloc_r+0x43c>
     dd4:	2083ffcc 	andi	r2,r4,4095
     dd8:	103fb01e 	bne	r2,zero,c9c <_malloc_r+0x43c>
     ddc:	e4000217 	ldw	r16,8(fp)
     de0:	9d45883a 	add	r2,r19,r21
     de4:	10800054 	ori	r2,r2,1
     de8:	80800115 	stw	r2,4(r16)
     dec:	b8c00017 	ldw	r3,0(r23)
     df0:	d0a2b617 	ldw	r2,-29992(gp)
     df4:	10c0012e 	bgeu	r2,r3,dfc <_malloc_r+0x59c>
     df8:	d0e2b615 	stw	r3,-29992(gp)
     dfc:	d0a2b717 	ldw	r2,-29988(gp)
     e00:	10ff962e 	bgeu	r2,r3,c5c <_malloc_r+0x3fc>
     e04:	d0e2b715 	stw	r3,-29988(gp)
     e08:	003f9406 	br	c5c <_malloc_r+0x3fc>
     e0c:	00800104 	movi	r2,4
     e10:	11001e36 	bltu	r2,r4,e8c <_malloc_r+0x62c>
     e14:	2804d1ba 	srli	r2,r5,6
     e18:	11000e04 	addi	r4,r2,56
     e1c:	200690fa 	slli	r3,r4,3
     e20:	003fc506 	br	d38 <_malloc_r+0x4d8>
     e24:	00815504 	movi	r2,1364
     e28:	10c01d2e 	bgeu	r2,r3,ea0 <_malloc_r+0x640>
     e2c:	01801f84 	movi	r6,126
     e30:	0080fc04 	movi	r2,1008
     e34:	003eb706 	br	914 <_malloc_r+0xb4>
     e38:	00800204 	movi	r2,8
     e3c:	10cbc83a 	sub	r5,r2,r3
     e40:	2169883a 	add	r20,r4,r5
     e44:	003f9e06 	br	cc0 <_malloc_r+0x460>
     e48:	00bffe04 	movi	r2,-8
     e4c:	a93ffd04 	addi	r4,r21,-12
     e50:	2088703a 	and	r4,r4,r2
     e54:	b10b883a 	add	r5,r22,r4
     e58:	00c00144 	movi	r3,5
     e5c:	28c00215 	stw	r3,8(r5)
     e60:	28c00115 	stw	r3,4(r5)
     e64:	b0800117 	ldw	r2,4(r22)
     e68:	1080004c 	andi	r2,r2,1
     e6c:	2084b03a 	or	r2,r4,r2
     e70:	b0800115 	stw	r2,4(r22)
     e74:	313fdd2e 	bgeu	r6,r4,dec <_malloc_r+0x58c>
     e78:	b1400204 	addi	r5,r22,8
     e7c:	9009883a 	mov	r4,r18
     e80:	0001fc00 	call	1fc0 <_free_r>
     e84:	e4000217 	ldw	r16,8(fp)
     e88:	003fd806 	br	dec <_malloc_r+0x58c>
     e8c:	00800504 	movi	r2,20
     e90:	11001536 	bltu	r2,r4,ee8 <_malloc_r+0x688>
     e94:	210016c4 	addi	r4,r4,91
     e98:	200690fa 	slli	r3,r4,3
     e9c:	003fa606 	br	d38 <_malloc_r+0x4d8>
     ea0:	8804d4ba 	srli	r2,r17,18
     ea4:	11801f04 	addi	r6,r2,124
     ea8:	300490fa 	slli	r2,r6,3
     eac:	003e9906 	br	914 <_malloc_r+0xb4>
     eb0:	2009d0ba 	srai	r4,r4,2
     eb4:	01400034 	movhi	r5,0
     eb8:	29560e04 	addi	r5,r5,22584
     ebc:	00c00044 	movi	r3,1
     ec0:	28800117 	ldw	r2,4(r5)
     ec4:	1906983a 	sll	r3,r3,r4
     ec8:	10c4b03a 	or	r2,r2,r3
     ecc:	28800115 	stw	r2,4(r5)
     ed0:	003fa306 	br	d60 <_malloc_r+0x500>
     ed4:	0027883a 	mov	r19,zero
     ed8:	00c00044 	movi	r3,1
     edc:	003f8606 	br	cf8 <_malloc_r+0x498>
     ee0:	d1200315 	stw	r4,-32756(gp)
     ee4:	003f7306 	br	cb4 <_malloc_r+0x454>
     ee8:	00801504 	movi	r2,84
     eec:	11001936 	bltu	r2,r4,f54 <_malloc_r+0x6f4>
     ef0:	2804d33a 	srli	r2,r5,12
     ef4:	11001b84 	addi	r4,r2,110
     ef8:	200690fa 	slli	r3,r4,3
     efc:	003f8e06 	br	d38 <_malloc_r+0x4d8>
     f00:	480b883a 	mov	r5,r9
     f04:	6807883a 	mov	r3,r13
     f08:	288000cc 	andi	r2,r5,3
     f0c:	18fffe04 	addi	r3,r3,-8
     f10:	297fffc4 	addi	r5,r5,-1
     f14:	10001526 	beq	r2,zero,f6c <_malloc_r+0x70c>
     f18:	18800217 	ldw	r2,8(r3)
     f1c:	10fffa26 	beq	r2,r3,f08 <_malloc_r+0x6a8>
     f20:	2109883a 	add	r4,r4,r4
     f24:	393f1e36 	bltu	r7,r4,ba0 <_malloc_r+0x340>
     f28:	203f1d26 	beq	r4,zero,ba0 <_malloc_r+0x340>
     f2c:	21c4703a 	and	r2,r4,r7
     f30:	10000226 	beq	r2,zero,f3c <_malloc_r+0x6dc>
     f34:	6013883a 	mov	r9,r12
     f38:	003ee106 	br	ac0 <_malloc_r+0x260>
     f3c:	2109883a 	add	r4,r4,r4
     f40:	3904703a 	and	r2,r7,r4
     f44:	63000104 	addi	r12,r12,4
     f48:	103ffc26 	beq	r2,zero,f3c <_malloc_r+0x6dc>
     f4c:	6013883a 	mov	r9,r12
     f50:	003edb06 	br	ac0 <_malloc_r+0x260>
     f54:	00805504 	movi	r2,340
     f58:	11000836 	bltu	r2,r4,f7c <_malloc_r+0x71c>
     f5c:	2804d3fa 	srli	r2,r5,15
     f60:	11001dc4 	addi	r4,r2,119
     f64:	200690fa 	slli	r3,r4,3
     f68:	003f7306 	br	d38 <_malloc_r+0x4d8>
     f6c:	0104303a 	nor	r2,zero,r4
     f70:	388e703a 	and	r7,r7,r2
     f74:	e1c00115 	stw	r7,4(fp)
     f78:	003fe906 	br	f20 <_malloc_r+0x6c0>
     f7c:	00815504 	movi	r2,1364
     f80:	1100032e 	bgeu	r2,r4,f90 <_malloc_r+0x730>
     f84:	01001f84 	movi	r4,126
     f88:	00c0fc04 	movi	r3,1008
     f8c:	003f6a06 	br	d38 <_malloc_r+0x4d8>
     f90:	2804d4ba 	srli	r2,r5,18
     f94:	11001f04 	addi	r4,r2,124
     f98:	200690fa 	slli	r3,r4,3
     f9c:	003f6606 	br	d38 <_malloc_r+0x4d8>

00000fa0 <memchr>:
     fa0:	008000c4 	movi	r2,3
     fa4:	29403fcc 	andi	r5,r5,255
     fa8:	2007883a 	mov	r3,r4
     fac:	1180022e 	bgeu	r2,r6,fb8 <memchr+0x18>
     fb0:	2084703a 	and	r2,r4,r2
     fb4:	10000b26 	beq	r2,zero,fe4 <memchr+0x44>
     fb8:	313fffc4 	addi	r4,r6,-1
     fbc:	3000051e 	bne	r6,zero,fd4 <memchr+0x34>
     fc0:	00002c06 	br	1074 <memchr+0xd4>
     fc4:	213fffc4 	addi	r4,r4,-1
     fc8:	00bfffc4 	movi	r2,-1
     fcc:	18c00044 	addi	r3,r3,1
     fd0:	20802826 	beq	r4,r2,1074 <memchr+0xd4>
     fd4:	18800003 	ldbu	r2,0(r3)
     fd8:	28bffa1e 	bne	r5,r2,fc4 <memchr+0x24>
     fdc:	1805883a 	mov	r2,r3
     fe0:	f800283a 	ret
     fe4:	0011883a 	mov	r8,zero
     fe8:	0007883a 	mov	r3,zero
     fec:	01c00104 	movi	r7,4
     ff0:	4004923a 	slli	r2,r8,8
     ff4:	18c00044 	addi	r3,r3,1
     ff8:	1151883a 	add	r8,r2,r5
     ffc:	19fffc1e 	bne	r3,r7,ff0 <memchr+0x50>
    1000:	02bfbff4 	movhi	r10,65279
    1004:	52bfbfc4 	addi	r10,r10,-257
    1008:	02602074 	movhi	r9,32897
    100c:	4a602004 	addi	r9,r9,-32640
    1010:	02c000c4 	movi	r11,3
    1014:	20800017 	ldw	r2,0(r4)
    1018:	31bfff04 	addi	r6,r6,-4
    101c:	200f883a 	mov	r7,r4
    1020:	1204f03a 	xor	r2,r2,r8
    1024:	1287883a 	add	r3,r2,r10
    1028:	1a46703a 	and	r3,r3,r9
    102c:	0084303a 	nor	r2,zero,r2
    1030:	10c4703a 	and	r2,r2,r3
    1034:	10000b26 	beq	r2,zero,1064 <memchr+0xc4>
    1038:	20800003 	ldbu	r2,0(r4)
    103c:	28800f26 	beq	r5,r2,107c <memchr+0xdc>
    1040:	20800043 	ldbu	r2,1(r4)
    1044:	21c00044 	addi	r7,r4,1
    1048:	28800c26 	beq	r5,r2,107c <memchr+0xdc>
    104c:	20800083 	ldbu	r2,2(r4)
    1050:	21c00084 	addi	r7,r4,2
    1054:	28800926 	beq	r5,r2,107c <memchr+0xdc>
    1058:	208000c3 	ldbu	r2,3(r4)
    105c:	21c000c4 	addi	r7,r4,3
    1060:	28800626 	beq	r5,r2,107c <memchr+0xdc>
    1064:	21000104 	addi	r4,r4,4
    1068:	59bfea36 	bltu	r11,r6,1014 <memchr+0x74>
    106c:	2007883a 	mov	r3,r4
    1070:	003fd106 	br	fb8 <memchr+0x18>
    1074:	0005883a 	mov	r2,zero
    1078:	f800283a 	ret
    107c:	3805883a 	mov	r2,r7
    1080:	f800283a 	ret

00001084 <memcpy>:
    1084:	01c003c4 	movi	r7,15
    1088:	2007883a 	mov	r3,r4
    108c:	3980032e 	bgeu	r7,r6,109c <memcpy+0x18>
    1090:	2904b03a 	or	r2,r5,r4
    1094:	108000cc 	andi	r2,r2,3
    1098:	10000926 	beq	r2,zero,10c0 <memcpy+0x3c>
    109c:	30000626 	beq	r6,zero,10b8 <memcpy+0x34>
    10a0:	30cd883a 	add	r6,r6,r3
    10a4:	28800003 	ldbu	r2,0(r5)
    10a8:	29400044 	addi	r5,r5,1
    10ac:	18800005 	stb	r2,0(r3)
    10b0:	18c00044 	addi	r3,r3,1
    10b4:	30fffb1e 	bne	r6,r3,10a4 <memcpy+0x20>
    10b8:	2005883a 	mov	r2,r4
    10bc:	f800283a 	ret
    10c0:	3811883a 	mov	r8,r7
    10c4:	200f883a 	mov	r7,r4
    10c8:	28c00017 	ldw	r3,0(r5)
    10cc:	31bffc04 	addi	r6,r6,-16
    10d0:	38c00015 	stw	r3,0(r7)
    10d4:	28800117 	ldw	r2,4(r5)
    10d8:	38800115 	stw	r2,4(r7)
    10dc:	28c00217 	ldw	r3,8(r5)
    10e0:	38c00215 	stw	r3,8(r7)
    10e4:	28800317 	ldw	r2,12(r5)
    10e8:	29400404 	addi	r5,r5,16
    10ec:	38800315 	stw	r2,12(r7)
    10f0:	39c00404 	addi	r7,r7,16
    10f4:	41bff436 	bltu	r8,r6,10c8 <memcpy+0x44>
    10f8:	008000c4 	movi	r2,3
    10fc:	1180072e 	bgeu	r2,r6,111c <memcpy+0x98>
    1100:	1007883a 	mov	r3,r2
    1104:	28800017 	ldw	r2,0(r5)
    1108:	31bfff04 	addi	r6,r6,-4
    110c:	29400104 	addi	r5,r5,4
    1110:	38800015 	stw	r2,0(r7)
    1114:	39c00104 	addi	r7,r7,4
    1118:	19bffa36 	bltu	r3,r6,1104 <memcpy+0x80>
    111c:	3807883a 	mov	r3,r7
    1120:	003fde06 	br	109c <memcpy+0x18>

00001124 <memmove>:
    1124:	2807883a 	mov	r3,r5
    1128:	2011883a 	mov	r8,r4
    112c:	29000c2e 	bgeu	r5,r4,1160 <memmove+0x3c>
    1130:	298f883a 	add	r7,r5,r6
    1134:	21c00a2e 	bgeu	r4,r7,1160 <memmove+0x3c>
    1138:	30000726 	beq	r6,zero,1158 <memmove+0x34>
    113c:	2187883a 	add	r3,r4,r6
    1140:	198dc83a 	sub	r6,r3,r6
    1144:	39ffffc4 	addi	r7,r7,-1
    1148:	38800003 	ldbu	r2,0(r7)
    114c:	18ffffc4 	addi	r3,r3,-1
    1150:	18800005 	stb	r2,0(r3)
    1154:	19bffb1e 	bne	r3,r6,1144 <memmove+0x20>
    1158:	2005883a 	mov	r2,r4
    115c:	f800283a 	ret
    1160:	01c003c4 	movi	r7,15
    1164:	39800a36 	bltu	r7,r6,1190 <memmove+0x6c>
    1168:	303ffb26 	beq	r6,zero,1158 <memmove+0x34>
    116c:	400f883a 	mov	r7,r8
    1170:	320d883a 	add	r6,r6,r8
    1174:	28800003 	ldbu	r2,0(r5)
    1178:	29400044 	addi	r5,r5,1
    117c:	38800005 	stb	r2,0(r7)
    1180:	39c00044 	addi	r7,r7,1
    1184:	39bffb1e 	bne	r7,r6,1174 <memmove+0x50>
    1188:	2005883a 	mov	r2,r4
    118c:	f800283a 	ret
    1190:	1904b03a 	or	r2,r3,r4
    1194:	108000cc 	andi	r2,r2,3
    1198:	103ff31e 	bne	r2,zero,1168 <memmove+0x44>
    119c:	3811883a 	mov	r8,r7
    11a0:	180b883a 	mov	r5,r3
    11a4:	200f883a 	mov	r7,r4
    11a8:	28c00017 	ldw	r3,0(r5)
    11ac:	31bffc04 	addi	r6,r6,-16
    11b0:	38c00015 	stw	r3,0(r7)
    11b4:	28800117 	ldw	r2,4(r5)
    11b8:	38800115 	stw	r2,4(r7)
    11bc:	28c00217 	ldw	r3,8(r5)
    11c0:	38c00215 	stw	r3,8(r7)
    11c4:	28800317 	ldw	r2,12(r5)
    11c8:	29400404 	addi	r5,r5,16
    11cc:	38800315 	stw	r2,12(r7)
    11d0:	39c00404 	addi	r7,r7,16
    11d4:	41bff436 	bltu	r8,r6,11a8 <memmove+0x84>
    11d8:	008000c4 	movi	r2,3
    11dc:	1180072e 	bgeu	r2,r6,11fc <memmove+0xd8>
    11e0:	1007883a 	mov	r3,r2
    11e4:	28800017 	ldw	r2,0(r5)
    11e8:	31bfff04 	addi	r6,r6,-4
    11ec:	29400104 	addi	r5,r5,4
    11f0:	38800015 	stw	r2,0(r7)
    11f4:	39c00104 	addi	r7,r7,4
    11f8:	19bffa36 	bltu	r3,r6,11e4 <memmove+0xc0>
    11fc:	3811883a 	mov	r8,r7
    1200:	003fd906 	br	1168 <memmove+0x44>

00001204 <_realloc_r>:
    1204:	defff404 	addi	sp,sp,-48
    1208:	dd800815 	stw	r22,32(sp)
    120c:	dc800415 	stw	r18,16(sp)
    1210:	dc400315 	stw	r17,12(sp)
    1214:	dfc00b15 	stw	ra,44(sp)
    1218:	df000a15 	stw	fp,40(sp)
    121c:	ddc00915 	stw	r23,36(sp)
    1220:	dd400715 	stw	r21,28(sp)
    1224:	dd000615 	stw	r20,24(sp)
    1228:	dcc00515 	stw	r19,20(sp)
    122c:	dc000215 	stw	r16,8(sp)
    1230:	2825883a 	mov	r18,r5
    1234:	3023883a 	mov	r17,r6
    1238:	202d883a 	mov	r22,r4
    123c:	2800c926 	beq	r5,zero,1564 <_realloc_r+0x360>
    1240:	00032300 	call	3230 <__malloc_lock>
    1244:	943ffe04 	addi	r16,r18,-8
    1248:	88c002c4 	addi	r3,r17,11
    124c:	00800584 	movi	r2,22
    1250:	82000117 	ldw	r8,4(r16)
    1254:	10c01b2e 	bgeu	r2,r3,12c4 <_realloc_r+0xc0>
    1258:	00bffe04 	movi	r2,-8
    125c:	188e703a 	and	r7,r3,r2
    1260:	3839883a 	mov	fp,r7
    1264:	38001a16 	blt	r7,zero,12d0 <_realloc_r+0xcc>
    1268:	e4401936 	bltu	fp,r17,12d0 <_realloc_r+0xcc>
    126c:	013fff04 	movi	r4,-4
    1270:	4126703a 	and	r19,r8,r4
    1274:	99c02616 	blt	r19,r7,1310 <_realloc_r+0x10c>
    1278:	802b883a 	mov	r21,r16
    127c:	9829883a 	mov	r20,r19
    1280:	84000204 	addi	r16,r16,8
    1284:	a80f883a 	mov	r7,r21
    1288:	a70dc83a 	sub	r6,r20,fp
    128c:	008003c4 	movi	r2,15
    1290:	1180c136 	bltu	r2,r6,1598 <_realloc_r+0x394>
    1294:	38800117 	ldw	r2,4(r7)
    1298:	a549883a 	add	r4,r20,r21
    129c:	1080004c 	andi	r2,r2,1
    12a0:	a084b03a 	or	r2,r20,r2
    12a4:	38800115 	stw	r2,4(r7)
    12a8:	20c00117 	ldw	r3,4(r4)
    12ac:	18c00054 	ori	r3,r3,1
    12b0:	20c00115 	stw	r3,4(r4)
    12b4:	b009883a 	mov	r4,r22
    12b8:	00032500 	call	3250 <__malloc_unlock>
    12bc:	8023883a 	mov	r17,r16
    12c0:	00000606 	br	12dc <_realloc_r+0xd8>
    12c4:	01c00404 	movi	r7,16
    12c8:	3839883a 	mov	fp,r7
    12cc:	e47fe72e 	bgeu	fp,r17,126c <_realloc_r+0x68>
    12d0:	00800304 	movi	r2,12
    12d4:	0023883a 	mov	r17,zero
    12d8:	b0800015 	stw	r2,0(r22)
    12dc:	8805883a 	mov	r2,r17
    12e0:	dfc00b17 	ldw	ra,44(sp)
    12e4:	df000a17 	ldw	fp,40(sp)
    12e8:	ddc00917 	ldw	r23,36(sp)
    12ec:	dd800817 	ldw	r22,32(sp)
    12f0:	dd400717 	ldw	r21,28(sp)
    12f4:	dd000617 	ldw	r20,24(sp)
    12f8:	dcc00517 	ldw	r19,20(sp)
    12fc:	dc800417 	ldw	r18,16(sp)
    1300:	dc400317 	ldw	r17,12(sp)
    1304:	dc000217 	ldw	r16,8(sp)
    1308:	dec00c04 	addi	sp,sp,48
    130c:	f800283a 	ret
    1310:	00800034 	movhi	r2,0
    1314:	10960e04 	addi	r2,r2,22584
    1318:	12400217 	ldw	r9,8(r2)
    131c:	84cd883a 	add	r6,r16,r19
    1320:	802b883a 	mov	r21,r16
    1324:	3240b926 	beq	r6,r9,160c <_realloc_r+0x408>
    1328:	31400117 	ldw	r5,4(r6)
    132c:	00bfff84 	movi	r2,-2
    1330:	2884703a 	and	r2,r5,r2
    1334:	1185883a 	add	r2,r2,r6
    1338:	10c00117 	ldw	r3,4(r2)
    133c:	18c0004c 	andi	r3,r3,1
    1340:	1807003a 	cmpeq	r3,r3,zero
    1344:	1800a326 	beq	r3,zero,15d4 <_realloc_r+0x3d0>
    1348:	2908703a 	and	r4,r5,r4
    134c:	9929883a 	add	r20,r19,r4
    1350:	a1c0a30e 	bge	r20,r7,15e0 <_realloc_r+0x3dc>
    1354:	4080004c 	andi	r2,r8,1
    1358:	1000551e 	bne	r2,zero,14b0 <_realloc_r+0x2ac>
    135c:	80800017 	ldw	r2,0(r16)
    1360:	80afc83a 	sub	r23,r16,r2
    1364:	b8c00117 	ldw	r3,4(r23)
    1368:	00bfff04 	movi	r2,-4
    136c:	1884703a 	and	r2,r3,r2
    1370:	30002e26 	beq	r6,zero,142c <_realloc_r+0x228>
    1374:	3240b926 	beq	r6,r9,165c <_realloc_r+0x458>
    1378:	98a9883a 	add	r20,r19,r2
    137c:	2509883a 	add	r4,r4,r20
    1380:	d9000015 	stw	r4,0(sp)
    1384:	21c02a16 	blt	r4,r7,1430 <_realloc_r+0x22c>
    1388:	30800317 	ldw	r2,12(r6)
    138c:	30c00217 	ldw	r3,8(r6)
    1390:	01400904 	movi	r5,36
    1394:	99bfff04 	addi	r6,r19,-4
    1398:	18800315 	stw	r2,12(r3)
    139c:	10c00215 	stw	r3,8(r2)
    13a0:	b9000317 	ldw	r4,12(r23)
    13a4:	b8800217 	ldw	r2,8(r23)
    13a8:	b82b883a 	mov	r21,r23
    13ac:	bc000204 	addi	r16,r23,8
    13b0:	20800215 	stw	r2,8(r4)
    13b4:	11000315 	stw	r4,12(r2)
    13b8:	2980e436 	bltu	r5,r6,174c <_realloc_r+0x548>
    13bc:	008004c4 	movi	r2,19
    13c0:	9009883a 	mov	r4,r18
    13c4:	8011883a 	mov	r8,r16
    13c8:	11800f2e 	bgeu	r2,r6,1408 <_realloc_r+0x204>
    13cc:	90800017 	ldw	r2,0(r18)
    13d0:	ba000404 	addi	r8,r23,16
    13d4:	91000204 	addi	r4,r18,8
    13d8:	b8800215 	stw	r2,8(r23)
    13dc:	90c00117 	ldw	r3,4(r18)
    13e0:	008006c4 	movi	r2,27
    13e4:	b8c00315 	stw	r3,12(r23)
    13e8:	1180072e 	bgeu	r2,r6,1408 <_realloc_r+0x204>
    13ec:	90c00217 	ldw	r3,8(r18)
    13f0:	ba000604 	addi	r8,r23,24
    13f4:	91000404 	addi	r4,r18,16
    13f8:	b8c00415 	stw	r3,16(r23)
    13fc:	90800317 	ldw	r2,12(r18)
    1400:	b8800515 	stw	r2,20(r23)
    1404:	3140e726 	beq	r6,r5,17a4 <_realloc_r+0x5a0>
    1408:	20800017 	ldw	r2,0(r4)
    140c:	dd000017 	ldw	r20,0(sp)
    1410:	b80f883a 	mov	r7,r23
    1414:	40800015 	stw	r2,0(r8)
    1418:	20c00117 	ldw	r3,4(r4)
    141c:	40c00115 	stw	r3,4(r8)
    1420:	20800217 	ldw	r2,8(r4)
    1424:	40800215 	stw	r2,8(r8)
    1428:	003f9706 	br	1288 <_realloc_r+0x84>
    142c:	98a9883a 	add	r20,r19,r2
    1430:	a1c01f16 	blt	r20,r7,14b0 <_realloc_r+0x2ac>
    1434:	b8c00317 	ldw	r3,12(r23)
    1438:	b8800217 	ldw	r2,8(r23)
    143c:	99bfff04 	addi	r6,r19,-4
    1440:	01400904 	movi	r5,36
    1444:	b82b883a 	mov	r21,r23
    1448:	18800215 	stw	r2,8(r3)
    144c:	10c00315 	stw	r3,12(r2)
    1450:	bc000204 	addi	r16,r23,8
    1454:	2980c336 	bltu	r5,r6,1764 <_realloc_r+0x560>
    1458:	008004c4 	movi	r2,19
    145c:	9009883a 	mov	r4,r18
    1460:	8011883a 	mov	r8,r16
    1464:	11800f2e 	bgeu	r2,r6,14a4 <_realloc_r+0x2a0>
    1468:	90800017 	ldw	r2,0(r18)
    146c:	ba000404 	addi	r8,r23,16
    1470:	91000204 	addi	r4,r18,8
    1474:	b8800215 	stw	r2,8(r23)
    1478:	90c00117 	ldw	r3,4(r18)
    147c:	008006c4 	movi	r2,27
    1480:	b8c00315 	stw	r3,12(r23)
    1484:	1180072e 	bgeu	r2,r6,14a4 <_realloc_r+0x2a0>
    1488:	90c00217 	ldw	r3,8(r18)
    148c:	ba000604 	addi	r8,r23,24
    1490:	91000404 	addi	r4,r18,16
    1494:	b8c00415 	stw	r3,16(r23)
    1498:	90800317 	ldw	r2,12(r18)
    149c:	b8800515 	stw	r2,20(r23)
    14a0:	3140c726 	beq	r6,r5,17c0 <_realloc_r+0x5bc>
    14a4:	20800017 	ldw	r2,0(r4)
    14a8:	b80f883a 	mov	r7,r23
    14ac:	003fd906 	br	1414 <_realloc_r+0x210>
    14b0:	880b883a 	mov	r5,r17
    14b4:	b009883a 	mov	r4,r22
    14b8:	00008600 	call	860 <_malloc_r>
    14bc:	1023883a 	mov	r17,r2
    14c0:	10002526 	beq	r2,zero,1558 <_realloc_r+0x354>
    14c4:	80800117 	ldw	r2,4(r16)
    14c8:	00ffff84 	movi	r3,-2
    14cc:	893ffe04 	addi	r4,r17,-8
    14d0:	10c4703a 	and	r2,r2,r3
    14d4:	8085883a 	add	r2,r16,r2
    14d8:	20809526 	beq	r4,r2,1730 <_realloc_r+0x52c>
    14dc:	99bfff04 	addi	r6,r19,-4
    14e0:	01c00904 	movi	r7,36
    14e4:	39804536 	bltu	r7,r6,15fc <_realloc_r+0x3f8>
    14e8:	008004c4 	movi	r2,19
    14ec:	9009883a 	mov	r4,r18
    14f0:	880b883a 	mov	r5,r17
    14f4:	11800f2e 	bgeu	r2,r6,1534 <_realloc_r+0x330>
    14f8:	90800017 	ldw	r2,0(r18)
    14fc:	89400204 	addi	r5,r17,8
    1500:	91000204 	addi	r4,r18,8
    1504:	88800015 	stw	r2,0(r17)
    1508:	90c00117 	ldw	r3,4(r18)
    150c:	008006c4 	movi	r2,27
    1510:	88c00115 	stw	r3,4(r17)
    1514:	1180072e 	bgeu	r2,r6,1534 <_realloc_r+0x330>
    1518:	90c00217 	ldw	r3,8(r18)
    151c:	89400404 	addi	r5,r17,16
    1520:	91000404 	addi	r4,r18,16
    1524:	88c00215 	stw	r3,8(r17)
    1528:	90800317 	ldw	r2,12(r18)
    152c:	88800315 	stw	r2,12(r17)
    1530:	31c09126 	beq	r6,r7,1778 <_realloc_r+0x574>
    1534:	20800017 	ldw	r2,0(r4)
    1538:	28800015 	stw	r2,0(r5)
    153c:	20c00117 	ldw	r3,4(r4)
    1540:	28c00115 	stw	r3,4(r5)
    1544:	20800217 	ldw	r2,8(r4)
    1548:	28800215 	stw	r2,8(r5)
    154c:	900b883a 	mov	r5,r18
    1550:	b009883a 	mov	r4,r22
    1554:	0001fc00 	call	1fc0 <_free_r>
    1558:	b009883a 	mov	r4,r22
    155c:	00032500 	call	3250 <__malloc_unlock>
    1560:	003f5e06 	br	12dc <_realloc_r+0xd8>
    1564:	300b883a 	mov	r5,r6
    1568:	dfc00b17 	ldw	ra,44(sp)
    156c:	df000a17 	ldw	fp,40(sp)
    1570:	ddc00917 	ldw	r23,36(sp)
    1574:	dd800817 	ldw	r22,32(sp)
    1578:	dd400717 	ldw	r21,28(sp)
    157c:	dd000617 	ldw	r20,24(sp)
    1580:	dcc00517 	ldw	r19,20(sp)
    1584:	dc800417 	ldw	r18,16(sp)
    1588:	dc400317 	ldw	r17,12(sp)
    158c:	dc000217 	ldw	r16,8(sp)
    1590:	dec00c04 	addi	sp,sp,48
    1594:	00008601 	jmpi	860 <_malloc_r>
    1598:	38800117 	ldw	r2,4(r7)
    159c:	e54b883a 	add	r5,fp,r21
    15a0:	31000054 	ori	r4,r6,1
    15a4:	1080004c 	andi	r2,r2,1
    15a8:	1704b03a 	or	r2,r2,fp
    15ac:	38800115 	stw	r2,4(r7)
    15b0:	29000115 	stw	r4,4(r5)
    15b4:	2987883a 	add	r3,r5,r6
    15b8:	18800117 	ldw	r2,4(r3)
    15bc:	29400204 	addi	r5,r5,8
    15c0:	b009883a 	mov	r4,r22
    15c4:	10800054 	ori	r2,r2,1
    15c8:	18800115 	stw	r2,4(r3)
    15cc:	0001fc00 	call	1fc0 <_free_r>
    15d0:	003f3806 	br	12b4 <_realloc_r+0xb0>
    15d4:	000d883a 	mov	r6,zero
    15d8:	0009883a 	mov	r4,zero
    15dc:	003f5d06 	br	1354 <_realloc_r+0x150>
    15e0:	30c00217 	ldw	r3,8(r6)
    15e4:	30800317 	ldw	r2,12(r6)
    15e8:	800f883a 	mov	r7,r16
    15ec:	84000204 	addi	r16,r16,8
    15f0:	10c00215 	stw	r3,8(r2)
    15f4:	18800315 	stw	r2,12(r3)
    15f8:	003f2306 	br	1288 <_realloc_r+0x84>
    15fc:	8809883a 	mov	r4,r17
    1600:	900b883a 	mov	r5,r18
    1604:	00011240 	call	1124 <memmove>
    1608:	003fd006 	br	154c <_realloc_r+0x348>
    160c:	30800117 	ldw	r2,4(r6)
    1610:	e0c00404 	addi	r3,fp,16
    1614:	1108703a 	and	r4,r2,r4
    1618:	9905883a 	add	r2,r19,r4
    161c:	10ff4d16 	blt	r2,r3,1354 <_realloc_r+0x150>
    1620:	1705c83a 	sub	r2,r2,fp
    1624:	870b883a 	add	r5,r16,fp
    1628:	10800054 	ori	r2,r2,1
    162c:	28800115 	stw	r2,4(r5)
    1630:	80c00117 	ldw	r3,4(r16)
    1634:	00800034 	movhi	r2,0
    1638:	10960e04 	addi	r2,r2,22584
    163c:	b009883a 	mov	r4,r22
    1640:	18c0004c 	andi	r3,r3,1
    1644:	e0c6b03a 	or	r3,fp,r3
    1648:	11400215 	stw	r5,8(r2)
    164c:	80c00115 	stw	r3,4(r16)
    1650:	00032500 	call	3250 <__malloc_unlock>
    1654:	84400204 	addi	r17,r16,8
    1658:	003f2006 	br	12dc <_realloc_r+0xd8>
    165c:	98a9883a 	add	r20,r19,r2
    1660:	2509883a 	add	r4,r4,r20
    1664:	e0800404 	addi	r2,fp,16
    1668:	d9000115 	stw	r4,4(sp)
    166c:	20bf7016 	blt	r4,r2,1430 <_realloc_r+0x22c>
    1670:	b8c00317 	ldw	r3,12(r23)
    1674:	b8800217 	ldw	r2,8(r23)
    1678:	99bfff04 	addi	r6,r19,-4
    167c:	01400904 	movi	r5,36
    1680:	18800215 	stw	r2,8(r3)
    1684:	10c00315 	stw	r3,12(r2)
    1688:	bc400204 	addi	r17,r23,8
    168c:	29804136 	bltu	r5,r6,1794 <_realloc_r+0x590>
    1690:	008004c4 	movi	r2,19
    1694:	9009883a 	mov	r4,r18
    1698:	880f883a 	mov	r7,r17
    169c:	11800f2e 	bgeu	r2,r6,16dc <_realloc_r+0x4d8>
    16a0:	90800017 	ldw	r2,0(r18)
    16a4:	b9c00404 	addi	r7,r23,16
    16a8:	91000204 	addi	r4,r18,8
    16ac:	b8800215 	stw	r2,8(r23)
    16b0:	90c00117 	ldw	r3,4(r18)
    16b4:	008006c4 	movi	r2,27
    16b8:	b8c00315 	stw	r3,12(r23)
    16bc:	1180072e 	bgeu	r2,r6,16dc <_realloc_r+0x4d8>
    16c0:	90c00217 	ldw	r3,8(r18)
    16c4:	b9c00604 	addi	r7,r23,24
    16c8:	91000404 	addi	r4,r18,16
    16cc:	b8c00415 	stw	r3,16(r23)
    16d0:	90800317 	ldw	r2,12(r18)
    16d4:	b8800515 	stw	r2,20(r23)
    16d8:	31404026 	beq	r6,r5,17dc <_realloc_r+0x5d8>
    16dc:	20800017 	ldw	r2,0(r4)
    16e0:	38800015 	stw	r2,0(r7)
    16e4:	20c00117 	ldw	r3,4(r4)
    16e8:	38c00115 	stw	r3,4(r7)
    16ec:	20800217 	ldw	r2,8(r4)
    16f0:	38800215 	stw	r2,8(r7)
    16f4:	d8c00117 	ldw	r3,4(sp)
    16f8:	bf0b883a 	add	r5,r23,fp
    16fc:	b009883a 	mov	r4,r22
    1700:	1f05c83a 	sub	r2,r3,fp
    1704:	10800054 	ori	r2,r2,1
    1708:	28800115 	stw	r2,4(r5)
    170c:	b8c00117 	ldw	r3,4(r23)
    1710:	00800034 	movhi	r2,0
    1714:	10960e04 	addi	r2,r2,22584
    1718:	11400215 	stw	r5,8(r2)
    171c:	18c0004c 	andi	r3,r3,1
    1720:	e0c6b03a 	or	r3,fp,r3
    1724:	b8c00115 	stw	r3,4(r23)
    1728:	00032500 	call	3250 <__malloc_unlock>
    172c:	003eeb06 	br	12dc <_realloc_r+0xd8>
    1730:	20800117 	ldw	r2,4(r4)
    1734:	00ffff04 	movi	r3,-4
    1738:	800f883a 	mov	r7,r16
    173c:	10c4703a 	and	r2,r2,r3
    1740:	98a9883a 	add	r20,r19,r2
    1744:	84000204 	addi	r16,r16,8
    1748:	003ecf06 	br	1288 <_realloc_r+0x84>
    174c:	900b883a 	mov	r5,r18
    1750:	8009883a 	mov	r4,r16
    1754:	00011240 	call	1124 <memmove>
    1758:	dd000017 	ldw	r20,0(sp)
    175c:	b80f883a 	mov	r7,r23
    1760:	003ec906 	br	1288 <_realloc_r+0x84>
    1764:	900b883a 	mov	r5,r18
    1768:	8009883a 	mov	r4,r16
    176c:	00011240 	call	1124 <memmove>
    1770:	b80f883a 	mov	r7,r23
    1774:	003ec406 	br	1288 <_realloc_r+0x84>
    1778:	90c00417 	ldw	r3,16(r18)
    177c:	89400604 	addi	r5,r17,24
    1780:	91000604 	addi	r4,r18,24
    1784:	88c00415 	stw	r3,16(r17)
    1788:	90800517 	ldw	r2,20(r18)
    178c:	88800515 	stw	r2,20(r17)
    1790:	003f6806 	br	1534 <_realloc_r+0x330>
    1794:	900b883a 	mov	r5,r18
    1798:	8809883a 	mov	r4,r17
    179c:	00011240 	call	1124 <memmove>
    17a0:	003fd406 	br	16f4 <_realloc_r+0x4f0>
    17a4:	90c00417 	ldw	r3,16(r18)
    17a8:	91000604 	addi	r4,r18,24
    17ac:	ba000804 	addi	r8,r23,32
    17b0:	b8c00615 	stw	r3,24(r23)
    17b4:	90800517 	ldw	r2,20(r18)
    17b8:	b8800715 	stw	r2,28(r23)
    17bc:	003f1206 	br	1408 <_realloc_r+0x204>
    17c0:	90c00417 	ldw	r3,16(r18)
    17c4:	91000604 	addi	r4,r18,24
    17c8:	ba000804 	addi	r8,r23,32
    17cc:	b8c00615 	stw	r3,24(r23)
    17d0:	90800517 	ldw	r2,20(r18)
    17d4:	b8800715 	stw	r2,28(r23)
    17d8:	003f3206 	br	14a4 <_realloc_r+0x2a0>
    17dc:	90c00417 	ldw	r3,16(r18)
    17e0:	91000604 	addi	r4,r18,24
    17e4:	b9c00804 	addi	r7,r23,32
    17e8:	b8c00615 	stw	r3,24(r23)
    17ec:	90800517 	ldw	r2,20(r18)
    17f0:	b8800715 	stw	r2,28(r23)
    17f4:	003fb906 	br	16dc <_realloc_r+0x4d8>

000017f8 <_sbrk_r>:
    17f8:	defffd04 	addi	sp,sp,-12
    17fc:	dc000015 	stw	r16,0(sp)
    1800:	04000034 	movhi	r16,0
    1804:	841a6304 	addi	r16,r16,27020
    1808:	dc400115 	stw	r17,4(sp)
    180c:	80000015 	stw	zero,0(r16)
    1810:	2023883a 	mov	r17,r4
    1814:	2809883a 	mov	r4,r5
    1818:	dfc00215 	stw	ra,8(sp)
    181c:	00034500 	call	3450 <sbrk>
    1820:	1007883a 	mov	r3,r2
    1824:	00bfffc4 	movi	r2,-1
    1828:	18800626 	beq	r3,r2,1844 <_sbrk_r+0x4c>
    182c:	1805883a 	mov	r2,r3
    1830:	dfc00217 	ldw	ra,8(sp)
    1834:	dc400117 	ldw	r17,4(sp)
    1838:	dc000017 	ldw	r16,0(sp)
    183c:	dec00304 	addi	sp,sp,12
    1840:	f800283a 	ret
    1844:	80800017 	ldw	r2,0(r16)
    1848:	103ff826 	beq	r2,zero,182c <_sbrk_r+0x34>
    184c:	88800015 	stw	r2,0(r17)
    1850:	1805883a 	mov	r2,r3
    1854:	dfc00217 	ldw	ra,8(sp)
    1858:	dc400117 	ldw	r17,4(sp)
    185c:	dc000017 	ldw	r16,0(sp)
    1860:	dec00304 	addi	sp,sp,12
    1864:	f800283a 	ret

00001868 <__swsetup_r>:
    1868:	00800034 	movhi	r2,0
    186c:	1097ab04 	addi	r2,r2,24236
    1870:	10c00017 	ldw	r3,0(r2)
    1874:	defffd04 	addi	sp,sp,-12
    1878:	dc400115 	stw	r17,4(sp)
    187c:	dc000015 	stw	r16,0(sp)
    1880:	dfc00215 	stw	ra,8(sp)
    1884:	2023883a 	mov	r17,r4
    1888:	2821883a 	mov	r16,r5
    188c:	18000226 	beq	r3,zero,1898 <__swsetup_r+0x30>
    1890:	18800e17 	ldw	r2,56(r3)
    1894:	10001f26 	beq	r2,zero,1914 <__swsetup_r+0xac>
    1898:	8100030b 	ldhu	r4,12(r16)
    189c:	2080020c 	andi	r2,r4,8
    18a0:	10002826 	beq	r2,zero,1944 <__swsetup_r+0xdc>
    18a4:	81400417 	ldw	r5,16(r16)
    18a8:	28001d26 	beq	r5,zero,1920 <__swsetup_r+0xb8>
    18ac:	2080004c 	andi	r2,r4,1
    18b0:	1005003a 	cmpeq	r2,r2,zero
    18b4:	10000b26 	beq	r2,zero,18e4 <__swsetup_r+0x7c>
    18b8:	2080008c 	andi	r2,r4,2
    18bc:	10001226 	beq	r2,zero,1908 <__swsetup_r+0xa0>
    18c0:	0005883a 	mov	r2,zero
    18c4:	80800215 	stw	r2,8(r16)
    18c8:	28000b26 	beq	r5,zero,18f8 <__swsetup_r+0x90>
    18cc:	0005883a 	mov	r2,zero
    18d0:	dfc00217 	ldw	ra,8(sp)
    18d4:	dc400117 	ldw	r17,4(sp)
    18d8:	dc000017 	ldw	r16,0(sp)
    18dc:	dec00304 	addi	sp,sp,12
    18e0:	f800283a 	ret
    18e4:	80800517 	ldw	r2,20(r16)
    18e8:	80000215 	stw	zero,8(r16)
    18ec:	0085c83a 	sub	r2,zero,r2
    18f0:	80800615 	stw	r2,24(r16)
    18f4:	283ff51e 	bne	r5,zero,18cc <__swsetup_r+0x64>
    18f8:	2080200c 	andi	r2,r4,128
    18fc:	103ff326 	beq	r2,zero,18cc <__swsetup_r+0x64>
    1900:	00bfffc4 	movi	r2,-1
    1904:	003ff206 	br	18d0 <__swsetup_r+0x68>
    1908:	80800517 	ldw	r2,20(r16)
    190c:	80800215 	stw	r2,8(r16)
    1910:	003fed06 	br	18c8 <__swsetup_r+0x60>
    1914:	1809883a 	mov	r4,r3
    1918:	0001c3c0 	call	1c3c <__sinit>
    191c:	003fde06 	br	1898 <__swsetup_r+0x30>
    1920:	20c0a00c 	andi	r3,r4,640
    1924:	00808004 	movi	r2,512
    1928:	18bfe026 	beq	r3,r2,18ac <__swsetup_r+0x44>
    192c:	8809883a 	mov	r4,r17
    1930:	800b883a 	mov	r5,r16
    1934:	00024540 	call	2454 <__smakebuf_r>
    1938:	8100030b 	ldhu	r4,12(r16)
    193c:	81400417 	ldw	r5,16(r16)
    1940:	003fda06 	br	18ac <__swsetup_r+0x44>
    1944:	2080040c 	andi	r2,r4,16
    1948:	103fed26 	beq	r2,zero,1900 <__swsetup_r+0x98>
    194c:	2080010c 	andi	r2,r4,4
    1950:	10001226 	beq	r2,zero,199c <__swsetup_r+0x134>
    1954:	81400c17 	ldw	r5,48(r16)
    1958:	28000526 	beq	r5,zero,1970 <__swsetup_r+0x108>
    195c:	80801004 	addi	r2,r16,64
    1960:	28800226 	beq	r5,r2,196c <__swsetup_r+0x104>
    1964:	8809883a 	mov	r4,r17
    1968:	0001fc00 	call	1fc0 <_free_r>
    196c:	80000c15 	stw	zero,48(r16)
    1970:	8080030b 	ldhu	r2,12(r16)
    1974:	81400417 	ldw	r5,16(r16)
    1978:	80000115 	stw	zero,4(r16)
    197c:	10bff6cc 	andi	r2,r2,65499
    1980:	8080030d 	sth	r2,12(r16)
    1984:	81400015 	stw	r5,0(r16)
    1988:	8080030b 	ldhu	r2,12(r16)
    198c:	10800214 	ori	r2,r2,8
    1990:	113fffcc 	andi	r4,r2,65535
    1994:	8080030d 	sth	r2,12(r16)
    1998:	003fc306 	br	18a8 <__swsetup_r+0x40>
    199c:	81400417 	ldw	r5,16(r16)
    19a0:	003ff906 	br	1988 <__swsetup_r+0x120>

000019a4 <_fflush_r>:
    19a4:	defffb04 	addi	sp,sp,-20
    19a8:	dcc00315 	stw	r19,12(sp)
    19ac:	dc800215 	stw	r18,8(sp)
    19b0:	dfc00415 	stw	ra,16(sp)
    19b4:	dc400115 	stw	r17,4(sp)
    19b8:	dc000015 	stw	r16,0(sp)
    19bc:	2027883a 	mov	r19,r4
    19c0:	2825883a 	mov	r18,r5
    19c4:	20000226 	beq	r4,zero,19d0 <_fflush_r+0x2c>
    19c8:	20800e17 	ldw	r2,56(r4)
    19cc:	10005626 	beq	r2,zero,1b28 <_fflush_r+0x184>
    19d0:	9100030b 	ldhu	r4,12(r18)
    19d4:	20ffffcc 	andi	r3,r4,65535
    19d8:	18e0001c 	xori	r3,r3,32768
    19dc:	18e00004 	addi	r3,r3,-32768
    19e0:	1880020c 	andi	r2,r3,8
    19e4:	1000261e 	bne	r2,zero,1a80 <_fflush_r+0xdc>
    19e8:	90c00117 	ldw	r3,4(r18)
    19ec:	20820014 	ori	r2,r4,2048
    19f0:	9080030d 	sth	r2,12(r18)
    19f4:	1009883a 	mov	r4,r2
    19f8:	00c0400e 	bge	zero,r3,1afc <_fflush_r+0x158>
    19fc:	92000a17 	ldw	r8,40(r18)
    1a00:	40004026 	beq	r8,zero,1b04 <_fflush_r+0x160>
    1a04:	2084000c 	andi	r2,r4,4096
    1a08:	10005326 	beq	r2,zero,1b58 <_fflush_r+0x1b4>
    1a0c:	94001417 	ldw	r16,80(r18)
    1a10:	9080030b 	ldhu	r2,12(r18)
    1a14:	1080010c 	andi	r2,r2,4
    1a18:	1000481e 	bne	r2,zero,1b3c <_fflush_r+0x198>
    1a1c:	91400717 	ldw	r5,28(r18)
    1a20:	9809883a 	mov	r4,r19
    1a24:	800d883a 	mov	r6,r16
    1a28:	000f883a 	mov	r7,zero
    1a2c:	403ee83a 	callr	r8
    1a30:	8080261e 	bne	r16,r2,1acc <_fflush_r+0x128>
    1a34:	9080030b 	ldhu	r2,12(r18)
    1a38:	91000417 	ldw	r4,16(r18)
    1a3c:	90000115 	stw	zero,4(r18)
    1a40:	10bdffcc 	andi	r2,r2,63487
    1a44:	10ffffcc 	andi	r3,r2,65535
    1a48:	18c4000c 	andi	r3,r3,4096
    1a4c:	9080030d 	sth	r2,12(r18)
    1a50:	91000015 	stw	r4,0(r18)
    1a54:	18002b26 	beq	r3,zero,1b04 <_fflush_r+0x160>
    1a58:	0007883a 	mov	r3,zero
    1a5c:	1805883a 	mov	r2,r3
    1a60:	94001415 	stw	r16,80(r18)
    1a64:	dfc00417 	ldw	ra,16(sp)
    1a68:	dcc00317 	ldw	r19,12(sp)
    1a6c:	dc800217 	ldw	r18,8(sp)
    1a70:	dc400117 	ldw	r17,4(sp)
    1a74:	dc000017 	ldw	r16,0(sp)
    1a78:	dec00504 	addi	sp,sp,20
    1a7c:	f800283a 	ret
    1a80:	94400417 	ldw	r17,16(r18)
    1a84:	88001f26 	beq	r17,zero,1b04 <_fflush_r+0x160>
    1a88:	90800017 	ldw	r2,0(r18)
    1a8c:	18c000cc 	andi	r3,r3,3
    1a90:	94400015 	stw	r17,0(r18)
    1a94:	1461c83a 	sub	r16,r2,r17
    1a98:	18002526 	beq	r3,zero,1b30 <_fflush_r+0x18c>
    1a9c:	0005883a 	mov	r2,zero
    1aa0:	90800215 	stw	r2,8(r18)
    1aa4:	0400170e 	bge	zero,r16,1b04 <_fflush_r+0x160>
    1aa8:	90c00917 	ldw	r3,36(r18)
    1aac:	91400717 	ldw	r5,28(r18)
    1ab0:	880d883a 	mov	r6,r17
    1ab4:	800f883a 	mov	r7,r16
    1ab8:	9809883a 	mov	r4,r19
    1abc:	183ee83a 	callr	r3
    1ac0:	88a3883a 	add	r17,r17,r2
    1ac4:	80a1c83a 	sub	r16,r16,r2
    1ac8:	00bff616 	blt	zero,r2,1aa4 <_fflush_r+0x100>
    1acc:	9080030b 	ldhu	r2,12(r18)
    1ad0:	00ffffc4 	movi	r3,-1
    1ad4:	10801014 	ori	r2,r2,64
    1ad8:	9080030d 	sth	r2,12(r18)
    1adc:	1805883a 	mov	r2,r3
    1ae0:	dfc00417 	ldw	ra,16(sp)
    1ae4:	dcc00317 	ldw	r19,12(sp)
    1ae8:	dc800217 	ldw	r18,8(sp)
    1aec:	dc400117 	ldw	r17,4(sp)
    1af0:	dc000017 	ldw	r16,0(sp)
    1af4:	dec00504 	addi	sp,sp,20
    1af8:	f800283a 	ret
    1afc:	90800f17 	ldw	r2,60(r18)
    1b00:	00bfbe16 	blt	zero,r2,19fc <_fflush_r+0x58>
    1b04:	0007883a 	mov	r3,zero
    1b08:	1805883a 	mov	r2,r3
    1b0c:	dfc00417 	ldw	ra,16(sp)
    1b10:	dcc00317 	ldw	r19,12(sp)
    1b14:	dc800217 	ldw	r18,8(sp)
    1b18:	dc400117 	ldw	r17,4(sp)
    1b1c:	dc000017 	ldw	r16,0(sp)
    1b20:	dec00504 	addi	sp,sp,20
    1b24:	f800283a 	ret
    1b28:	0001c3c0 	call	1c3c <__sinit>
    1b2c:	003fa806 	br	19d0 <_fflush_r+0x2c>
    1b30:	90800517 	ldw	r2,20(r18)
    1b34:	90800215 	stw	r2,8(r18)
    1b38:	003fda06 	br	1aa4 <_fflush_r+0x100>
    1b3c:	90800117 	ldw	r2,4(r18)
    1b40:	90c00c17 	ldw	r3,48(r18)
    1b44:	80a1c83a 	sub	r16,r16,r2
    1b48:	183fb426 	beq	r3,zero,1a1c <_fflush_r+0x78>
    1b4c:	90800f17 	ldw	r2,60(r18)
    1b50:	80a1c83a 	sub	r16,r16,r2
    1b54:	003fb106 	br	1a1c <_fflush_r+0x78>
    1b58:	91400717 	ldw	r5,28(r18)
    1b5c:	9809883a 	mov	r4,r19
    1b60:	000d883a 	mov	r6,zero
    1b64:	01c00044 	movi	r7,1
    1b68:	403ee83a 	callr	r8
    1b6c:	1021883a 	mov	r16,r2
    1b70:	00bfffc4 	movi	r2,-1
    1b74:	80800226 	beq	r16,r2,1b80 <_fflush_r+0x1dc>
    1b78:	92000a17 	ldw	r8,40(r18)
    1b7c:	003fa406 	br	1a10 <_fflush_r+0x6c>
    1b80:	98c00017 	ldw	r3,0(r19)
    1b84:	00800744 	movi	r2,29
    1b88:	18bfde26 	beq	r3,r2,1b04 <_fflush_r+0x160>
    1b8c:	9080030b 	ldhu	r2,12(r18)
    1b90:	8007883a 	mov	r3,r16
    1b94:	10801014 	ori	r2,r2,64
    1b98:	9080030d 	sth	r2,12(r18)
    1b9c:	003fcf06 	br	1adc <_fflush_r+0x138>

00001ba0 <fflush>:
    1ba0:	01400034 	movhi	r5,0
    1ba4:	29466904 	addi	r5,r5,6564
    1ba8:	2007883a 	mov	r3,r4
    1bac:	20000526 	beq	r4,zero,1bc4 <fflush+0x24>
    1bb0:	00800034 	movhi	r2,0
    1bb4:	1097ab04 	addi	r2,r2,24236
    1bb8:	11000017 	ldw	r4,0(r2)
    1bbc:	180b883a 	mov	r5,r3
    1bc0:	00019a41 	jmpi	19a4 <_fflush_r>
    1bc4:	00800034 	movhi	r2,0
    1bc8:	1097ac04 	addi	r2,r2,24240
    1bcc:	11000017 	ldw	r4,0(r2)
    1bd0:	00022d41 	jmpi	22d4 <_fwalk_reent>

00001bd4 <std>:
    1bd4:	00800034 	movhi	r2,0
    1bd8:	1089a004 	addi	r2,r2,9856
    1bdc:	20800b15 	stw	r2,44(r4)
    1be0:	00800034 	movhi	r2,0
    1be4:	1089db04 	addi	r2,r2,10092
    1be8:	20800815 	stw	r2,32(r4)
    1bec:	00c00034 	movhi	r3,0
    1bf0:	18c9bc04 	addi	r3,r3,9968
    1bf4:	00800034 	movhi	r2,0
    1bf8:	1089a204 	addi	r2,r2,9864
    1bfc:	2140030d 	sth	r5,12(r4)
    1c00:	2180038d 	sth	r6,14(r4)
    1c04:	20c00915 	stw	r3,36(r4)
    1c08:	20800a15 	stw	r2,40(r4)
    1c0c:	20000015 	stw	zero,0(r4)
    1c10:	20000115 	stw	zero,4(r4)
    1c14:	20000215 	stw	zero,8(r4)
    1c18:	20000415 	stw	zero,16(r4)
    1c1c:	20000515 	stw	zero,20(r4)
    1c20:	20000615 	stw	zero,24(r4)
    1c24:	21000715 	stw	r4,28(r4)
    1c28:	f800283a 	ret

00001c2c <__sfp_lock_acquire>:
    1c2c:	f800283a 	ret

00001c30 <__sfp_lock_release>:
    1c30:	f800283a 	ret

00001c34 <__sinit_lock_acquire>:
    1c34:	f800283a 	ret

00001c38 <__sinit_lock_release>:
    1c38:	f800283a 	ret

00001c3c <__sinit>:
    1c3c:	20800e17 	ldw	r2,56(r4)
    1c40:	defffd04 	addi	sp,sp,-12
    1c44:	dc400115 	stw	r17,4(sp)
    1c48:	dc000015 	stw	r16,0(sp)
    1c4c:	dfc00215 	stw	ra,8(sp)
    1c50:	04400044 	movi	r17,1
    1c54:	01400104 	movi	r5,4
    1c58:	000d883a 	mov	r6,zero
    1c5c:	2021883a 	mov	r16,r4
    1c60:	2200bb04 	addi	r8,r4,748
    1c64:	200f883a 	mov	r7,r4
    1c68:	10000526 	beq	r2,zero,1c80 <__sinit+0x44>
    1c6c:	dfc00217 	ldw	ra,8(sp)
    1c70:	dc400117 	ldw	r17,4(sp)
    1c74:	dc000017 	ldw	r16,0(sp)
    1c78:	dec00304 	addi	sp,sp,12
    1c7c:	f800283a 	ret
    1c80:	21000117 	ldw	r4,4(r4)
    1c84:	00800034 	movhi	r2,0
    1c88:	10874804 	addi	r2,r2,7456
    1c8c:	00c000c4 	movi	r3,3
    1c90:	80800f15 	stw	r2,60(r16)
    1c94:	80c0b915 	stw	r3,740(r16)
    1c98:	8200ba15 	stw	r8,744(r16)
    1c9c:	84400e15 	stw	r17,56(r16)
    1ca0:	8000b815 	stw	zero,736(r16)
    1ca4:	0001bd40 	call	1bd4 <std>
    1ca8:	81000217 	ldw	r4,8(r16)
    1cac:	880d883a 	mov	r6,r17
    1cb0:	800f883a 	mov	r7,r16
    1cb4:	01400284 	movi	r5,10
    1cb8:	0001bd40 	call	1bd4 <std>
    1cbc:	81000317 	ldw	r4,12(r16)
    1cc0:	800f883a 	mov	r7,r16
    1cc4:	01400484 	movi	r5,18
    1cc8:	01800084 	movi	r6,2
    1ccc:	dfc00217 	ldw	ra,8(sp)
    1cd0:	dc400117 	ldw	r17,4(sp)
    1cd4:	dc000017 	ldw	r16,0(sp)
    1cd8:	dec00304 	addi	sp,sp,12
    1cdc:	0001bd41 	jmpi	1bd4 <std>

00001ce0 <__fp_lock>:
    1ce0:	0005883a 	mov	r2,zero
    1ce4:	f800283a 	ret

00001ce8 <__fp_unlock>:
    1ce8:	0005883a 	mov	r2,zero
    1cec:	f800283a 	ret

00001cf0 <__fp_unlock_all>:
    1cf0:	00800034 	movhi	r2,0
    1cf4:	1097ab04 	addi	r2,r2,24236
    1cf8:	11000017 	ldw	r4,0(r2)
    1cfc:	01400034 	movhi	r5,0
    1d00:	29473a04 	addi	r5,r5,7400
    1d04:	000239c1 	jmpi	239c <_fwalk>

00001d08 <__fp_lock_all>:
    1d08:	00800034 	movhi	r2,0
    1d0c:	1097ab04 	addi	r2,r2,24236
    1d10:	11000017 	ldw	r4,0(r2)
    1d14:	01400034 	movhi	r5,0
    1d18:	29473804 	addi	r5,r5,7392
    1d1c:	000239c1 	jmpi	239c <_fwalk>

00001d20 <_cleanup_r>:
    1d20:	01400034 	movhi	r5,0
    1d24:	294a7104 	addi	r5,r5,10692
    1d28:	000239c1 	jmpi	239c <_fwalk>

00001d2c <_cleanup>:
    1d2c:	00800034 	movhi	r2,0
    1d30:	1097ac04 	addi	r2,r2,24240
    1d34:	11000017 	ldw	r4,0(r2)
    1d38:	0001d201 	jmpi	1d20 <_cleanup_r>

00001d3c <__sfmoreglue>:
    1d3c:	defffc04 	addi	sp,sp,-16
    1d40:	dc400115 	stw	r17,4(sp)
    1d44:	2c401724 	muli	r17,r5,92
    1d48:	dc800215 	stw	r18,8(sp)
    1d4c:	2825883a 	mov	r18,r5
    1d50:	89400304 	addi	r5,r17,12
    1d54:	dc000015 	stw	r16,0(sp)
    1d58:	dfc00315 	stw	ra,12(sp)
    1d5c:	00008600 	call	860 <_malloc_r>
    1d60:	0021883a 	mov	r16,zero
    1d64:	880d883a 	mov	r6,r17
    1d68:	000b883a 	mov	r5,zero
    1d6c:	10000626 	beq	r2,zero,1d88 <__sfmoreglue+0x4c>
    1d70:	11000304 	addi	r4,r2,12
    1d74:	14800115 	stw	r18,4(r2)
    1d78:	10000015 	stw	zero,0(r2)
    1d7c:	11000215 	stw	r4,8(r2)
    1d80:	1021883a 	mov	r16,r2
    1d84:	00025e80 	call	25e8 <memset>
    1d88:	8005883a 	mov	r2,r16
    1d8c:	dfc00317 	ldw	ra,12(sp)
    1d90:	dc800217 	ldw	r18,8(sp)
    1d94:	dc400117 	ldw	r17,4(sp)
    1d98:	dc000017 	ldw	r16,0(sp)
    1d9c:	dec00404 	addi	sp,sp,16
    1da0:	f800283a 	ret

00001da4 <__sfp>:
    1da4:	defffd04 	addi	sp,sp,-12
    1da8:	00800034 	movhi	r2,0
    1dac:	1097ac04 	addi	r2,r2,24240
    1db0:	dc000015 	stw	r16,0(sp)
    1db4:	14000017 	ldw	r16,0(r2)
    1db8:	dc400115 	stw	r17,4(sp)
    1dbc:	dfc00215 	stw	ra,8(sp)
    1dc0:	80800e17 	ldw	r2,56(r16)
    1dc4:	2023883a 	mov	r17,r4
    1dc8:	10002626 	beq	r2,zero,1e64 <__sfp+0xc0>
    1dcc:	8400b804 	addi	r16,r16,736
    1dd0:	80800117 	ldw	r2,4(r16)
    1dd4:	81000217 	ldw	r4,8(r16)
    1dd8:	10ffffc4 	addi	r3,r2,-1
    1ddc:	18000916 	blt	r3,zero,1e04 <__sfp+0x60>
    1de0:	2080030f 	ldh	r2,12(r4)
    1de4:	10000b26 	beq	r2,zero,1e14 <__sfp+0x70>
    1de8:	017fffc4 	movi	r5,-1
    1dec:	00000206 	br	1df8 <__sfp+0x54>
    1df0:	2080030f 	ldh	r2,12(r4)
    1df4:	10000726 	beq	r2,zero,1e14 <__sfp+0x70>
    1df8:	18ffffc4 	addi	r3,r3,-1
    1dfc:	21001704 	addi	r4,r4,92
    1e00:	197ffb1e 	bne	r3,r5,1df0 <__sfp+0x4c>
    1e04:	80800017 	ldw	r2,0(r16)
    1e08:	10001926 	beq	r2,zero,1e70 <__sfp+0xcc>
    1e0c:	1021883a 	mov	r16,r2
    1e10:	003fef06 	br	1dd0 <__sfp+0x2c>
    1e14:	00bfffc4 	movi	r2,-1
    1e18:	00c00044 	movi	r3,1
    1e1c:	2080038d 	sth	r2,14(r4)
    1e20:	20c0030d 	sth	r3,12(r4)
    1e24:	20000015 	stw	zero,0(r4)
    1e28:	20000215 	stw	zero,8(r4)
    1e2c:	20000115 	stw	zero,4(r4)
    1e30:	20000415 	stw	zero,16(r4)
    1e34:	20000515 	stw	zero,20(r4)
    1e38:	20000615 	stw	zero,24(r4)
    1e3c:	20000c15 	stw	zero,48(r4)
    1e40:	20000d15 	stw	zero,52(r4)
    1e44:	20001115 	stw	zero,68(r4)
    1e48:	20001215 	stw	zero,72(r4)
    1e4c:	2005883a 	mov	r2,r4
    1e50:	dfc00217 	ldw	ra,8(sp)
    1e54:	dc400117 	ldw	r17,4(sp)
    1e58:	dc000017 	ldw	r16,0(sp)
    1e5c:	dec00304 	addi	sp,sp,12
    1e60:	f800283a 	ret
    1e64:	8009883a 	mov	r4,r16
    1e68:	0001c3c0 	call	1c3c <__sinit>
    1e6c:	003fd706 	br	1dcc <__sfp+0x28>
    1e70:	8809883a 	mov	r4,r17
    1e74:	01400104 	movi	r5,4
    1e78:	0001d3c0 	call	1d3c <__sfmoreglue>
    1e7c:	80800015 	stw	r2,0(r16)
    1e80:	103fe21e 	bne	r2,zero,1e0c <__sfp+0x68>
    1e84:	00800304 	movi	r2,12
    1e88:	0009883a 	mov	r4,zero
    1e8c:	88800015 	stw	r2,0(r17)
    1e90:	003fee06 	br	1e4c <__sfp+0xa8>

00001e94 <_malloc_trim_r>:
    1e94:	defffb04 	addi	sp,sp,-20
    1e98:	dcc00315 	stw	r19,12(sp)
    1e9c:	04c00034 	movhi	r19,0
    1ea0:	9cd60e04 	addi	r19,r19,22584
    1ea4:	dc800215 	stw	r18,8(sp)
    1ea8:	dc400115 	stw	r17,4(sp)
    1eac:	dc000015 	stw	r16,0(sp)
    1eb0:	2823883a 	mov	r17,r5
    1eb4:	2025883a 	mov	r18,r4
    1eb8:	dfc00415 	stw	ra,16(sp)
    1ebc:	00032300 	call	3230 <__malloc_lock>
    1ec0:	98800217 	ldw	r2,8(r19)
    1ec4:	9009883a 	mov	r4,r18
    1ec8:	000b883a 	mov	r5,zero
    1ecc:	10c00117 	ldw	r3,4(r2)
    1ed0:	00bfff04 	movi	r2,-4
    1ed4:	18a0703a 	and	r16,r3,r2
    1ed8:	8463c83a 	sub	r17,r16,r17
    1edc:	8c43fbc4 	addi	r17,r17,4079
    1ee0:	8822d33a 	srli	r17,r17,12
    1ee4:	0083ffc4 	movi	r2,4095
    1ee8:	8c7fffc4 	addi	r17,r17,-1
    1eec:	8822933a 	slli	r17,r17,12
    1ef0:	1440060e 	bge	r2,r17,1f0c <_malloc_trim_r+0x78>
    1ef4:	00017f80 	call	17f8 <_sbrk_r>
    1ef8:	98c00217 	ldw	r3,8(r19)
    1efc:	9009883a 	mov	r4,r18
    1f00:	044bc83a 	sub	r5,zero,r17
    1f04:	80c7883a 	add	r3,r16,r3
    1f08:	10c00926 	beq	r2,r3,1f30 <_malloc_trim_r+0x9c>
    1f0c:	00032500 	call	3250 <__malloc_unlock>
    1f10:	0005883a 	mov	r2,zero
    1f14:	dfc00417 	ldw	ra,16(sp)
    1f18:	dcc00317 	ldw	r19,12(sp)
    1f1c:	dc800217 	ldw	r18,8(sp)
    1f20:	dc400117 	ldw	r17,4(sp)
    1f24:	dc000017 	ldw	r16,0(sp)
    1f28:	dec00504 	addi	sp,sp,20
    1f2c:	f800283a 	ret
    1f30:	9009883a 	mov	r4,r18
    1f34:	00017f80 	call	17f8 <_sbrk_r>
    1f38:	844dc83a 	sub	r6,r16,r17
    1f3c:	00ffffc4 	movi	r3,-1
    1f40:	9009883a 	mov	r4,r18
    1f44:	000b883a 	mov	r5,zero
    1f48:	01c00034 	movhi	r7,0
    1f4c:	39da6804 	addi	r7,r7,27040
    1f50:	31800054 	ori	r6,r6,1
    1f54:	10c00926 	beq	r2,r3,1f7c <_malloc_trim_r+0xe8>
    1f58:	38800017 	ldw	r2,0(r7)
    1f5c:	98c00217 	ldw	r3,8(r19)
    1f60:	9009883a 	mov	r4,r18
    1f64:	1445c83a 	sub	r2,r2,r17
    1f68:	38800015 	stw	r2,0(r7)
    1f6c:	19800115 	stw	r6,4(r3)
    1f70:	00032500 	call	3250 <__malloc_unlock>
    1f74:	00800044 	movi	r2,1
    1f78:	003fe606 	br	1f14 <_malloc_trim_r+0x80>
    1f7c:	00017f80 	call	17f8 <_sbrk_r>
    1f80:	99800217 	ldw	r6,8(r19)
    1f84:	100f883a 	mov	r7,r2
    1f88:	9009883a 	mov	r4,r18
    1f8c:	1187c83a 	sub	r3,r2,r6
    1f90:	008003c4 	movi	r2,15
    1f94:	19400054 	ori	r5,r3,1
    1f98:	10ffdc0e 	bge	r2,r3,1f0c <_malloc_trim_r+0x78>
    1f9c:	00800034 	movhi	r2,0
    1fa0:	1097ae04 	addi	r2,r2,24248
    1fa4:	10c00017 	ldw	r3,0(r2)
    1fa8:	00800034 	movhi	r2,0
    1fac:	109a6804 	addi	r2,r2,27040
    1fb0:	31400115 	stw	r5,4(r6)
    1fb4:	38c7c83a 	sub	r3,r7,r3
    1fb8:	10c00015 	stw	r3,0(r2)
    1fbc:	003fd306 	br	1f0c <_malloc_trim_r+0x78>

00001fc0 <_free_r>:
    1fc0:	defffd04 	addi	sp,sp,-12
    1fc4:	dc400115 	stw	r17,4(sp)
    1fc8:	dc000015 	stw	r16,0(sp)
    1fcc:	dfc00215 	stw	ra,8(sp)
    1fd0:	2821883a 	mov	r16,r5
    1fd4:	2023883a 	mov	r17,r4
    1fd8:	28005a26 	beq	r5,zero,2144 <_free_r+0x184>
    1fdc:	00032300 	call	3230 <__malloc_lock>
    1fe0:	823ffe04 	addi	r8,r16,-8
    1fe4:	41400117 	ldw	r5,4(r8)
    1fe8:	00bfff84 	movi	r2,-2
    1fec:	02800034 	movhi	r10,0
    1ff0:	52960e04 	addi	r10,r10,22584
    1ff4:	288e703a 	and	r7,r5,r2
    1ff8:	41cd883a 	add	r6,r8,r7
    1ffc:	30c00117 	ldw	r3,4(r6)
    2000:	51000217 	ldw	r4,8(r10)
    2004:	00bfff04 	movi	r2,-4
    2008:	1892703a 	and	r9,r3,r2
    200c:	5017883a 	mov	r11,r10
    2010:	31006726 	beq	r6,r4,21b0 <_free_r+0x1f0>
    2014:	2880004c 	andi	r2,r5,1
    2018:	1005003a 	cmpeq	r2,r2,zero
    201c:	32400115 	stw	r9,4(r6)
    2020:	10001a1e 	bne	r2,zero,208c <_free_r+0xcc>
    2024:	000b883a 	mov	r5,zero
    2028:	3247883a 	add	r3,r6,r9
    202c:	18800117 	ldw	r2,4(r3)
    2030:	1080004c 	andi	r2,r2,1
    2034:	1000231e 	bne	r2,zero,20c4 <_free_r+0x104>
    2038:	280ac03a 	cmpne	r5,r5,zero
    203c:	3a4f883a 	add	r7,r7,r9
    2040:	2800451e 	bne	r5,zero,2158 <_free_r+0x198>
    2044:	31000217 	ldw	r4,8(r6)
    2048:	00800034 	movhi	r2,0
    204c:	10961004 	addi	r2,r2,22592
    2050:	20807b26 	beq	r4,r2,2240 <_free_r+0x280>
    2054:	30800317 	ldw	r2,12(r6)
    2058:	3a07883a 	add	r3,r7,r8
    205c:	19c00015 	stw	r7,0(r3)
    2060:	11000215 	stw	r4,8(r2)
    2064:	20800315 	stw	r2,12(r4)
    2068:	38800054 	ori	r2,r7,1
    206c:	40800115 	stw	r2,4(r8)
    2070:	28001a26 	beq	r5,zero,20dc <_free_r+0x11c>
    2074:	8809883a 	mov	r4,r17
    2078:	dfc00217 	ldw	ra,8(sp)
    207c:	dc400117 	ldw	r17,4(sp)
    2080:	dc000017 	ldw	r16,0(sp)
    2084:	dec00304 	addi	sp,sp,12
    2088:	00032501 	jmpi	3250 <__malloc_unlock>
    208c:	80bffe17 	ldw	r2,-8(r16)
    2090:	50c00204 	addi	r3,r10,8
    2094:	4091c83a 	sub	r8,r8,r2
    2098:	41000217 	ldw	r4,8(r8)
    209c:	388f883a 	add	r7,r7,r2
    20a0:	20c06126 	beq	r4,r3,2228 <_free_r+0x268>
    20a4:	40800317 	ldw	r2,12(r8)
    20a8:	3247883a 	add	r3,r6,r9
    20ac:	000b883a 	mov	r5,zero
    20b0:	11000215 	stw	r4,8(r2)
    20b4:	20800315 	stw	r2,12(r4)
    20b8:	18800117 	ldw	r2,4(r3)
    20bc:	1080004c 	andi	r2,r2,1
    20c0:	103fdd26 	beq	r2,zero,2038 <_free_r+0x78>
    20c4:	38800054 	ori	r2,r7,1
    20c8:	3a07883a 	add	r3,r7,r8
    20cc:	280ac03a 	cmpne	r5,r5,zero
    20d0:	40800115 	stw	r2,4(r8)
    20d4:	19c00015 	stw	r7,0(r3)
    20d8:	283fe61e 	bne	r5,zero,2074 <_free_r+0xb4>
    20dc:	00807fc4 	movi	r2,511
    20e0:	11c01f2e 	bgeu	r2,r7,2160 <_free_r+0x1a0>
    20e4:	3806d27a 	srli	r3,r7,9
    20e8:	1800481e 	bne	r3,zero,220c <_free_r+0x24c>
    20ec:	3804d0fa 	srli	r2,r7,3
    20f0:	100690fa 	slli	r3,r2,3
    20f4:	1acd883a 	add	r6,r3,r11
    20f8:	31400217 	ldw	r5,8(r6)
    20fc:	31405926 	beq	r6,r5,2264 <_free_r+0x2a4>
    2100:	28800117 	ldw	r2,4(r5)
    2104:	00ffff04 	movi	r3,-4
    2108:	10c4703a 	and	r2,r2,r3
    210c:	3880022e 	bgeu	r7,r2,2118 <_free_r+0x158>
    2110:	29400217 	ldw	r5,8(r5)
    2114:	317ffa1e 	bne	r6,r5,2100 <_free_r+0x140>
    2118:	29800317 	ldw	r6,12(r5)
    211c:	41800315 	stw	r6,12(r8)
    2120:	41400215 	stw	r5,8(r8)
    2124:	8809883a 	mov	r4,r17
    2128:	2a000315 	stw	r8,12(r5)
    212c:	32000215 	stw	r8,8(r6)
    2130:	dfc00217 	ldw	ra,8(sp)
    2134:	dc400117 	ldw	r17,4(sp)
    2138:	dc000017 	ldw	r16,0(sp)
    213c:	dec00304 	addi	sp,sp,12
    2140:	00032501 	jmpi	3250 <__malloc_unlock>
    2144:	dfc00217 	ldw	ra,8(sp)
    2148:	dc400117 	ldw	r17,4(sp)
    214c:	dc000017 	ldw	r16,0(sp)
    2150:	dec00304 	addi	sp,sp,12
    2154:	f800283a 	ret
    2158:	31000217 	ldw	r4,8(r6)
    215c:	003fbd06 	br	2054 <_free_r+0x94>
    2160:	3806d0fa 	srli	r3,r7,3
    2164:	00800044 	movi	r2,1
    2168:	51400117 	ldw	r5,4(r10)
    216c:	180890fa 	slli	r4,r3,3
    2170:	1807d0ba 	srai	r3,r3,2
    2174:	22c9883a 	add	r4,r4,r11
    2178:	21800217 	ldw	r6,8(r4)
    217c:	10c4983a 	sll	r2,r2,r3
    2180:	41000315 	stw	r4,12(r8)
    2184:	41800215 	stw	r6,8(r8)
    2188:	288ab03a 	or	r5,r5,r2
    218c:	22000215 	stw	r8,8(r4)
    2190:	8809883a 	mov	r4,r17
    2194:	51400115 	stw	r5,4(r10)
    2198:	32000315 	stw	r8,12(r6)
    219c:	dfc00217 	ldw	ra,8(sp)
    21a0:	dc400117 	ldw	r17,4(sp)
    21a4:	dc000017 	ldw	r16,0(sp)
    21a8:	dec00304 	addi	sp,sp,12
    21ac:	00032501 	jmpi	3250 <__malloc_unlock>
    21b0:	2880004c 	andi	r2,r5,1
    21b4:	3a4d883a 	add	r6,r7,r9
    21b8:	1000071e 	bne	r2,zero,21d8 <_free_r+0x218>
    21bc:	80bffe17 	ldw	r2,-8(r16)
    21c0:	4091c83a 	sub	r8,r8,r2
    21c4:	41000317 	ldw	r4,12(r8)
    21c8:	40c00217 	ldw	r3,8(r8)
    21cc:	308d883a 	add	r6,r6,r2
    21d0:	20c00215 	stw	r3,8(r4)
    21d4:	19000315 	stw	r4,12(r3)
    21d8:	00800034 	movhi	r2,0
    21dc:	1097ad04 	addi	r2,r2,24244
    21e0:	11000017 	ldw	r4,0(r2)
    21e4:	30c00054 	ori	r3,r6,1
    21e8:	52000215 	stw	r8,8(r10)
    21ec:	40c00115 	stw	r3,4(r8)
    21f0:	313fa036 	bltu	r6,r4,2074 <_free_r+0xb4>
    21f4:	00800034 	movhi	r2,0
    21f8:	109a6004 	addi	r2,r2,27008
    21fc:	11400017 	ldw	r5,0(r2)
    2200:	8809883a 	mov	r4,r17
    2204:	0001e940 	call	1e94 <_malloc_trim_r>
    2208:	003f9a06 	br	2074 <_free_r+0xb4>
    220c:	00800104 	movi	r2,4
    2210:	10c0072e 	bgeu	r2,r3,2230 <_free_r+0x270>
    2214:	00800504 	movi	r2,20
    2218:	10c01936 	bltu	r2,r3,2280 <_free_r+0x2c0>
    221c:	188016c4 	addi	r2,r3,91
    2220:	100690fa 	slli	r3,r2,3
    2224:	003fb306 	br	20f4 <_free_r+0x134>
    2228:	01400044 	movi	r5,1
    222c:	003f7e06 	br	2028 <_free_r+0x68>
    2230:	3804d1ba 	srli	r2,r7,6
    2234:	10800e04 	addi	r2,r2,56
    2238:	100690fa 	slli	r3,r2,3
    223c:	003fad06 	br	20f4 <_free_r+0x134>
    2240:	22000315 	stw	r8,12(r4)
    2244:	22000215 	stw	r8,8(r4)
    2248:	3a05883a 	add	r2,r7,r8
    224c:	38c00054 	ori	r3,r7,1
    2250:	11c00015 	stw	r7,0(r2)
    2254:	41000215 	stw	r4,8(r8)
    2258:	40c00115 	stw	r3,4(r8)
    225c:	41000315 	stw	r4,12(r8)
    2260:	003f8406 	br	2074 <_free_r+0xb4>
    2264:	1005d0ba 	srai	r2,r2,2
    2268:	00c00044 	movi	r3,1
    226c:	51000117 	ldw	r4,4(r10)
    2270:	1886983a 	sll	r3,r3,r2
    2274:	20c8b03a 	or	r4,r4,r3
    2278:	51000115 	stw	r4,4(r10)
    227c:	003fa706 	br	211c <_free_r+0x15c>
    2280:	00801504 	movi	r2,84
    2284:	10c00436 	bltu	r2,r3,2298 <_free_r+0x2d8>
    2288:	3804d33a 	srli	r2,r7,12
    228c:	10801b84 	addi	r2,r2,110
    2290:	100690fa 	slli	r3,r2,3
    2294:	003f9706 	br	20f4 <_free_r+0x134>
    2298:	00805504 	movi	r2,340
    229c:	10c00436 	bltu	r2,r3,22b0 <_free_r+0x2f0>
    22a0:	3804d3fa 	srli	r2,r7,15
    22a4:	10801dc4 	addi	r2,r2,119
    22a8:	100690fa 	slli	r3,r2,3
    22ac:	003f9106 	br	20f4 <_free_r+0x134>
    22b0:	00815504 	movi	r2,1364
    22b4:	10c0032e 	bgeu	r2,r3,22c4 <_free_r+0x304>
    22b8:	00801f84 	movi	r2,126
    22bc:	00c0fc04 	movi	r3,1008
    22c0:	003f8c06 	br	20f4 <_free_r+0x134>
    22c4:	3804d4ba 	srli	r2,r7,18
    22c8:	10801f04 	addi	r2,r2,124
    22cc:	100690fa 	slli	r3,r2,3
    22d0:	003f8806 	br	20f4 <_free_r+0x134>

000022d4 <_fwalk_reent>:
    22d4:	defff704 	addi	sp,sp,-36
    22d8:	dcc00315 	stw	r19,12(sp)
    22dc:	24c0b804 	addi	r19,r4,736
    22e0:	dd800615 	stw	r22,24(sp)
    22e4:	dd400515 	stw	r21,20(sp)
    22e8:	dfc00815 	stw	ra,32(sp)
    22ec:	ddc00715 	stw	r23,28(sp)
    22f0:	dd000415 	stw	r20,16(sp)
    22f4:	dc800215 	stw	r18,8(sp)
    22f8:	dc400115 	stw	r17,4(sp)
    22fc:	dc000015 	stw	r16,0(sp)
    2300:	202b883a 	mov	r21,r4
    2304:	282d883a 	mov	r22,r5
    2308:	0001c2c0 	call	1c2c <__sfp_lock_acquire>
    230c:	98002126 	beq	r19,zero,2394 <_fwalk_reent+0xc0>
    2310:	002f883a 	mov	r23,zero
    2314:	9c800117 	ldw	r18,4(r19)
    2318:	9c000217 	ldw	r16,8(r19)
    231c:	90bfffc4 	addi	r2,r18,-1
    2320:	10000d16 	blt	r2,zero,2358 <_fwalk_reent+0x84>
    2324:	0023883a 	mov	r17,zero
    2328:	053fffc4 	movi	r20,-1
    232c:	8080030f 	ldh	r2,12(r16)
    2330:	8c400044 	addi	r17,r17,1
    2334:	10000626 	beq	r2,zero,2350 <_fwalk_reent+0x7c>
    2338:	8080038f 	ldh	r2,14(r16)
    233c:	800b883a 	mov	r5,r16
    2340:	a809883a 	mov	r4,r21
    2344:	15000226 	beq	r2,r20,2350 <_fwalk_reent+0x7c>
    2348:	b03ee83a 	callr	r22
    234c:	b8aeb03a 	or	r23,r23,r2
    2350:	84001704 	addi	r16,r16,92
    2354:	947ff51e 	bne	r18,r17,232c <_fwalk_reent+0x58>
    2358:	9cc00017 	ldw	r19,0(r19)
    235c:	983fed1e 	bne	r19,zero,2314 <_fwalk_reent+0x40>
    2360:	0001c300 	call	1c30 <__sfp_lock_release>
    2364:	b805883a 	mov	r2,r23
    2368:	dfc00817 	ldw	ra,32(sp)
    236c:	ddc00717 	ldw	r23,28(sp)
    2370:	dd800617 	ldw	r22,24(sp)
    2374:	dd400517 	ldw	r21,20(sp)
    2378:	dd000417 	ldw	r20,16(sp)
    237c:	dcc00317 	ldw	r19,12(sp)
    2380:	dc800217 	ldw	r18,8(sp)
    2384:	dc400117 	ldw	r17,4(sp)
    2388:	dc000017 	ldw	r16,0(sp)
    238c:	dec00904 	addi	sp,sp,36
    2390:	f800283a 	ret
    2394:	002f883a 	mov	r23,zero
    2398:	003ff106 	br	2360 <_fwalk_reent+0x8c>

0000239c <_fwalk>:
    239c:	defff804 	addi	sp,sp,-32
    23a0:	dcc00315 	stw	r19,12(sp)
    23a4:	24c0b804 	addi	r19,r4,736
    23a8:	dd400515 	stw	r21,20(sp)
    23ac:	dfc00715 	stw	ra,28(sp)
    23b0:	dd800615 	stw	r22,24(sp)
    23b4:	dd000415 	stw	r20,16(sp)
    23b8:	dc800215 	stw	r18,8(sp)
    23bc:	dc400115 	stw	r17,4(sp)
    23c0:	dc000015 	stw	r16,0(sp)
    23c4:	282b883a 	mov	r21,r5
    23c8:	0001c2c0 	call	1c2c <__sfp_lock_acquire>
    23cc:	98001f26 	beq	r19,zero,244c <_fwalk+0xb0>
    23d0:	002d883a 	mov	r22,zero
    23d4:	9c800117 	ldw	r18,4(r19)
    23d8:	9c000217 	ldw	r16,8(r19)
    23dc:	90bfffc4 	addi	r2,r18,-1
    23e0:	10000c16 	blt	r2,zero,2414 <_fwalk+0x78>
    23e4:	0023883a 	mov	r17,zero
    23e8:	053fffc4 	movi	r20,-1
    23ec:	8080030f 	ldh	r2,12(r16)
    23f0:	8c400044 	addi	r17,r17,1
    23f4:	10000526 	beq	r2,zero,240c <_fwalk+0x70>
    23f8:	8080038f 	ldh	r2,14(r16)
    23fc:	8009883a 	mov	r4,r16
    2400:	15000226 	beq	r2,r20,240c <_fwalk+0x70>
    2404:	a83ee83a 	callr	r21
    2408:	b0acb03a 	or	r22,r22,r2
    240c:	84001704 	addi	r16,r16,92
    2410:	947ff61e 	bne	r18,r17,23ec <_fwalk+0x50>
    2414:	9cc00017 	ldw	r19,0(r19)
    2418:	983fee1e 	bne	r19,zero,23d4 <_fwalk+0x38>
    241c:	0001c300 	call	1c30 <__sfp_lock_release>
    2420:	b005883a 	mov	r2,r22
    2424:	dfc00717 	ldw	ra,28(sp)
    2428:	dd800617 	ldw	r22,24(sp)
    242c:	dd400517 	ldw	r21,20(sp)
    2430:	dd000417 	ldw	r20,16(sp)
    2434:	dcc00317 	ldw	r19,12(sp)
    2438:	dc800217 	ldw	r18,8(sp)
    243c:	dc400117 	ldw	r17,4(sp)
    2440:	dc000017 	ldw	r16,0(sp)
    2444:	dec00804 	addi	sp,sp,32
    2448:	f800283a 	ret
    244c:	002d883a 	mov	r22,zero
    2450:	003ff206 	br	241c <_fwalk+0x80>

00002454 <__smakebuf_r>:
    2454:	2880030b 	ldhu	r2,12(r5)
    2458:	deffed04 	addi	sp,sp,-76
    245c:	dc401015 	stw	r17,64(sp)
    2460:	1080008c 	andi	r2,r2,2
    2464:	dc000f15 	stw	r16,60(sp)
    2468:	dfc01215 	stw	ra,72(sp)
    246c:	dc801115 	stw	r18,68(sp)
    2470:	2821883a 	mov	r16,r5
    2474:	2023883a 	mov	r17,r4
    2478:	10000b26 	beq	r2,zero,24a8 <__smakebuf_r+0x54>
    247c:	28c010c4 	addi	r3,r5,67
    2480:	00800044 	movi	r2,1
    2484:	28800515 	stw	r2,20(r5)
    2488:	28c00415 	stw	r3,16(r5)
    248c:	28c00015 	stw	r3,0(r5)
    2490:	dfc01217 	ldw	ra,72(sp)
    2494:	dc801117 	ldw	r18,68(sp)
    2498:	dc401017 	ldw	r17,64(sp)
    249c:	dc000f17 	ldw	r16,60(sp)
    24a0:	dec01304 	addi	sp,sp,76
    24a4:	f800283a 	ret
    24a8:	2940038f 	ldh	r5,14(r5)
    24ac:	28002116 	blt	r5,zero,2534 <__smakebuf_r+0xe0>
    24b0:	d80d883a 	mov	r6,sp
    24b4:	00029d80 	call	29d8 <_fstat_r>
    24b8:	10001e16 	blt	r2,zero,2534 <__smakebuf_r+0xe0>
    24bc:	d8800117 	ldw	r2,4(sp)
    24c0:	00e00014 	movui	r3,32768
    24c4:	113c000c 	andi	r4,r2,61440
    24c8:	20c03126 	beq	r4,r3,2590 <__smakebuf_r+0x13c>
    24cc:	8080030b 	ldhu	r2,12(r16)
    24d0:	00c80004 	movi	r3,8192
    24d4:	10820014 	ori	r2,r2,2048
    24d8:	8080030d 	sth	r2,12(r16)
    24dc:	20c01e26 	beq	r4,r3,2558 <__smakebuf_r+0x104>
    24e0:	04810004 	movi	r18,1024
    24e4:	8809883a 	mov	r4,r17
    24e8:	900b883a 	mov	r5,r18
    24ec:	00008600 	call	860 <_malloc_r>
    24f0:	1009883a 	mov	r4,r2
    24f4:	10003126 	beq	r2,zero,25bc <__smakebuf_r+0x168>
    24f8:	80c0030b 	ldhu	r3,12(r16)
    24fc:	00800034 	movhi	r2,0
    2500:	10874804 	addi	r2,r2,7456
    2504:	88800f15 	stw	r2,60(r17)
    2508:	18c02014 	ori	r3,r3,128
    250c:	84800515 	stw	r18,20(r16)
    2510:	80c0030d 	sth	r3,12(r16)
    2514:	81000415 	stw	r4,16(r16)
    2518:	81000015 	stw	r4,0(r16)
    251c:	dfc01217 	ldw	ra,72(sp)
    2520:	dc801117 	ldw	r18,68(sp)
    2524:	dc401017 	ldw	r17,64(sp)
    2528:	dc000f17 	ldw	r16,60(sp)
    252c:	dec01304 	addi	sp,sp,76
    2530:	f800283a 	ret
    2534:	80c0030b 	ldhu	r3,12(r16)
    2538:	1880200c 	andi	r2,r3,128
    253c:	10000426 	beq	r2,zero,2550 <__smakebuf_r+0xfc>
    2540:	04801004 	movi	r18,64
    2544:	18820014 	ori	r2,r3,2048
    2548:	8080030d 	sth	r2,12(r16)
    254c:	003fe506 	br	24e4 <__smakebuf_r+0x90>
    2550:	04810004 	movi	r18,1024
    2554:	003ffb06 	br	2544 <__smakebuf_r+0xf0>
    2558:	8140038f 	ldh	r5,14(r16)
    255c:	8809883a 	mov	r4,r17
    2560:	0002a4c0 	call	2a4c <_isatty_r>
    2564:	103fde26 	beq	r2,zero,24e0 <__smakebuf_r+0x8c>
    2568:	8080030b 	ldhu	r2,12(r16)
    256c:	80c010c4 	addi	r3,r16,67
    2570:	04810004 	movi	r18,1024
    2574:	10800054 	ori	r2,r2,1
    2578:	8080030d 	sth	r2,12(r16)
    257c:	00800044 	movi	r2,1
    2580:	80c00415 	stw	r3,16(r16)
    2584:	80800515 	stw	r2,20(r16)
    2588:	80c00015 	stw	r3,0(r16)
    258c:	003fd506 	br	24e4 <__smakebuf_r+0x90>
    2590:	80c00a17 	ldw	r3,40(r16)
    2594:	00800034 	movhi	r2,0
    2598:	1089a204 	addi	r2,r2,9864
    259c:	18bfcb1e 	bne	r3,r2,24cc <__smakebuf_r+0x78>
    25a0:	8080030b 	ldhu	r2,12(r16)
    25a4:	00c10004 	movi	r3,1024
    25a8:	1825883a 	mov	r18,r3
    25ac:	10c4b03a 	or	r2,r2,r3
    25b0:	8080030d 	sth	r2,12(r16)
    25b4:	80c01315 	stw	r3,76(r16)
    25b8:	003fca06 	br	24e4 <__smakebuf_r+0x90>
    25bc:	8100030b 	ldhu	r4,12(r16)
    25c0:	2080800c 	andi	r2,r4,512
    25c4:	103fb21e 	bne	r2,zero,2490 <__smakebuf_r+0x3c>
    25c8:	80c010c4 	addi	r3,r16,67
    25cc:	21000094 	ori	r4,r4,2
    25d0:	00800044 	movi	r2,1
    25d4:	80800515 	stw	r2,20(r16)
    25d8:	8100030d 	sth	r4,12(r16)
    25dc:	80c00415 	stw	r3,16(r16)
    25e0:	80c00015 	stw	r3,0(r16)
    25e4:	003faa06 	br	2490 <__smakebuf_r+0x3c>

000025e8 <memset>:
    25e8:	008000c4 	movi	r2,3
    25ec:	29403fcc 	andi	r5,r5,255
    25f0:	2007883a 	mov	r3,r4
    25f4:	1180022e 	bgeu	r2,r6,2600 <memset+0x18>
    25f8:	2084703a 	and	r2,r4,r2
    25fc:	10000826 	beq	r2,zero,2620 <memset+0x38>
    2600:	30000526 	beq	r6,zero,2618 <memset+0x30>
    2604:	2805883a 	mov	r2,r5
    2608:	30cd883a 	add	r6,r6,r3
    260c:	18800005 	stb	r2,0(r3)
    2610:	18c00044 	addi	r3,r3,1
    2614:	19bffd1e 	bne	r3,r6,260c <memset+0x24>
    2618:	2005883a 	mov	r2,r4
    261c:	f800283a 	ret
    2620:	2804923a 	slli	r2,r5,8
    2624:	020003c4 	movi	r8,15
    2628:	200f883a 	mov	r7,r4
    262c:	2884b03a 	or	r2,r5,r2
    2630:	1006943a 	slli	r3,r2,16
    2634:	10c6b03a 	or	r3,r2,r3
    2638:	41800a2e 	bgeu	r8,r6,2664 <memset+0x7c>
    263c:	4005883a 	mov	r2,r8
    2640:	31bffc04 	addi	r6,r6,-16
    2644:	38c00015 	stw	r3,0(r7)
    2648:	38c00115 	stw	r3,4(r7)
    264c:	38c00215 	stw	r3,8(r7)
    2650:	38c00315 	stw	r3,12(r7)
    2654:	39c00404 	addi	r7,r7,16
    2658:	11bff936 	bltu	r2,r6,2640 <memset+0x58>
    265c:	008000c4 	movi	r2,3
    2660:	1180052e 	bgeu	r2,r6,2678 <memset+0x90>
    2664:	31bfff04 	addi	r6,r6,-4
    2668:	008000c4 	movi	r2,3
    266c:	38c00015 	stw	r3,0(r7)
    2670:	39c00104 	addi	r7,r7,4
    2674:	11bffb36 	bltu	r2,r6,2664 <memset+0x7c>
    2678:	3807883a 	mov	r3,r7
    267c:	003fe006 	br	2600 <memset+0x18>

00002680 <__sclose>:
    2680:	2940038f 	ldh	r5,14(r5)
    2684:	00028441 	jmpi	2844 <_close_r>

00002688 <__sseek>:
    2688:	defffe04 	addi	sp,sp,-8
    268c:	dc000015 	stw	r16,0(sp)
    2690:	2821883a 	mov	r16,r5
    2694:	2940038f 	ldh	r5,14(r5)
    2698:	dfc00115 	stw	ra,4(sp)
    269c:	0002abc0 	call	2abc <_lseek_r>
    26a0:	1007883a 	mov	r3,r2
    26a4:	00bfffc4 	movi	r2,-1
    26a8:	18800926 	beq	r3,r2,26d0 <__sseek+0x48>
    26ac:	8080030b 	ldhu	r2,12(r16)
    26b0:	80c01415 	stw	r3,80(r16)
    26b4:	10840014 	ori	r2,r2,4096
    26b8:	8080030d 	sth	r2,12(r16)
    26bc:	1805883a 	mov	r2,r3
    26c0:	dfc00117 	ldw	ra,4(sp)
    26c4:	dc000017 	ldw	r16,0(sp)
    26c8:	dec00204 	addi	sp,sp,8
    26cc:	f800283a 	ret
    26d0:	8080030b 	ldhu	r2,12(r16)
    26d4:	10bbffcc 	andi	r2,r2,61439
    26d8:	8080030d 	sth	r2,12(r16)
    26dc:	1805883a 	mov	r2,r3
    26e0:	dfc00117 	ldw	ra,4(sp)
    26e4:	dc000017 	ldw	r16,0(sp)
    26e8:	dec00204 	addi	sp,sp,8
    26ec:	f800283a 	ret

000026f0 <__swrite>:
    26f0:	2880030b 	ldhu	r2,12(r5)
    26f4:	defffb04 	addi	sp,sp,-20
    26f8:	dcc00315 	stw	r19,12(sp)
    26fc:	1080400c 	andi	r2,r2,256
    2700:	dc800215 	stw	r18,8(sp)
    2704:	dc400115 	stw	r17,4(sp)
    2708:	dc000015 	stw	r16,0(sp)
    270c:	3027883a 	mov	r19,r6
    2710:	3825883a 	mov	r18,r7
    2714:	dfc00415 	stw	ra,16(sp)
    2718:	2821883a 	mov	r16,r5
    271c:	000d883a 	mov	r6,zero
    2720:	01c00084 	movi	r7,2
    2724:	2023883a 	mov	r17,r4
    2728:	10000226 	beq	r2,zero,2734 <__swrite+0x44>
    272c:	2940038f 	ldh	r5,14(r5)
    2730:	0002abc0 	call	2abc <_lseek_r>
    2734:	8080030b 	ldhu	r2,12(r16)
    2738:	8140038f 	ldh	r5,14(r16)
    273c:	8809883a 	mov	r4,r17
    2740:	10bbffcc 	andi	r2,r2,61439
    2744:	980d883a 	mov	r6,r19
    2748:	900f883a 	mov	r7,r18
    274c:	8080030d 	sth	r2,12(r16)
    2750:	dfc00417 	ldw	ra,16(sp)
    2754:	dcc00317 	ldw	r19,12(sp)
    2758:	dc800217 	ldw	r18,8(sp)
    275c:	dc400117 	ldw	r17,4(sp)
    2760:	dc000017 	ldw	r16,0(sp)
    2764:	dec00504 	addi	sp,sp,20
    2768:	00027cc1 	jmpi	27cc <_write_r>

0000276c <__sread>:
    276c:	defffe04 	addi	sp,sp,-8
    2770:	dc000015 	stw	r16,0(sp)
    2774:	2821883a 	mov	r16,r5
    2778:	2940038f 	ldh	r5,14(r5)
    277c:	dfc00115 	stw	ra,4(sp)
    2780:	0002b340 	call	2b34 <_read_r>
    2784:	1007883a 	mov	r3,r2
    2788:	10000816 	blt	r2,zero,27ac <__sread+0x40>
    278c:	80801417 	ldw	r2,80(r16)
    2790:	10c5883a 	add	r2,r2,r3
    2794:	80801415 	stw	r2,80(r16)
    2798:	1805883a 	mov	r2,r3
    279c:	dfc00117 	ldw	ra,4(sp)
    27a0:	dc000017 	ldw	r16,0(sp)
    27a4:	dec00204 	addi	sp,sp,8
    27a8:	f800283a 	ret
    27ac:	8080030b 	ldhu	r2,12(r16)
    27b0:	10bbffcc 	andi	r2,r2,61439
    27b4:	8080030d 	sth	r2,12(r16)
    27b8:	1805883a 	mov	r2,r3
    27bc:	dfc00117 	ldw	ra,4(sp)
    27c0:	dc000017 	ldw	r16,0(sp)
    27c4:	dec00204 	addi	sp,sp,8
    27c8:	f800283a 	ret

000027cc <_write_r>:
    27cc:	defffd04 	addi	sp,sp,-12
    27d0:	dc000015 	stw	r16,0(sp)
    27d4:	04000034 	movhi	r16,0
    27d8:	841a6304 	addi	r16,r16,27020
    27dc:	dc400115 	stw	r17,4(sp)
    27e0:	80000015 	stw	zero,0(r16)
    27e4:	2023883a 	mov	r17,r4
    27e8:	2809883a 	mov	r4,r5
    27ec:	300b883a 	mov	r5,r6
    27f0:	380d883a 	mov	r6,r7
    27f4:	dfc00215 	stw	ra,8(sp)
    27f8:	000353c0 	call	353c <write>
    27fc:	1007883a 	mov	r3,r2
    2800:	00bfffc4 	movi	r2,-1
    2804:	18800626 	beq	r3,r2,2820 <_write_r+0x54>
    2808:	1805883a 	mov	r2,r3
    280c:	dfc00217 	ldw	ra,8(sp)
    2810:	dc400117 	ldw	r17,4(sp)
    2814:	dc000017 	ldw	r16,0(sp)
    2818:	dec00304 	addi	sp,sp,12
    281c:	f800283a 	ret
    2820:	80800017 	ldw	r2,0(r16)
    2824:	103ff826 	beq	r2,zero,2808 <_write_r+0x3c>
    2828:	88800015 	stw	r2,0(r17)
    282c:	1805883a 	mov	r2,r3
    2830:	dfc00217 	ldw	ra,8(sp)
    2834:	dc400117 	ldw	r17,4(sp)
    2838:	dc000017 	ldw	r16,0(sp)
    283c:	dec00304 	addi	sp,sp,12
    2840:	f800283a 	ret

00002844 <_close_r>:
    2844:	defffd04 	addi	sp,sp,-12
    2848:	dc000015 	stw	r16,0(sp)
    284c:	04000034 	movhi	r16,0
    2850:	841a6304 	addi	r16,r16,27020
    2854:	dc400115 	stw	r17,4(sp)
    2858:	80000015 	stw	zero,0(r16)
    285c:	2023883a 	mov	r17,r4
    2860:	2809883a 	mov	r4,r5
    2864:	dfc00215 	stw	ra,8(sp)
    2868:	0002bac0 	call	2bac <close>
    286c:	1007883a 	mov	r3,r2
    2870:	00bfffc4 	movi	r2,-1
    2874:	18800626 	beq	r3,r2,2890 <_close_r+0x4c>
    2878:	1805883a 	mov	r2,r3
    287c:	dfc00217 	ldw	ra,8(sp)
    2880:	dc400117 	ldw	r17,4(sp)
    2884:	dc000017 	ldw	r16,0(sp)
    2888:	dec00304 	addi	sp,sp,12
    288c:	f800283a 	ret
    2890:	80800017 	ldw	r2,0(r16)
    2894:	103ff826 	beq	r2,zero,2878 <_close_r+0x34>
    2898:	88800015 	stw	r2,0(r17)
    289c:	1805883a 	mov	r2,r3
    28a0:	dfc00217 	ldw	ra,8(sp)
    28a4:	dc400117 	ldw	r17,4(sp)
    28a8:	dc000017 	ldw	r16,0(sp)
    28ac:	dec00304 	addi	sp,sp,12
    28b0:	f800283a 	ret

000028b4 <_fclose_r>:
    28b4:	defffc04 	addi	sp,sp,-16
    28b8:	dc400115 	stw	r17,4(sp)
    28bc:	dc000015 	stw	r16,0(sp)
    28c0:	dfc00315 	stw	ra,12(sp)
    28c4:	dc800215 	stw	r18,8(sp)
    28c8:	2821883a 	mov	r16,r5
    28cc:	2023883a 	mov	r17,r4
    28d0:	28002926 	beq	r5,zero,2978 <_fclose_r+0xc4>
    28d4:	0001c2c0 	call	1c2c <__sfp_lock_acquire>
    28d8:	88000226 	beq	r17,zero,28e4 <_fclose_r+0x30>
    28dc:	88800e17 	ldw	r2,56(r17)
    28e0:	10002d26 	beq	r2,zero,2998 <_fclose_r+0xe4>
    28e4:	8080030f 	ldh	r2,12(r16)
    28e8:	10002226 	beq	r2,zero,2974 <_fclose_r+0xc0>
    28ec:	8809883a 	mov	r4,r17
    28f0:	800b883a 	mov	r5,r16
    28f4:	00019a40 	call	19a4 <_fflush_r>
    28f8:	1025883a 	mov	r18,r2
    28fc:	80800b17 	ldw	r2,44(r16)
    2900:	10000426 	beq	r2,zero,2914 <_fclose_r+0x60>
    2904:	81400717 	ldw	r5,28(r16)
    2908:	8809883a 	mov	r4,r17
    290c:	103ee83a 	callr	r2
    2910:	10002a16 	blt	r2,zero,29bc <_fclose_r+0x108>
    2914:	8080030b 	ldhu	r2,12(r16)
    2918:	1080200c 	andi	r2,r2,128
    291c:	1000231e 	bne	r2,zero,29ac <_fclose_r+0xf8>
    2920:	81400c17 	ldw	r5,48(r16)
    2924:	28000526 	beq	r5,zero,293c <_fclose_r+0x88>
    2928:	80801004 	addi	r2,r16,64
    292c:	28800226 	beq	r5,r2,2938 <_fclose_r+0x84>
    2930:	8809883a 	mov	r4,r17
    2934:	0001fc00 	call	1fc0 <_free_r>
    2938:	80000c15 	stw	zero,48(r16)
    293c:	81401117 	ldw	r5,68(r16)
    2940:	28000326 	beq	r5,zero,2950 <_fclose_r+0x9c>
    2944:	8809883a 	mov	r4,r17
    2948:	0001fc00 	call	1fc0 <_free_r>
    294c:	80001115 	stw	zero,68(r16)
    2950:	8000030d 	sth	zero,12(r16)
    2954:	0001c300 	call	1c30 <__sfp_lock_release>
    2958:	9005883a 	mov	r2,r18
    295c:	dfc00317 	ldw	ra,12(sp)
    2960:	dc800217 	ldw	r18,8(sp)
    2964:	dc400117 	ldw	r17,4(sp)
    2968:	dc000017 	ldw	r16,0(sp)
    296c:	dec00404 	addi	sp,sp,16
    2970:	f800283a 	ret
    2974:	0001c300 	call	1c30 <__sfp_lock_release>
    2978:	0025883a 	mov	r18,zero
    297c:	9005883a 	mov	r2,r18
    2980:	dfc00317 	ldw	ra,12(sp)
    2984:	dc800217 	ldw	r18,8(sp)
    2988:	dc400117 	ldw	r17,4(sp)
    298c:	dc000017 	ldw	r16,0(sp)
    2990:	dec00404 	addi	sp,sp,16
    2994:	f800283a 	ret
    2998:	8809883a 	mov	r4,r17
    299c:	0001c3c0 	call	1c3c <__sinit>
    29a0:	8080030f 	ldh	r2,12(r16)
    29a4:	103fd11e 	bne	r2,zero,28ec <_fclose_r+0x38>
    29a8:	003ff206 	br	2974 <_fclose_r+0xc0>
    29ac:	81400417 	ldw	r5,16(r16)
    29b0:	8809883a 	mov	r4,r17
    29b4:	0001fc00 	call	1fc0 <_free_r>
    29b8:	003fd906 	br	2920 <_fclose_r+0x6c>
    29bc:	04bfffc4 	movi	r18,-1
    29c0:	003fd406 	br	2914 <_fclose_r+0x60>

000029c4 <fclose>:
    29c4:	00800034 	movhi	r2,0
    29c8:	1097ab04 	addi	r2,r2,24236
    29cc:	200b883a 	mov	r5,r4
    29d0:	11000017 	ldw	r4,0(r2)
    29d4:	00028b41 	jmpi	28b4 <_fclose_r>

000029d8 <_fstat_r>:
    29d8:	defffd04 	addi	sp,sp,-12
    29dc:	dc000015 	stw	r16,0(sp)
    29e0:	04000034 	movhi	r16,0
    29e4:	841a6304 	addi	r16,r16,27020
    29e8:	dc400115 	stw	r17,4(sp)
    29ec:	80000015 	stw	zero,0(r16)
    29f0:	2023883a 	mov	r17,r4
    29f4:	2809883a 	mov	r4,r5
    29f8:	300b883a 	mov	r5,r6
    29fc:	dfc00215 	stw	ra,8(sp)
    2a00:	0002d340 	call	2d34 <fstat>
    2a04:	1007883a 	mov	r3,r2
    2a08:	00bfffc4 	movi	r2,-1
    2a0c:	18800626 	beq	r3,r2,2a28 <_fstat_r+0x50>
    2a10:	1805883a 	mov	r2,r3
    2a14:	dfc00217 	ldw	ra,8(sp)
    2a18:	dc400117 	ldw	r17,4(sp)
    2a1c:	dc000017 	ldw	r16,0(sp)
    2a20:	dec00304 	addi	sp,sp,12
    2a24:	f800283a 	ret
    2a28:	80800017 	ldw	r2,0(r16)
    2a2c:	103ff826 	beq	r2,zero,2a10 <_fstat_r+0x38>
    2a30:	88800015 	stw	r2,0(r17)
    2a34:	1805883a 	mov	r2,r3
    2a38:	dfc00217 	ldw	ra,8(sp)
    2a3c:	dc400117 	ldw	r17,4(sp)
    2a40:	dc000017 	ldw	r16,0(sp)
    2a44:	dec00304 	addi	sp,sp,12
    2a48:	f800283a 	ret

00002a4c <_isatty_r>:
    2a4c:	defffd04 	addi	sp,sp,-12
    2a50:	dc000015 	stw	r16,0(sp)
    2a54:	04000034 	movhi	r16,0
    2a58:	841a6304 	addi	r16,r16,27020
    2a5c:	dc400115 	stw	r17,4(sp)
    2a60:	80000015 	stw	zero,0(r16)
    2a64:	2023883a 	mov	r17,r4
    2a68:	2809883a 	mov	r4,r5
    2a6c:	dfc00215 	stw	ra,8(sp)
    2a70:	0002e680 	call	2e68 <isatty>
    2a74:	1007883a 	mov	r3,r2
    2a78:	00bfffc4 	movi	r2,-1
    2a7c:	18800626 	beq	r3,r2,2a98 <_isatty_r+0x4c>
    2a80:	1805883a 	mov	r2,r3
    2a84:	dfc00217 	ldw	ra,8(sp)
    2a88:	dc400117 	ldw	r17,4(sp)
    2a8c:	dc000017 	ldw	r16,0(sp)
    2a90:	dec00304 	addi	sp,sp,12
    2a94:	f800283a 	ret
    2a98:	80800017 	ldw	r2,0(r16)
    2a9c:	103ff826 	beq	r2,zero,2a80 <_isatty_r+0x34>
    2aa0:	88800015 	stw	r2,0(r17)
    2aa4:	1805883a 	mov	r2,r3
    2aa8:	dfc00217 	ldw	ra,8(sp)
    2aac:	dc400117 	ldw	r17,4(sp)
    2ab0:	dc000017 	ldw	r16,0(sp)
    2ab4:	dec00304 	addi	sp,sp,12
    2ab8:	f800283a 	ret

00002abc <_lseek_r>:
    2abc:	defffd04 	addi	sp,sp,-12
    2ac0:	dc000015 	stw	r16,0(sp)
    2ac4:	04000034 	movhi	r16,0
    2ac8:	841a6304 	addi	r16,r16,27020
    2acc:	dc400115 	stw	r17,4(sp)
    2ad0:	80000015 	stw	zero,0(r16)
    2ad4:	2023883a 	mov	r17,r4
    2ad8:	2809883a 	mov	r4,r5
    2adc:	300b883a 	mov	r5,r6
    2ae0:	380d883a 	mov	r6,r7
    2ae4:	dfc00215 	stw	ra,8(sp)
    2ae8:	00030740 	call	3074 <lseek>
    2aec:	1007883a 	mov	r3,r2
    2af0:	00bfffc4 	movi	r2,-1
    2af4:	18800626 	beq	r3,r2,2b10 <_lseek_r+0x54>
    2af8:	1805883a 	mov	r2,r3
    2afc:	dfc00217 	ldw	ra,8(sp)
    2b00:	dc400117 	ldw	r17,4(sp)
    2b04:	dc000017 	ldw	r16,0(sp)
    2b08:	dec00304 	addi	sp,sp,12
    2b0c:	f800283a 	ret
    2b10:	80800017 	ldw	r2,0(r16)
    2b14:	103ff826 	beq	r2,zero,2af8 <_lseek_r+0x3c>
    2b18:	88800015 	stw	r2,0(r17)
    2b1c:	1805883a 	mov	r2,r3
    2b20:	dfc00217 	ldw	ra,8(sp)
    2b24:	dc400117 	ldw	r17,4(sp)
    2b28:	dc000017 	ldw	r16,0(sp)
    2b2c:	dec00304 	addi	sp,sp,12
    2b30:	f800283a 	ret

00002b34 <_read_r>:
    2b34:	defffd04 	addi	sp,sp,-12
    2b38:	dc000015 	stw	r16,0(sp)
    2b3c:	04000034 	movhi	r16,0
    2b40:	841a6304 	addi	r16,r16,27020
    2b44:	dc400115 	stw	r17,4(sp)
    2b48:	80000015 	stw	zero,0(r16)
    2b4c:	2023883a 	mov	r17,r4
    2b50:	2809883a 	mov	r4,r5
    2b54:	300b883a 	mov	r5,r6
    2b58:	380d883a 	mov	r6,r7
    2b5c:	dfc00215 	stw	ra,8(sp)
    2b60:	00032700 	call	3270 <read>
    2b64:	1007883a 	mov	r3,r2
    2b68:	00bfffc4 	movi	r2,-1
    2b6c:	18800626 	beq	r3,r2,2b88 <_read_r+0x54>
    2b70:	1805883a 	mov	r2,r3
    2b74:	dfc00217 	ldw	ra,8(sp)
    2b78:	dc400117 	ldw	r17,4(sp)
    2b7c:	dc000017 	ldw	r16,0(sp)
    2b80:	dec00304 	addi	sp,sp,12
    2b84:	f800283a 	ret
    2b88:	80800017 	ldw	r2,0(r16)
    2b8c:	103ff826 	beq	r2,zero,2b70 <_read_r+0x3c>
    2b90:	88800015 	stw	r2,0(r17)
    2b94:	1805883a 	mov	r2,r3
    2b98:	dfc00217 	ldw	ra,8(sp)
    2b9c:	dc400117 	ldw	r17,4(sp)
    2ba0:	dc000017 	ldw	r16,0(sp)
    2ba4:	dec00304 	addi	sp,sp,12
    2ba8:	f800283a 	ret

00002bac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2bac:	defff804 	addi	sp,sp,-32
    2bb0:	dfc00715 	stw	ra,28(sp)
    2bb4:	df000615 	stw	fp,24(sp)
    2bb8:	df000604 	addi	fp,sp,24
    2bbc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2bc0:	e0bffc17 	ldw	r2,-16(fp)
    2bc4:	1004803a 	cmplt	r2,r2,zero
    2bc8:	1000081e 	bne	r2,zero,2bec <close+0x40>
    2bcc:	e0bffc17 	ldw	r2,-16(fp)
    2bd0:	10800324 	muli	r2,r2,12
    2bd4:	1007883a 	mov	r3,r2
    2bd8:	00800034 	movhi	r2,0
    2bdc:	10971a04 	addi	r2,r2,23656
    2be0:	1887883a 	add	r3,r3,r2
    2be4:	e0ffff15 	stw	r3,-4(fp)
    2be8:	00000106 	br	2bf0 <close+0x44>
    2bec:	e03fff15 	stw	zero,-4(fp)
    2bf0:	e0bfff17 	ldw	r2,-4(fp)
    2bf4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2bf8:	e0bffb17 	ldw	r2,-20(fp)
    2bfc:	1005003a 	cmpeq	r2,r2,zero
    2c00:	10001d1e 	bne	r2,zero,2c78 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2c04:	e0bffb17 	ldw	r2,-20(fp)
    2c08:	10800017 	ldw	r2,0(r2)
    2c0c:	10800417 	ldw	r2,16(r2)
    2c10:	1005003a 	cmpeq	r2,r2,zero
    2c14:	1000071e 	bne	r2,zero,2c34 <close+0x88>
    2c18:	e0bffb17 	ldw	r2,-20(fp)
    2c1c:	10800017 	ldw	r2,0(r2)
    2c20:	10800417 	ldw	r2,16(r2)
    2c24:	e13ffb17 	ldw	r4,-20(fp)
    2c28:	103ee83a 	callr	r2
    2c2c:	e0bffe15 	stw	r2,-8(fp)
    2c30:	00000106 	br	2c38 <close+0x8c>
    2c34:	e03ffe15 	stw	zero,-8(fp)
    2c38:	e0bffe17 	ldw	r2,-8(fp)
    2c3c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2c40:	e13ffc17 	ldw	r4,-16(fp)
    2c44:	00033f00 	call	33f0 <alt_release_fd>
    if (rval < 0)
    2c48:	e0bffa17 	ldw	r2,-24(fp)
    2c4c:	1004403a 	cmpge	r2,r2,zero
    2c50:	1000071e 	bne	r2,zero,2c70 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    2c54:	0002ca80 	call	2ca8 <alt_get_errno>
    2c58:	e0fffa17 	ldw	r3,-24(fp)
    2c5c:	00c7c83a 	sub	r3,zero,r3
    2c60:	10c00015 	stw	r3,0(r2)
      return -1;
    2c64:	00bfffc4 	movi	r2,-1
    2c68:	e0bffd15 	stw	r2,-12(fp)
    2c6c:	00000806 	br	2c90 <close+0xe4>
    }
    return 0;
    2c70:	e03ffd15 	stw	zero,-12(fp)
    2c74:	00000606 	br	2c90 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2c78:	0002ca80 	call	2ca8 <alt_get_errno>
    2c7c:	1007883a 	mov	r3,r2
    2c80:	00801444 	movi	r2,81
    2c84:	18800015 	stw	r2,0(r3)
    return -1;
    2c88:	00bfffc4 	movi	r2,-1
    2c8c:	e0bffd15 	stw	r2,-12(fp)
    2c90:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2c94:	e037883a 	mov	sp,fp
    2c98:	dfc00117 	ldw	ra,4(sp)
    2c9c:	df000017 	ldw	fp,0(sp)
    2ca0:	dec00204 	addi	sp,sp,8
    2ca4:	f800283a 	ret

00002ca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2ca8:	defffd04 	addi	sp,sp,-12
    2cac:	dfc00215 	stw	ra,8(sp)
    2cb0:	df000115 	stw	fp,4(sp)
    2cb4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2cb8:	00800034 	movhi	r2,0
    2cbc:	1097b404 	addi	r2,r2,24272
    2cc0:	10800017 	ldw	r2,0(r2)
    2cc4:	1005003a 	cmpeq	r2,r2,zero
    2cc8:	1000061e 	bne	r2,zero,2ce4 <alt_get_errno+0x3c>
    2ccc:	00800034 	movhi	r2,0
    2cd0:	1097b404 	addi	r2,r2,24272
    2cd4:	10800017 	ldw	r2,0(r2)
    2cd8:	103ee83a 	callr	r2
    2cdc:	e0bfff15 	stw	r2,-4(fp)
    2ce0:	00000306 	br	2cf0 <alt_get_errno+0x48>
    2ce4:	00800034 	movhi	r2,0
    2ce8:	109a6304 	addi	r2,r2,27020
    2cec:	e0bfff15 	stw	r2,-4(fp)
    2cf0:	e0bfff17 	ldw	r2,-4(fp)
}
    2cf4:	e037883a 	mov	sp,fp
    2cf8:	dfc00117 	ldw	ra,4(sp)
    2cfc:	df000017 	ldw	fp,0(sp)
    2d00:	dec00204 	addi	sp,sp,8
    2d04:	f800283a 	ret

00002d08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2d08:	defffc04 	addi	sp,sp,-16
    2d0c:	df000315 	stw	fp,12(sp)
    2d10:	df000304 	addi	fp,sp,12
    2d14:	e13ffd15 	stw	r4,-12(fp)
    2d18:	e17ffe15 	stw	r5,-8(fp)
    2d1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2d20:	e0bfff17 	ldw	r2,-4(fp)
}
    2d24:	e037883a 	mov	sp,fp
    2d28:	df000017 	ldw	fp,0(sp)
    2d2c:	dec00104 	addi	sp,sp,4
    2d30:	f800283a 	ret

00002d34 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    2d34:	defff904 	addi	sp,sp,-28
    2d38:	dfc00615 	stw	ra,24(sp)
    2d3c:	df000515 	stw	fp,20(sp)
    2d40:	df000504 	addi	fp,sp,20
    2d44:	e13ffc15 	stw	r4,-16(fp)
    2d48:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2d4c:	e0bffc17 	ldw	r2,-16(fp)
    2d50:	1004803a 	cmplt	r2,r2,zero
    2d54:	1000081e 	bne	r2,zero,2d78 <fstat+0x44>
    2d58:	e0bffc17 	ldw	r2,-16(fp)
    2d5c:	10800324 	muli	r2,r2,12
    2d60:	1007883a 	mov	r3,r2
    2d64:	00800034 	movhi	r2,0
    2d68:	10971a04 	addi	r2,r2,23656
    2d6c:	1887883a 	add	r3,r3,r2
    2d70:	e0ffff15 	stw	r3,-4(fp)
    2d74:	00000106 	br	2d7c <fstat+0x48>
    2d78:	e03fff15 	stw	zero,-4(fp)
    2d7c:	e0bfff17 	ldw	r2,-4(fp)
    2d80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2d84:	e0bffb17 	ldw	r2,-20(fp)
    2d88:	1005003a 	cmpeq	r2,r2,zero
    2d8c:	1000121e 	bne	r2,zero,2dd8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    2d90:	e0bffb17 	ldw	r2,-20(fp)
    2d94:	10800017 	ldw	r2,0(r2)
    2d98:	10800817 	ldw	r2,32(r2)
    2d9c:	1005003a 	cmpeq	r2,r2,zero
    2da0:	1000081e 	bne	r2,zero,2dc4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    2da4:	e0bffb17 	ldw	r2,-20(fp)
    2da8:	10800017 	ldw	r2,0(r2)
    2dac:	10800817 	ldw	r2,32(r2)
    2db0:	e13ffb17 	ldw	r4,-20(fp)
    2db4:	e17ffd17 	ldw	r5,-12(fp)
    2db8:	103ee83a 	callr	r2
    2dbc:	e0bffe15 	stw	r2,-8(fp)
    2dc0:	00000b06 	br	2df0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    2dc4:	e0fffd17 	ldw	r3,-12(fp)
    2dc8:	00880004 	movi	r2,8192
    2dcc:	18800115 	stw	r2,4(r3)
      return 0;
    2dd0:	e03ffe15 	stw	zero,-8(fp)
    2dd4:	00000606 	br	2df0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2dd8:	0002e080 	call	2e08 <alt_get_errno>
    2ddc:	1007883a 	mov	r3,r2
    2de0:	00801444 	movi	r2,81
    2de4:	18800015 	stw	r2,0(r3)
    return -1;
    2de8:	00bfffc4 	movi	r2,-1
    2dec:	e0bffe15 	stw	r2,-8(fp)
    2df0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2df4:	e037883a 	mov	sp,fp
    2df8:	dfc00117 	ldw	ra,4(sp)
    2dfc:	df000017 	ldw	fp,0(sp)
    2e00:	dec00204 	addi	sp,sp,8
    2e04:	f800283a 	ret

00002e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2e08:	defffd04 	addi	sp,sp,-12
    2e0c:	dfc00215 	stw	ra,8(sp)
    2e10:	df000115 	stw	fp,4(sp)
    2e14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2e18:	00800034 	movhi	r2,0
    2e1c:	1097b404 	addi	r2,r2,24272
    2e20:	10800017 	ldw	r2,0(r2)
    2e24:	1005003a 	cmpeq	r2,r2,zero
    2e28:	1000061e 	bne	r2,zero,2e44 <alt_get_errno+0x3c>
    2e2c:	00800034 	movhi	r2,0
    2e30:	1097b404 	addi	r2,r2,24272
    2e34:	10800017 	ldw	r2,0(r2)
    2e38:	103ee83a 	callr	r2
    2e3c:	e0bfff15 	stw	r2,-4(fp)
    2e40:	00000306 	br	2e50 <alt_get_errno+0x48>
    2e44:	00800034 	movhi	r2,0
    2e48:	109a6304 	addi	r2,r2,27020
    2e4c:	e0bfff15 	stw	r2,-4(fp)
    2e50:	e0bfff17 	ldw	r2,-4(fp)
}
    2e54:	e037883a 	mov	sp,fp
    2e58:	dfc00117 	ldw	ra,4(sp)
    2e5c:	df000017 	ldw	fp,0(sp)
    2e60:	dec00204 	addi	sp,sp,8
    2e64:	f800283a 	ret

00002e68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    2e68:	deffeb04 	addi	sp,sp,-84
    2e6c:	dfc01415 	stw	ra,80(sp)
    2e70:	df001315 	stw	fp,76(sp)
    2e74:	df001304 	addi	fp,sp,76
    2e78:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2e7c:	e0bffd17 	ldw	r2,-12(fp)
    2e80:	1004803a 	cmplt	r2,r2,zero
    2e84:	1000081e 	bne	r2,zero,2ea8 <isatty+0x40>
    2e88:	e0bffd17 	ldw	r2,-12(fp)
    2e8c:	10800324 	muli	r2,r2,12
    2e90:	1007883a 	mov	r3,r2
    2e94:	00800034 	movhi	r2,0
    2e98:	10971a04 	addi	r2,r2,23656
    2e9c:	1887883a 	add	r3,r3,r2
    2ea0:	e0ffff15 	stw	r3,-4(fp)
    2ea4:	00000106 	br	2eac <isatty+0x44>
    2ea8:	e03fff15 	stw	zero,-4(fp)
    2eac:	e0bfff17 	ldw	r2,-4(fp)
    2eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    2eb4:	e0bfed17 	ldw	r2,-76(fp)
    2eb8:	1005003a 	cmpeq	r2,r2,zero
    2ebc:	10000f1e 	bne	r2,zero,2efc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    2ec0:	e0bfed17 	ldw	r2,-76(fp)
    2ec4:	10800017 	ldw	r2,0(r2)
    2ec8:	10800817 	ldw	r2,32(r2)
    2ecc:	1004c03a 	cmpne	r2,r2,zero
    2ed0:	1000031e 	bne	r2,zero,2ee0 <isatty+0x78>
    {
      return 1;
    2ed4:	00800044 	movi	r2,1
    2ed8:	e0bffe15 	stw	r2,-8(fp)
    2edc:	00000c06 	br	2f10 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    2ee0:	e17fee04 	addi	r5,fp,-72
    2ee4:	e13ffd17 	ldw	r4,-12(fp)
    2ee8:	0002d340 	call	2d34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    2eec:	e0bfef17 	ldw	r2,-68(fp)
    2ef0:	10880020 	cmpeqi	r2,r2,8192
    2ef4:	e0bffe15 	stw	r2,-8(fp)
    2ef8:	00000506 	br	2f10 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2efc:	0002f280 	call	2f28 <alt_get_errno>
    2f00:	1007883a 	mov	r3,r2
    2f04:	00801444 	movi	r2,81
    2f08:	18800015 	stw	r2,0(r3)
    return 0;
    2f0c:	e03ffe15 	stw	zero,-8(fp)
    2f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2f14:	e037883a 	mov	sp,fp
    2f18:	dfc00117 	ldw	ra,4(sp)
    2f1c:	df000017 	ldw	fp,0(sp)
    2f20:	dec00204 	addi	sp,sp,8
    2f24:	f800283a 	ret

00002f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f28:	defffd04 	addi	sp,sp,-12
    2f2c:	dfc00215 	stw	ra,8(sp)
    2f30:	df000115 	stw	fp,4(sp)
    2f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2f38:	00800034 	movhi	r2,0
    2f3c:	1097b404 	addi	r2,r2,24272
    2f40:	10800017 	ldw	r2,0(r2)
    2f44:	1005003a 	cmpeq	r2,r2,zero
    2f48:	1000061e 	bne	r2,zero,2f64 <alt_get_errno+0x3c>
    2f4c:	00800034 	movhi	r2,0
    2f50:	1097b404 	addi	r2,r2,24272
    2f54:	10800017 	ldw	r2,0(r2)
    2f58:	103ee83a 	callr	r2
    2f5c:	e0bfff15 	stw	r2,-4(fp)
    2f60:	00000306 	br	2f70 <alt_get_errno+0x48>
    2f64:	00800034 	movhi	r2,0
    2f68:	109a6304 	addi	r2,r2,27020
    2f6c:	e0bfff15 	stw	r2,-4(fp)
    2f70:	e0bfff17 	ldw	r2,-4(fp)
}
    2f74:	e037883a 	mov	sp,fp
    2f78:	dfc00117 	ldw	ra,4(sp)
    2f7c:	df000017 	ldw	fp,0(sp)
    2f80:	dec00204 	addi	sp,sp,8
    2f84:	f800283a 	ret

00002f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2f88:	defffe04 	addi	sp,sp,-8
    2f8c:	dfc00115 	stw	ra,4(sp)
    2f90:	df000015 	stw	fp,0(sp)
    2f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2f98:	01000034 	movhi	r4,0
    2f9c:	2117b704 	addi	r4,r4,24284
    2fa0:	01400034 	movhi	r5,0
    2fa4:	29550e04 	addi	r5,r5,21560
    2fa8:	01800034 	movhi	r6,0
    2fac:	3197b704 	addi	r6,r6,24284
    2fb0:	00030080 	call	3008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2fb4:	01000034 	movhi	r4,0
    2fb8:	21000804 	addi	r4,r4,32
    2fbc:	01400034 	movhi	r5,0
    2fc0:	29400804 	addi	r5,r5,32
    2fc4:	01800034 	movhi	r6,0
    2fc8:	31806d04 	addi	r6,r6,436
    2fcc:	00030080 	call	3008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2fd0:	01000034 	movhi	r4,0
    2fd4:	2114fe04 	addi	r4,r4,21496
    2fd8:	01400034 	movhi	r5,0
    2fdc:	2954fe04 	addi	r5,r5,21496
    2fe0:	01800034 	movhi	r6,0
    2fe4:	31950e04 	addi	r6,r6,21560
    2fe8:	00030080 	call	3008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2fec:	00042680 	call	4268 <alt_dcache_flush_all>
  alt_icache_flush_all();
    2ff0:	00044880 	call	4488 <alt_icache_flush_all>
}
    2ff4:	e037883a 	mov	sp,fp
    2ff8:	dfc00117 	ldw	ra,4(sp)
    2ffc:	df000017 	ldw	fp,0(sp)
    3000:	dec00204 	addi	sp,sp,8
    3004:	f800283a 	ret

00003008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3008:	defffc04 	addi	sp,sp,-16
    300c:	df000315 	stw	fp,12(sp)
    3010:	df000304 	addi	fp,sp,12
    3014:	e13ffd15 	stw	r4,-12(fp)
    3018:	e17ffe15 	stw	r5,-8(fp)
    301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3020:	e0fffe17 	ldw	r3,-8(fp)
    3024:	e0bffd17 	ldw	r2,-12(fp)
    3028:	18800e26 	beq	r3,r2,3064 <alt_load_section+0x5c>
  {
    while( to != end )
    302c:	00000a06 	br	3058 <alt_load_section+0x50>
    {
      *to++ = *from++;
    3030:	e0bffd17 	ldw	r2,-12(fp)
    3034:	10c00017 	ldw	r3,0(r2)
    3038:	e0bffe17 	ldw	r2,-8(fp)
    303c:	10c00015 	stw	r3,0(r2)
    3040:	e0bffe17 	ldw	r2,-8(fp)
    3044:	10800104 	addi	r2,r2,4
    3048:	e0bffe15 	stw	r2,-8(fp)
    304c:	e0bffd17 	ldw	r2,-12(fp)
    3050:	10800104 	addi	r2,r2,4
    3054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3058:	e0fffe17 	ldw	r3,-8(fp)
    305c:	e0bfff17 	ldw	r2,-4(fp)
    3060:	18bff31e 	bne	r3,r2,3030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3064:	e037883a 	mov	sp,fp
    3068:	df000017 	ldw	fp,0(sp)
    306c:	dec00104 	addi	sp,sp,4
    3070:	f800283a 	ret

00003074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3074:	defff804 	addi	sp,sp,-32
    3078:	dfc00715 	stw	ra,28(sp)
    307c:	df000615 	stw	fp,24(sp)
    3080:	df000604 	addi	fp,sp,24
    3084:	e13ffc15 	stw	r4,-16(fp)
    3088:	e17ffd15 	stw	r5,-12(fp)
    308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3094:	e0bffc17 	ldw	r2,-16(fp)
    3098:	1004803a 	cmplt	r2,r2,zero
    309c:	1000081e 	bne	r2,zero,30c0 <lseek+0x4c>
    30a0:	e0bffc17 	ldw	r2,-16(fp)
    30a4:	10800324 	muli	r2,r2,12
    30a8:	1007883a 	mov	r3,r2
    30ac:	00800034 	movhi	r2,0
    30b0:	10971a04 	addi	r2,r2,23656
    30b4:	1887883a 	add	r3,r3,r2
    30b8:	e0ffff15 	stw	r3,-4(fp)
    30bc:	00000106 	br	30c4 <lseek+0x50>
    30c0:	e03fff15 	stw	zero,-4(fp)
    30c4:	e0bfff17 	ldw	r2,-4(fp)
    30c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    30cc:	e0bffb17 	ldw	r2,-20(fp)
    30d0:	1005003a 	cmpeq	r2,r2,zero
    30d4:	1000111e 	bne	r2,zero,311c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    30d8:	e0bffb17 	ldw	r2,-20(fp)
    30dc:	10800017 	ldw	r2,0(r2)
    30e0:	10800717 	ldw	r2,28(r2)
    30e4:	1005003a 	cmpeq	r2,r2,zero
    30e8:	1000091e 	bne	r2,zero,3110 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    30ec:	e0bffb17 	ldw	r2,-20(fp)
    30f0:	10800017 	ldw	r2,0(r2)
    30f4:	10800717 	ldw	r2,28(r2)
    30f8:	e13ffb17 	ldw	r4,-20(fp)
    30fc:	e17ffd17 	ldw	r5,-12(fp)
    3100:	e1bffe17 	ldw	r6,-8(fp)
    3104:	103ee83a 	callr	r2
    3108:	e0bffa15 	stw	r2,-24(fp)
    310c:	00000506 	br	3124 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3110:	00bfde84 	movi	r2,-134
    3114:	e0bffa15 	stw	r2,-24(fp)
    3118:	00000206 	br	3124 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    311c:	00bfebc4 	movi	r2,-81
    3120:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    3124:	e0bffa17 	ldw	r2,-24(fp)
    3128:	1004403a 	cmpge	r2,r2,zero
    312c:	1000071e 	bne	r2,zero,314c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    3130:	00031640 	call	3164 <alt_get_errno>
    3134:	1007883a 	mov	r3,r2
    3138:	e0bffa17 	ldw	r2,-24(fp)
    313c:	0085c83a 	sub	r2,zero,r2
    3140:	18800015 	stw	r2,0(r3)
    rc = -1;
    3144:	00bfffc4 	movi	r2,-1
    3148:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    314c:	e0bffa17 	ldw	r2,-24(fp)
}
    3150:	e037883a 	mov	sp,fp
    3154:	dfc00117 	ldw	ra,4(sp)
    3158:	df000017 	ldw	fp,0(sp)
    315c:	dec00204 	addi	sp,sp,8
    3160:	f800283a 	ret

00003164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3164:	defffd04 	addi	sp,sp,-12
    3168:	dfc00215 	stw	ra,8(sp)
    316c:	df000115 	stw	fp,4(sp)
    3170:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3174:	00800034 	movhi	r2,0
    3178:	1097b404 	addi	r2,r2,24272
    317c:	10800017 	ldw	r2,0(r2)
    3180:	1005003a 	cmpeq	r2,r2,zero
    3184:	1000061e 	bne	r2,zero,31a0 <alt_get_errno+0x3c>
    3188:	00800034 	movhi	r2,0
    318c:	1097b404 	addi	r2,r2,24272
    3190:	10800017 	ldw	r2,0(r2)
    3194:	103ee83a 	callr	r2
    3198:	e0bfff15 	stw	r2,-4(fp)
    319c:	00000306 	br	31ac <alt_get_errno+0x48>
    31a0:	00800034 	movhi	r2,0
    31a4:	109a6304 	addi	r2,r2,27020
    31a8:	e0bfff15 	stw	r2,-4(fp)
    31ac:	e0bfff17 	ldw	r2,-4(fp)
}
    31b0:	e037883a 	mov	sp,fp
    31b4:	dfc00117 	ldw	ra,4(sp)
    31b8:	df000017 	ldw	fp,0(sp)
    31bc:	dec00204 	addi	sp,sp,8
    31c0:	f800283a 	ret

000031c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    31c4:	defffd04 	addi	sp,sp,-12
    31c8:	dfc00215 	stw	ra,8(sp)
    31cc:	df000115 	stw	fp,4(sp)
    31d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    31d4:	0009883a 	mov	r4,zero
    31d8:	00036bc0 	call	36bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    31dc:	00036f00 	call	36f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    31e0:	01000034 	movhi	r4,0
    31e4:	21150804 	addi	r4,r4,21536
    31e8:	01400034 	movhi	r5,0
    31ec:	29550804 	addi	r5,r5,21536
    31f0:	01800034 	movhi	r6,0
    31f4:	31950804 	addi	r6,r6,21536
    31f8:	00048480 	call	4848 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    31fc:	00043c00 	call	43c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3200:	01000034 	movhi	r4,0
    3204:	21110904 	addi	r4,r4,17444
    3208:	0004ea00 	call	4ea0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    320c:	d122b917 	ldw	r4,-29980(gp)
    3210:	d162ba17 	ldw	r5,-29976(gp)
    3214:	d1a2bb17 	ldw	r6,-29972(gp)
    3218:	00002440 	call	244 <main>
    321c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3220:	01000044 	movi	r4,1
    3224:	0002bac0 	call	2bac <close>
  exit (result);
    3228:	e13fff17 	ldw	r4,-4(fp)
    322c:	0004eb40 	call	4eb4 <exit>

00003230 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3230:	defffe04 	addi	sp,sp,-8
    3234:	df000115 	stw	fp,4(sp)
    3238:	df000104 	addi	fp,sp,4
    323c:	e13fff15 	stw	r4,-4(fp)
}
    3240:	e037883a 	mov	sp,fp
    3244:	df000017 	ldw	fp,0(sp)
    3248:	dec00104 	addi	sp,sp,4
    324c:	f800283a 	ret

00003250 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3250:	defffe04 	addi	sp,sp,-8
    3254:	df000115 	stw	fp,4(sp)
    3258:	df000104 	addi	fp,sp,4
    325c:	e13fff15 	stw	r4,-4(fp)
}
    3260:	e037883a 	mov	sp,fp
    3264:	df000017 	ldw	fp,0(sp)
    3268:	dec00104 	addi	sp,sp,4
    326c:	f800283a 	ret

00003270 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3270:	defff704 	addi	sp,sp,-36
    3274:	dfc00815 	stw	ra,32(sp)
    3278:	df000715 	stw	fp,28(sp)
    327c:	df000704 	addi	fp,sp,28
    3280:	e13ffb15 	stw	r4,-20(fp)
    3284:	e17ffc15 	stw	r5,-16(fp)
    3288:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    328c:	e0bffb17 	ldw	r2,-20(fp)
    3290:	1004803a 	cmplt	r2,r2,zero
    3294:	1000081e 	bne	r2,zero,32b8 <read+0x48>
    3298:	e0bffb17 	ldw	r2,-20(fp)
    329c:	10800324 	muli	r2,r2,12
    32a0:	1007883a 	mov	r3,r2
    32a4:	00800034 	movhi	r2,0
    32a8:	10971a04 	addi	r2,r2,23656
    32ac:	1887883a 	add	r3,r3,r2
    32b0:	e0ffff15 	stw	r3,-4(fp)
    32b4:	00000106 	br	32bc <read+0x4c>
    32b8:	e03fff15 	stw	zero,-4(fp)
    32bc:	e0bfff17 	ldw	r2,-4(fp)
    32c0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    32c4:	e0bffa17 	ldw	r2,-24(fp)
    32c8:	1005003a 	cmpeq	r2,r2,zero
    32cc:	1000241e 	bne	r2,zero,3360 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    32d0:	e0bffa17 	ldw	r2,-24(fp)
    32d4:	10800217 	ldw	r2,8(r2)
    32d8:	108000cc 	andi	r2,r2,3
    32dc:	10800060 	cmpeqi	r2,r2,1
    32e0:	10001a1e 	bne	r2,zero,334c <read+0xdc>
    32e4:	e0bffa17 	ldw	r2,-24(fp)
    32e8:	10800017 	ldw	r2,0(r2)
    32ec:	10800517 	ldw	r2,20(r2)
    32f0:	1005003a 	cmpeq	r2,r2,zero
    32f4:	1000151e 	bne	r2,zero,334c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    32f8:	e0bffa17 	ldw	r2,-24(fp)
    32fc:	10800017 	ldw	r2,0(r2)
    3300:	10800517 	ldw	r2,20(r2)
    3304:	e17ffc17 	ldw	r5,-16(fp)
    3308:	e1bffd17 	ldw	r6,-12(fp)
    330c:	e13ffa17 	ldw	r4,-24(fp)
    3310:	103ee83a 	callr	r2
    3314:	e0bff915 	stw	r2,-28(fp)
    3318:	e0bff917 	ldw	r2,-28(fp)
    331c:	1004403a 	cmpge	r2,r2,zero
    3320:	1000071e 	bne	r2,zero,3340 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    3324:	00033900 	call	3390 <alt_get_errno>
    3328:	e0fff917 	ldw	r3,-28(fp)
    332c:	00c7c83a 	sub	r3,zero,r3
    3330:	10c00015 	stw	r3,0(r2)
          return -1;
    3334:	00bfffc4 	movi	r2,-1
    3338:	e0bffe15 	stw	r2,-8(fp)
    333c:	00000e06 	br	3378 <read+0x108>
        }
        return rval;
    3340:	e0bff917 	ldw	r2,-28(fp)
    3344:	e0bffe15 	stw	r2,-8(fp)
    3348:	00000b06 	br	3378 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    334c:	00033900 	call	3390 <alt_get_errno>
    3350:	1007883a 	mov	r3,r2
    3354:	00800344 	movi	r2,13
    3358:	18800015 	stw	r2,0(r3)
    335c:	00000406 	br	3370 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3360:	00033900 	call	3390 <alt_get_errno>
    3364:	1007883a 	mov	r3,r2
    3368:	00801444 	movi	r2,81
    336c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3370:	00bfffc4 	movi	r2,-1
    3374:	e0bffe15 	stw	r2,-8(fp)
    3378:	e0bffe17 	ldw	r2,-8(fp)
}
    337c:	e037883a 	mov	sp,fp
    3380:	dfc00117 	ldw	ra,4(sp)
    3384:	df000017 	ldw	fp,0(sp)
    3388:	dec00204 	addi	sp,sp,8
    338c:	f800283a 	ret

00003390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3390:	defffd04 	addi	sp,sp,-12
    3394:	dfc00215 	stw	ra,8(sp)
    3398:	df000115 	stw	fp,4(sp)
    339c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    33a0:	00800034 	movhi	r2,0
    33a4:	1097b404 	addi	r2,r2,24272
    33a8:	10800017 	ldw	r2,0(r2)
    33ac:	1005003a 	cmpeq	r2,r2,zero
    33b0:	1000061e 	bne	r2,zero,33cc <alt_get_errno+0x3c>
    33b4:	00800034 	movhi	r2,0
    33b8:	1097b404 	addi	r2,r2,24272
    33bc:	10800017 	ldw	r2,0(r2)
    33c0:	103ee83a 	callr	r2
    33c4:	e0bfff15 	stw	r2,-4(fp)
    33c8:	00000306 	br	33d8 <alt_get_errno+0x48>
    33cc:	00800034 	movhi	r2,0
    33d0:	109a6304 	addi	r2,r2,27020
    33d4:	e0bfff15 	stw	r2,-4(fp)
    33d8:	e0bfff17 	ldw	r2,-4(fp)
}
    33dc:	e037883a 	mov	sp,fp
    33e0:	dfc00117 	ldw	ra,4(sp)
    33e4:	df000017 	ldw	fp,0(sp)
    33e8:	dec00204 	addi	sp,sp,8
    33ec:	f800283a 	ret

000033f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    33f0:	defffe04 	addi	sp,sp,-8
    33f4:	df000115 	stw	fp,4(sp)
    33f8:	df000104 	addi	fp,sp,4
    33fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3400:	e0bfff17 	ldw	r2,-4(fp)
    3404:	108000d0 	cmplti	r2,r2,3
    3408:	10000d1e 	bne	r2,zero,3440 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    340c:	e0bfff17 	ldw	r2,-4(fp)
    3410:	00c00034 	movhi	r3,0
    3414:	18d71a04 	addi	r3,r3,23656
    3418:	10800324 	muli	r2,r2,12
    341c:	10c5883a 	add	r2,r2,r3
    3420:	10800204 	addi	r2,r2,8
    3424:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3428:	e0bfff17 	ldw	r2,-4(fp)
    342c:	00c00034 	movhi	r3,0
    3430:	18d71a04 	addi	r3,r3,23656
    3434:	10800324 	muli	r2,r2,12
    3438:	10c5883a 	add	r2,r2,r3
    343c:	10000015 	stw	zero,0(r2)
  }
}
    3440:	e037883a 	mov	sp,fp
    3444:	df000017 	ldw	fp,0(sp)
    3448:	dec00104 	addi	sp,sp,4
    344c:	f800283a 	ret

00003450 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3450:	defff804 	addi	sp,sp,-32
    3454:	df000715 	stw	fp,28(sp)
    3458:	df000704 	addi	fp,sp,28
    345c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3460:	0005303a 	rdctl	r2,status
    3464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3468:	e0fffb17 	ldw	r3,-20(fp)
    346c:	00bfff84 	movi	r2,-2
    3470:	1884703a 	and	r2,r3,r2
    3474:	1001703a 	wrctl	status,r2
  
  return context;
    3478:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    347c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3480:	d0a00a17 	ldw	r2,-32728(gp)
    3484:	10c000c4 	addi	r3,r2,3
    3488:	00bfff04 	movi	r2,-4
    348c:	1884703a 	and	r2,r3,r2
    3490:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3494:	d0e00a17 	ldw	r3,-32728(gp)
    3498:	e0bffe17 	ldw	r2,-8(fp)
    349c:	1887883a 	add	r3,r3,r2
    34a0:	00804034 	movhi	r2,256
    34a4:	10800004 	addi	r2,r2,0
    34a8:	10c0072e 	bgeu	r2,r3,34c8 <sbrk+0x78>
    34ac:	e0bffd17 	ldw	r2,-12(fp)
    34b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    34b4:	e0bffa17 	ldw	r2,-24(fp)
    34b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    34bc:	00bfffc4 	movi	r2,-1
    34c0:	e0bfff15 	stw	r2,-4(fp)
    34c4:	00000c06 	br	34f8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    34c8:	d0a00a17 	ldw	r2,-32728(gp)
    34cc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    34d0:	d0e00a17 	ldw	r3,-32728(gp)
    34d4:	e0bffe17 	ldw	r2,-8(fp)
    34d8:	1885883a 	add	r2,r3,r2
    34dc:	d0a00a15 	stw	r2,-32728(gp)
    34e0:	e0bffd17 	ldw	r2,-12(fp)
    34e4:	e0bff915 	stw	r2,-28(fp)
    34e8:	e0bff917 	ldw	r2,-28(fp)
    34ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    34f0:	e0bffc17 	ldw	r2,-16(fp)
    34f4:	e0bfff15 	stw	r2,-4(fp)
    34f8:	e0bfff17 	ldw	r2,-4(fp)
} 
    34fc:	e037883a 	mov	sp,fp
    3500:	df000017 	ldw	fp,0(sp)
    3504:	dec00104 	addi	sp,sp,4
    3508:	f800283a 	ret

0000350c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    350c:	defffd04 	addi	sp,sp,-12
    3510:	dfc00215 	stw	ra,8(sp)
    3514:	df000115 	stw	fp,4(sp)
    3518:	df000104 	addi	fp,sp,4
    351c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    3520:	e13fff17 	ldw	r4,-4(fp)
    3524:	000411c0 	call	411c <alt_busy_sleep>
}
    3528:	e037883a 	mov	sp,fp
    352c:	dfc00117 	ldw	ra,4(sp)
    3530:	df000017 	ldw	fp,0(sp)
    3534:	dec00204 	addi	sp,sp,8
    3538:	f800283a 	ret

0000353c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    353c:	defff704 	addi	sp,sp,-36
    3540:	dfc00815 	stw	ra,32(sp)
    3544:	df000715 	stw	fp,28(sp)
    3548:	df000704 	addi	fp,sp,28
    354c:	e13ffb15 	stw	r4,-20(fp)
    3550:	e17ffc15 	stw	r5,-16(fp)
    3554:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3558:	e0bffb17 	ldw	r2,-20(fp)
    355c:	1004803a 	cmplt	r2,r2,zero
    3560:	1000081e 	bne	r2,zero,3584 <write+0x48>
    3564:	e0bffb17 	ldw	r2,-20(fp)
    3568:	10800324 	muli	r2,r2,12
    356c:	1007883a 	mov	r3,r2
    3570:	00800034 	movhi	r2,0
    3574:	10971a04 	addi	r2,r2,23656
    3578:	1887883a 	add	r3,r3,r2
    357c:	e0ffff15 	stw	r3,-4(fp)
    3580:	00000106 	br	3588 <write+0x4c>
    3584:	e03fff15 	stw	zero,-4(fp)
    3588:	e0bfff17 	ldw	r2,-4(fp)
    358c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3590:	e0bffa17 	ldw	r2,-24(fp)
    3594:	1005003a 	cmpeq	r2,r2,zero
    3598:	1000241e 	bne	r2,zero,362c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    359c:	e0bffa17 	ldw	r2,-24(fp)
    35a0:	10800217 	ldw	r2,8(r2)
    35a4:	108000cc 	andi	r2,r2,3
    35a8:	1005003a 	cmpeq	r2,r2,zero
    35ac:	10001a1e 	bne	r2,zero,3618 <write+0xdc>
    35b0:	e0bffa17 	ldw	r2,-24(fp)
    35b4:	10800017 	ldw	r2,0(r2)
    35b8:	10800617 	ldw	r2,24(r2)
    35bc:	1005003a 	cmpeq	r2,r2,zero
    35c0:	1000151e 	bne	r2,zero,3618 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    35c4:	e0bffa17 	ldw	r2,-24(fp)
    35c8:	10800017 	ldw	r2,0(r2)
    35cc:	10800617 	ldw	r2,24(r2)
    35d0:	e17ffc17 	ldw	r5,-16(fp)
    35d4:	e1bffd17 	ldw	r6,-12(fp)
    35d8:	e13ffa17 	ldw	r4,-24(fp)
    35dc:	103ee83a 	callr	r2
    35e0:	e0bff915 	stw	r2,-28(fp)
    35e4:	e0bff917 	ldw	r2,-28(fp)
    35e8:	1004403a 	cmpge	r2,r2,zero
    35ec:	1000071e 	bne	r2,zero,360c <write+0xd0>
      {
        ALT_ERRNO = -rval;
    35f0:	000365c0 	call	365c <alt_get_errno>
    35f4:	e0fff917 	ldw	r3,-28(fp)
    35f8:	00c7c83a 	sub	r3,zero,r3
    35fc:	10c00015 	stw	r3,0(r2)
        return -1;
    3600:	00bfffc4 	movi	r2,-1
    3604:	e0bffe15 	stw	r2,-8(fp)
    3608:	00000e06 	br	3644 <write+0x108>
      }
      return rval;
    360c:	e0bff917 	ldw	r2,-28(fp)
    3610:	e0bffe15 	stw	r2,-8(fp)
    3614:	00000b06 	br	3644 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3618:	000365c0 	call	365c <alt_get_errno>
    361c:	1007883a 	mov	r3,r2
    3620:	00800344 	movi	r2,13
    3624:	18800015 	stw	r2,0(r3)
    3628:	00000406 	br	363c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    362c:	000365c0 	call	365c <alt_get_errno>
    3630:	1007883a 	mov	r3,r2
    3634:	00801444 	movi	r2,81
    3638:	18800015 	stw	r2,0(r3)
  }
  return -1;
    363c:	00bfffc4 	movi	r2,-1
    3640:	e0bffe15 	stw	r2,-8(fp)
    3644:	e0bffe17 	ldw	r2,-8(fp)
}
    3648:	e037883a 	mov	sp,fp
    364c:	dfc00117 	ldw	ra,4(sp)
    3650:	df000017 	ldw	fp,0(sp)
    3654:	dec00204 	addi	sp,sp,8
    3658:	f800283a 	ret

0000365c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    365c:	defffd04 	addi	sp,sp,-12
    3660:	dfc00215 	stw	ra,8(sp)
    3664:	df000115 	stw	fp,4(sp)
    3668:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    366c:	00800034 	movhi	r2,0
    3670:	1097b404 	addi	r2,r2,24272
    3674:	10800017 	ldw	r2,0(r2)
    3678:	1005003a 	cmpeq	r2,r2,zero
    367c:	1000061e 	bne	r2,zero,3698 <alt_get_errno+0x3c>
    3680:	00800034 	movhi	r2,0
    3684:	1097b404 	addi	r2,r2,24272
    3688:	10800017 	ldw	r2,0(r2)
    368c:	103ee83a 	callr	r2
    3690:	e0bfff15 	stw	r2,-4(fp)
    3694:	00000306 	br	36a4 <alt_get_errno+0x48>
    3698:	00800034 	movhi	r2,0
    369c:	109a6304 	addi	r2,r2,27020
    36a0:	e0bfff15 	stw	r2,-4(fp)
    36a4:	e0bfff17 	ldw	r2,-4(fp)
}
    36a8:	e037883a 	mov	sp,fp
    36ac:	dfc00117 	ldw	ra,4(sp)
    36b0:	df000017 	ldw	fp,0(sp)
    36b4:	dec00204 	addi	sp,sp,8
    36b8:	f800283a 	ret

000036bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    36bc:	defffd04 	addi	sp,sp,-12
    36c0:	dfc00215 	stw	ra,8(sp)
    36c4:	df000115 	stw	fp,4(sp)
    36c8:	df000104 	addi	fp,sp,4
    36cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    36d0:	0004b840 	call	4b84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    36d4:	00800044 	movi	r2,1
    36d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    36dc:	e037883a 	mov	sp,fp
    36e0:	dfc00117 	ldw	ra,4(sp)
    36e4:	df000017 	ldw	fp,0(sp)
    36e8:	dec00204 	addi	sp,sp,8
    36ec:	f800283a 	ret

000036f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    36f0:	defffe04 	addi	sp,sp,-8
    36f4:	dfc00115 	stw	ra,4(sp)
    36f8:	df000015 	stw	fp,0(sp)
    36fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    3700:	01000034 	movhi	r4,0
    3704:	21178404 	addi	r4,r4,24080
    3708:	000b883a 	mov	r5,zero
    370c:	000d883a 	mov	r6,zero
    3710:	00038640 	call	3864 <altera_avalon_uart_init>
    3714:	01000034 	movhi	r4,0
    3718:	21177a04 	addi	r4,r4,24040
    371c:	00037340 	call	3734 <alt_dev_reg>
}
    3720:	e037883a 	mov	sp,fp
    3724:	dfc00117 	ldw	ra,4(sp)
    3728:	df000017 	ldw	fp,0(sp)
    372c:	dec00204 	addi	sp,sp,8
    3730:	f800283a 	ret

00003734 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3734:	defffd04 	addi	sp,sp,-12
    3738:	dfc00215 	stw	ra,8(sp)
    373c:	df000115 	stw	fp,4(sp)
    3740:	df000104 	addi	fp,sp,4
    3744:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3748:	e13fff17 	ldw	r4,-4(fp)
    374c:	01400034 	movhi	r5,0
    3750:	2957b104 	addi	r5,r5,24260
    3754:	00042ac0 	call	42ac <alt_dev_llist_insert>
}
    3758:	e037883a 	mov	sp,fp
    375c:	dfc00117 	ldw	ra,4(sp)
    3760:	df000017 	ldw	fp,0(sp)
    3764:	dec00204 	addi	sp,sp,8
    3768:	f800283a 	ret

0000376c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    376c:	defffa04 	addi	sp,sp,-24
    3770:	dfc00515 	stw	ra,20(sp)
    3774:	df000415 	stw	fp,16(sp)
    3778:	df000404 	addi	fp,sp,16
    377c:	e13ffd15 	stw	r4,-12(fp)
    3780:	e17ffe15 	stw	r5,-8(fp)
    3784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    3788:	e0bffd17 	ldw	r2,-12(fp)
    378c:	10800017 	ldw	r2,0(r2)
    3790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    3794:	e0bffc17 	ldw	r2,-16(fp)
    3798:	11000a04 	addi	r4,r2,40
    379c:	e0bffd17 	ldw	r2,-12(fp)
    37a0:	11c00217 	ldw	r7,8(r2)
    37a4:	e17ffe17 	ldw	r5,-8(fp)
    37a8:	e1bfff17 	ldw	r6,-4(fp)
    37ac:	0003c640 	call	3c64 <altera_avalon_uart_read>
      fd->fd_flags);
}
    37b0:	e037883a 	mov	sp,fp
    37b4:	dfc00117 	ldw	ra,4(sp)
    37b8:	df000017 	ldw	fp,0(sp)
    37bc:	dec00204 	addi	sp,sp,8
    37c0:	f800283a 	ret

000037c4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    37c4:	defffa04 	addi	sp,sp,-24
    37c8:	dfc00515 	stw	ra,20(sp)
    37cc:	df000415 	stw	fp,16(sp)
    37d0:	df000404 	addi	fp,sp,16
    37d4:	e13ffd15 	stw	r4,-12(fp)
    37d8:	e17ffe15 	stw	r5,-8(fp)
    37dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    37e0:	e0bffd17 	ldw	r2,-12(fp)
    37e4:	10800017 	ldw	r2,0(r2)
    37e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    37ec:	e0bffc17 	ldw	r2,-16(fp)
    37f0:	11000a04 	addi	r4,r2,40
    37f4:	e0bffd17 	ldw	r2,-12(fp)
    37f8:	11c00217 	ldw	r7,8(r2)
    37fc:	e17ffe17 	ldw	r5,-8(fp)
    3800:	e1bfff17 	ldw	r6,-4(fp)
    3804:	0003ef40 	call	3ef4 <altera_avalon_uart_write>
      fd->fd_flags);
}
    3808:	e037883a 	mov	sp,fp
    380c:	dfc00117 	ldw	ra,4(sp)
    3810:	df000017 	ldw	fp,0(sp)
    3814:	dec00204 	addi	sp,sp,8
    3818:	f800283a 	ret

0000381c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    381c:	defffc04 	addi	sp,sp,-16
    3820:	dfc00315 	stw	ra,12(sp)
    3824:	df000215 	stw	fp,8(sp)
    3828:	df000204 	addi	fp,sp,8
    382c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    3830:	e0bfff17 	ldw	r2,-4(fp)
    3834:	10800017 	ldw	r2,0(r2)
    3838:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    383c:	e0bffe17 	ldw	r2,-8(fp)
    3840:	11000a04 	addi	r4,r2,40
    3844:	e0bfff17 	ldw	r2,-4(fp)
    3848:	11400217 	ldw	r5,8(r2)
    384c:	0003c040 	call	3c04 <altera_avalon_uart_close>
}
    3850:	e037883a 	mov	sp,fp
    3854:	dfc00117 	ldw	ra,4(sp)
    3858:	df000017 	ldw	fp,0(sp)
    385c:	dec00204 	addi	sp,sp,8
    3860:	f800283a 	ret

00003864 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    3864:	defff704 	addi	sp,sp,-36
    3868:	dfc00815 	stw	ra,32(sp)
    386c:	df000715 	stw	fp,28(sp)
    3870:	df000704 	addi	fp,sp,28
    3874:	e13ffc15 	stw	r4,-16(fp)
    3878:	e17ffd15 	stw	r5,-12(fp)
    387c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	10800017 	ldw	r2,0(r2)
    3888:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    388c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    3890:	1004c03a 	cmpne	r2,r2,zero
    3894:	1000061e 	bne	r2,zero,38b0 <altera_avalon_uart_init+0x4c>
    3898:	0005883a 	mov	r2,zero
    389c:	1004c03a 	cmpne	r2,r2,zero
    38a0:	1000031e 	bne	r2,zero,38b0 <altera_avalon_uart_init+0x4c>
    38a4:	0005883a 	mov	r2,zero
    38a8:	1005003a 	cmpeq	r2,r2,zero
    38ac:	1000031e 	bne	r2,zero,38bc <altera_avalon_uart_init+0x58>
    38b0:	00800044 	movi	r2,1
    38b4:	e0bfff15 	stw	r2,-4(fp)
    38b8:	00000106 	br	38c0 <altera_avalon_uart_init+0x5c>
    38bc:	e03fff15 	stw	zero,-4(fp)
    38c0:	e0bfff17 	ldw	r2,-4(fp)
    38c4:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    38c8:	e0bffa17 	ldw	r2,-24(fp)
    38cc:	1004c03a 	cmpne	r2,r2,zero
    38d0:	1000111e 	bne	r2,zero,3918 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    38d4:	e0fffc17 	ldw	r3,-16(fp)
    38d8:	00832004 	movi	r2,3200
    38dc:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    38e0:	e0bffb17 	ldw	r2,-20(fp)
    38e4:	11000304 	addi	r4,r2,12
    38e8:	e0bffc17 	ldw	r2,-16(fp)
    38ec:	10800117 	ldw	r2,4(r2)
    38f0:	1007883a 	mov	r3,r2
    38f4:	2005883a 	mov	r2,r4
    38f8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    38fc:	d8000015 	stw	zero,0(sp)
    3900:	e13ffd17 	ldw	r4,-12(fp)
    3904:	e17ffe17 	ldw	r5,-8(fp)
    3908:	01800034 	movhi	r6,0
    390c:	318e4b04 	addi	r6,r6,14636
    3910:	e1fffc17 	ldw	r7,-16(fp)
    3914:	00044b80 	call	44b8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    3918:	e037883a 	mov	sp,fp
    391c:	dfc00117 	ldw	ra,4(sp)
    3920:	df000017 	ldw	fp,0(sp)
    3924:	dec00204 	addi	sp,sp,8
    3928:	f800283a 	ret

0000392c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    392c:	defffa04 	addi	sp,sp,-24
    3930:	dfc00515 	stw	ra,20(sp)
    3934:	df000415 	stw	fp,16(sp)
    3938:	df000404 	addi	fp,sp,16
    393c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    3940:	e0bfff17 	ldw	r2,-4(fp)
    3944:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    3948:	e0bffd17 	ldw	r2,-12(fp)
    394c:	10800017 	ldw	r2,0(r2)
    3950:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    3954:	e0bffc17 	ldw	r2,-16(fp)
    3958:	10800204 	addi	r2,r2,8
    395c:	10800037 	ldwio	r2,0(r2)
    3960:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    3964:	e0bffc17 	ldw	r2,-16(fp)
    3968:	10800204 	addi	r2,r2,8
    396c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    3970:	e0bffc17 	ldw	r2,-16(fp)
    3974:	10800204 	addi	r2,r2,8
    3978:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    397c:	e0bffe17 	ldw	r2,-8(fp)
    3980:	1080200c 	andi	r2,r2,128
    3984:	1005003a 	cmpeq	r2,r2,zero
    3988:	1000031e 	bne	r2,zero,3998 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    398c:	e13ffd17 	ldw	r4,-12(fp)
    3990:	e17ffe17 	ldw	r5,-8(fp)
    3994:	00039c80 	call	39c8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    3998:	e0bffe17 	ldw	r2,-8(fp)
    399c:	1081100c 	andi	r2,r2,1088
    39a0:	1005003a 	cmpeq	r2,r2,zero
    39a4:	1000031e 	bne	r2,zero,39b4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    39a8:	e13ffd17 	ldw	r4,-12(fp)
    39ac:	e17ffe17 	ldw	r5,-8(fp)
    39b0:	0003aa80 	call	3aa8 <altera_avalon_uart_txirq>
  }
  

}
    39b4:	e037883a 	mov	sp,fp
    39b8:	dfc00117 	ldw	ra,4(sp)
    39bc:	df000017 	ldw	fp,0(sp)
    39c0:	dec00204 	addi	sp,sp,8
    39c4:	f800283a 	ret

000039c8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    39c8:	defffc04 	addi	sp,sp,-16
    39cc:	df000315 	stw	fp,12(sp)
    39d0:	df000304 	addi	fp,sp,12
    39d4:	e13ffe15 	stw	r4,-8(fp)
    39d8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    39dc:	e0bfff17 	ldw	r2,-4(fp)
    39e0:	108000cc 	andi	r2,r2,3
    39e4:	1004c03a 	cmpne	r2,r2,zero
    39e8:	10002b1e 	bne	r2,zero,3a98 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    39ec:	e0bffe17 	ldw	r2,-8(fp)
    39f0:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    39f4:	e0bffe17 	ldw	r2,-8(fp)
    39f8:	10800317 	ldw	r2,12(r2)
    39fc:	10800044 	addi	r2,r2,1
    3a00:	10800fcc 	andi	r2,r2,63
    3a04:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    3a08:	e0bffe17 	ldw	r2,-8(fp)
    3a0c:	11000317 	ldw	r4,12(r2)
    3a10:	e0bffe17 	ldw	r2,-8(fp)
    3a14:	10800017 	ldw	r2,0(r2)
    3a18:	10800037 	ldwio	r2,0(r2)
    3a1c:	1007883a 	mov	r3,r2
    3a20:	e0bffe17 	ldw	r2,-8(fp)
    3a24:	2085883a 	add	r2,r4,r2
    3a28:	10800704 	addi	r2,r2,28
    3a2c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    3a30:	e0fffe17 	ldw	r3,-8(fp)
    3a34:	e0bffd17 	ldw	r2,-12(fp)
    3a38:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    3a3c:	e0bffe17 	ldw	r2,-8(fp)
    3a40:	10800317 	ldw	r2,12(r2)
    3a44:	10800044 	addi	r2,r2,1
    3a48:	10800fcc 	andi	r2,r2,63
    3a4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    3a50:	e0bffe17 	ldw	r2,-8(fp)
    3a54:	10c00217 	ldw	r3,8(r2)
    3a58:	e0bffd17 	ldw	r2,-12(fp)
    3a5c:	18800e1e 	bne	r3,r2,3a98 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    3a60:	e0bffe17 	ldw	r2,-8(fp)
    3a64:	10c00117 	ldw	r3,4(r2)
    3a68:	00bfdfc4 	movi	r2,-129
    3a6c:	1886703a 	and	r3,r3,r2
    3a70:	e0bffe17 	ldw	r2,-8(fp)
    3a74:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    3a78:	e0bffe17 	ldw	r2,-8(fp)
    3a7c:	10800017 	ldw	r2,0(r2)
    3a80:	11000304 	addi	r4,r2,12
    3a84:	e0bffe17 	ldw	r2,-8(fp)
    3a88:	10800117 	ldw	r2,4(r2)
    3a8c:	1007883a 	mov	r3,r2
    3a90:	2005883a 	mov	r2,r4
    3a94:	10c00035 	stwio	r3,0(r2)
  }   
}
    3a98:	e037883a 	mov	sp,fp
    3a9c:	df000017 	ldw	fp,0(sp)
    3aa0:	dec00104 	addi	sp,sp,4
    3aa4:	f800283a 	ret

00003aa8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    3aa8:	defffd04 	addi	sp,sp,-12
    3aac:	df000215 	stw	fp,8(sp)
    3ab0:	df000204 	addi	fp,sp,8
    3ab4:	e13ffe15 	stw	r4,-8(fp)
    3ab8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    3abc:	e0bffe17 	ldw	r2,-8(fp)
    3ac0:	10c00417 	ldw	r3,16(r2)
    3ac4:	e0bffe17 	ldw	r2,-8(fp)
    3ac8:	10800517 	ldw	r2,20(r2)
    3acc:	18803626 	beq	r3,r2,3ba8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    3ad0:	e0bffe17 	ldw	r2,-8(fp)
    3ad4:	10800617 	ldw	r2,24(r2)
    3ad8:	1080008c 	andi	r2,r2,2
    3adc:	1005003a 	cmpeq	r2,r2,zero
    3ae0:	1000041e 	bne	r2,zero,3af4 <altera_avalon_uart_txirq+0x4c>
    3ae4:	e0bfff17 	ldw	r2,-4(fp)
    3ae8:	1082000c 	andi	r2,r2,2048
    3aec:	1005003a 	cmpeq	r2,r2,zero
    3af0:	10001e1e 	bne	r2,zero,3b6c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    3af4:	e0bffe17 	ldw	r2,-8(fp)
    3af8:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    3afc:	e0bffe17 	ldw	r2,-8(fp)
    3b00:	10800017 	ldw	r2,0(r2)
    3b04:	11000104 	addi	r4,r2,4
    3b08:	e0bffe17 	ldw	r2,-8(fp)
    3b0c:	10c00417 	ldw	r3,16(r2)
    3b10:	e0bffe17 	ldw	r2,-8(fp)
    3b14:	1885883a 	add	r2,r3,r2
    3b18:	10801704 	addi	r2,r2,92
    3b1c:	10800003 	ldbu	r2,0(r2)
    3b20:	10c03fcc 	andi	r3,r2,255
    3b24:	2005883a 	mov	r2,r4
    3b28:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    3b2c:	e0bffe17 	ldw	r2,-8(fp)
    3b30:	10800417 	ldw	r2,16(r2)
    3b34:	10c00044 	addi	r3,r2,1
    3b38:	e0bffe17 	ldw	r2,-8(fp)
    3b3c:	10c00415 	stw	r3,16(r2)
    3b40:	e0bffe17 	ldw	r2,-8(fp)
    3b44:	10800417 	ldw	r2,16(r2)
    3b48:	10c00fcc 	andi	r3,r2,63
    3b4c:	e0bffe17 	ldw	r2,-8(fp)
    3b50:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    3b54:	e0bffe17 	ldw	r2,-8(fp)
    3b58:	10800117 	ldw	r2,4(r2)
    3b5c:	10c01014 	ori	r3,r2,64
    3b60:	e0bffe17 	ldw	r2,-8(fp)
    3b64:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    3b68:	00000f06 	br	3ba8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    3b6c:	e0bffe17 	ldw	r2,-8(fp)
    3b70:	10800017 	ldw	r2,0(r2)
    3b74:	10800204 	addi	r2,r2,8
    3b78:	10800037 	ldwio	r2,0(r2)
    3b7c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    3b80:	e0bfff17 	ldw	r2,-4(fp)
    3b84:	1082000c 	andi	r2,r2,2048
    3b88:	1004c03a 	cmpne	r2,r2,zero
    3b8c:	1000061e 	bne	r2,zero,3ba8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    3b90:	e0bffe17 	ldw	r2,-8(fp)
    3b94:	10c00117 	ldw	r3,4(r2)
    3b98:	00bfefc4 	movi	r2,-65
    3b9c:	1886703a 	and	r3,r3,r2
    3ba0:	e0bffe17 	ldw	r2,-8(fp)
    3ba4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    3ba8:	e0bffe17 	ldw	r2,-8(fp)
    3bac:	10c00417 	ldw	r3,16(r2)
    3bb0:	e0bffe17 	ldw	r2,-8(fp)
    3bb4:	10800517 	ldw	r2,20(r2)
    3bb8:	1880061e 	bne	r3,r2,3bd4 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    3bbc:	e0bffe17 	ldw	r2,-8(fp)
    3bc0:	10c00117 	ldw	r3,4(r2)
    3bc4:	00beefc4 	movi	r2,-1089
    3bc8:	1886703a 	and	r3,r3,r2
    3bcc:	e0bffe17 	ldw	r2,-8(fp)
    3bd0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    3bd4:	e0bffe17 	ldw	r2,-8(fp)
    3bd8:	10800017 	ldw	r2,0(r2)
    3bdc:	11000304 	addi	r4,r2,12
    3be0:	e0bffe17 	ldw	r2,-8(fp)
    3be4:	10800117 	ldw	r2,4(r2)
    3be8:	1007883a 	mov	r3,r2
    3bec:	2005883a 	mov	r2,r4
    3bf0:	10c00035 	stwio	r3,0(r2)
}
    3bf4:	e037883a 	mov	sp,fp
    3bf8:	df000017 	ldw	fp,0(sp)
    3bfc:	dec00104 	addi	sp,sp,4
    3c00:	f800283a 	ret

00003c04 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    3c04:	defffc04 	addi	sp,sp,-16
    3c08:	df000315 	stw	fp,12(sp)
    3c0c:	df000304 	addi	fp,sp,12
    3c10:	e13ffd15 	stw	r4,-12(fp)
    3c14:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    3c18:	00000706 	br	3c38 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    3c1c:	e0bffe17 	ldw	r2,-8(fp)
    3c20:	1090000c 	andi	r2,r2,16384
    3c24:	1005003a 	cmpeq	r2,r2,zero
    3c28:	1000031e 	bne	r2,zero,3c38 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    3c2c:	00bffd44 	movi	r2,-11
    3c30:	e0bfff15 	stw	r2,-4(fp)
    3c34:	00000606 	br	3c50 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    3c38:	e0bffd17 	ldw	r2,-12(fp)
    3c3c:	10c00417 	ldw	r3,16(r2)
    3c40:	e0bffd17 	ldw	r2,-12(fp)
    3c44:	10800517 	ldw	r2,20(r2)
    3c48:	18bff41e 	bne	r3,r2,3c1c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    3c4c:	e03fff15 	stw	zero,-4(fp)
    3c50:	e0bfff17 	ldw	r2,-4(fp)
}
    3c54:	e037883a 	mov	sp,fp
    3c58:	df000017 	ldw	fp,0(sp)
    3c5c:	dec00104 	addi	sp,sp,4
    3c60:	f800283a 	ret

00003c64 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    3c64:	defff004 	addi	sp,sp,-64
    3c68:	dfc00f15 	stw	ra,60(sp)
    3c6c:	df000e15 	stw	fp,56(sp)
    3c70:	df000e04 	addi	fp,sp,56
    3c74:	e13ffb15 	stw	r4,-20(fp)
    3c78:	e17ffc15 	stw	r5,-16(fp)
    3c7c:	e1bffd15 	stw	r6,-12(fp)
    3c80:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    3c84:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    3c88:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    3c8c:	e0bffe17 	ldw	r2,-8(fp)
    3c90:	1090000c 	andi	r2,r2,16384
    3c94:	1005003a 	cmpeq	r2,r2,zero
    3c98:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    3c9c:	e0bffb17 	ldw	r2,-20(fp)
    3ca0:	10800217 	ldw	r2,8(r2)
    3ca4:	10800044 	addi	r2,r2,1
    3ca8:	10800fcc 	andi	r2,r2,63
    3cac:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    3cb0:	00001906 	br	3d18 <altera_avalon_uart_read+0xb4>
    {
      count++;
    3cb4:	e0bff617 	ldw	r2,-40(fp)
    3cb8:	10800044 	addi	r2,r2,1
    3cbc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    3cc0:	e0bffb17 	ldw	r2,-20(fp)
    3cc4:	10c00217 	ldw	r3,8(r2)
    3cc8:	e0bffb17 	ldw	r2,-20(fp)
    3ccc:	1885883a 	add	r2,r3,r2
    3cd0:	10800704 	addi	r2,r2,28
    3cd4:	10800003 	ldbu	r2,0(r2)
    3cd8:	1007883a 	mov	r3,r2
    3cdc:	e0bffc17 	ldw	r2,-16(fp)
    3ce0:	10c00005 	stb	r3,0(r2)
    3ce4:	e0bffc17 	ldw	r2,-16(fp)
    3ce8:	10800044 	addi	r2,r2,1
    3cec:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    3cf0:	e0bffb17 	ldw	r2,-20(fp)
    3cf4:	10800217 	ldw	r2,8(r2)
    3cf8:	10c00044 	addi	r3,r2,1
    3cfc:	e0bffb17 	ldw	r2,-20(fp)
    3d00:	10c00215 	stw	r3,8(r2)
    3d04:	e0bffb17 	ldw	r2,-20(fp)
    3d08:	10800217 	ldw	r2,8(r2)
    3d0c:	10c00fcc 	andi	r3,r2,63
    3d10:	e0bffb17 	ldw	r2,-20(fp)
    3d14:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    3d18:	e0fff617 	ldw	r3,-40(fp)
    3d1c:	e0bffd17 	ldw	r2,-12(fp)
    3d20:	1880050e 	bge	r3,r2,3d38 <altera_avalon_uart_read+0xd4>
    3d24:	e0bffb17 	ldw	r2,-20(fp)
    3d28:	10c00217 	ldw	r3,8(r2)
    3d2c:	e0bffb17 	ldw	r2,-20(fp)
    3d30:	10800317 	ldw	r2,12(r2)
    3d34:	18bfdf1e 	bne	r3,r2,3cb4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    3d38:	e0bff617 	ldw	r2,-40(fp)
    3d3c:	1004c03a 	cmpne	r2,r2,zero
    3d40:	1000271e 	bne	r2,zero,3de0 <altera_avalon_uart_read+0x17c>
    3d44:	e0bffb17 	ldw	r2,-20(fp)
    3d48:	10c00217 	ldw	r3,8(r2)
    3d4c:	e0bffb17 	ldw	r2,-20(fp)
    3d50:	10800317 	ldw	r2,12(r2)
    3d54:	1880221e 	bne	r3,r2,3de0 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    3d58:	e0bff917 	ldw	r2,-28(fp)
    3d5c:	1004c03a 	cmpne	r2,r2,zero
    3d60:	1000061e 	bne	r2,zero,3d7c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    3d64:	0003e940 	call	3e94 <alt_get_errno>
    3d68:	00c002c4 	movi	r3,11
    3d6c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    3d70:	00800044 	movi	r2,1
    3d74:	e0bff705 	stb	r2,-36(fp)
        break;
    3d78:	00001f06 	br	3df8 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d7c:	0005303a 	rdctl	r2,status
    3d80:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d84:	e0fff517 	ldw	r3,-44(fp)
    3d88:	00bfff84 	movi	r2,-2
    3d8c:	1884703a 	and	r2,r3,r2
    3d90:	1001703a 	wrctl	status,r2
  
  return context;
    3d94:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    3d98:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    3d9c:	e0bffb17 	ldw	r2,-20(fp)
    3da0:	10800117 	ldw	r2,4(r2)
    3da4:	10c02014 	ori	r3,r2,128
    3da8:	e0bffb17 	ldw	r2,-20(fp)
    3dac:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    3db0:	e0bffb17 	ldw	r2,-20(fp)
    3db4:	10800017 	ldw	r2,0(r2)
    3db8:	11000304 	addi	r4,r2,12
    3dbc:	e0bffb17 	ldw	r2,-20(fp)
    3dc0:	10800117 	ldw	r2,4(r2)
    3dc4:	1007883a 	mov	r3,r2
    3dc8:	2005883a 	mov	r2,r4
    3dcc:	10c00035 	stwio	r3,0(r2)
    3dd0:	e0bffa17 	ldw	r2,-24(fp)
    3dd4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3dd8:	e0bff417 	ldw	r2,-48(fp)
    3ddc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    3de0:	e0bff617 	ldw	r2,-40(fp)
    3de4:	1004c03a 	cmpne	r2,r2,zero
    3de8:	1000031e 	bne	r2,zero,3df8 <altera_avalon_uart_read+0x194>
    3dec:	e0bffd17 	ldw	r2,-12(fp)
    3df0:	1004c03a 	cmpne	r2,r2,zero
    3df4:	103fc81e 	bne	r2,zero,3d18 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3df8:	0005303a 	rdctl	r2,status
    3dfc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e00:	e0fff317 	ldw	r3,-52(fp)
    3e04:	00bfff84 	movi	r2,-2
    3e08:	1884703a 	and	r2,r3,r2
    3e0c:	1001703a 	wrctl	status,r2
  
  return context;
    3e10:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    3e14:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    3e18:	e0bffb17 	ldw	r2,-20(fp)
    3e1c:	10800117 	ldw	r2,4(r2)
    3e20:	10c02014 	ori	r3,r2,128
    3e24:	e0bffb17 	ldw	r2,-20(fp)
    3e28:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    3e2c:	e0bffb17 	ldw	r2,-20(fp)
    3e30:	10800017 	ldw	r2,0(r2)
    3e34:	11000304 	addi	r4,r2,12
    3e38:	e0bffb17 	ldw	r2,-20(fp)
    3e3c:	10800117 	ldw	r2,4(r2)
    3e40:	1007883a 	mov	r3,r2
    3e44:	2005883a 	mov	r2,r4
    3e48:	10c00035 	stwio	r3,0(r2)
    3e4c:	e0bffa17 	ldw	r2,-24(fp)
    3e50:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3e54:	e0bff217 	ldw	r2,-56(fp)
    3e58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    3e5c:	e0bff703 	ldbu	r2,-36(fp)
    3e60:	1005003a 	cmpeq	r2,r2,zero
    3e64:	1000031e 	bne	r2,zero,3e74 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    3e68:	00bffd04 	movi	r2,-12
    3e6c:	e0bfff15 	stw	r2,-4(fp)
    3e70:	00000206 	br	3e7c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    3e74:	e0bff617 	ldw	r2,-40(fp)
    3e78:	e0bfff15 	stw	r2,-4(fp)
    3e7c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    3e80:	e037883a 	mov	sp,fp
    3e84:	dfc00117 	ldw	ra,4(sp)
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00204 	addi	sp,sp,8
    3e90:	f800283a 	ret

00003e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3e94:	defffd04 	addi	sp,sp,-12
    3e98:	dfc00215 	stw	ra,8(sp)
    3e9c:	df000115 	stw	fp,4(sp)
    3ea0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3ea4:	00800034 	movhi	r2,0
    3ea8:	1097b404 	addi	r2,r2,24272
    3eac:	10800017 	ldw	r2,0(r2)
    3eb0:	1005003a 	cmpeq	r2,r2,zero
    3eb4:	1000061e 	bne	r2,zero,3ed0 <alt_get_errno+0x3c>
    3eb8:	00800034 	movhi	r2,0
    3ebc:	1097b404 	addi	r2,r2,24272
    3ec0:	10800017 	ldw	r2,0(r2)
    3ec4:	103ee83a 	callr	r2
    3ec8:	e0bfff15 	stw	r2,-4(fp)
    3ecc:	00000306 	br	3edc <alt_get_errno+0x48>
    3ed0:	00800034 	movhi	r2,0
    3ed4:	109a6304 	addi	r2,r2,27020
    3ed8:	e0bfff15 	stw	r2,-4(fp)
    3edc:	e0bfff17 	ldw	r2,-4(fp)
}
    3ee0:	e037883a 	mov	sp,fp
    3ee4:	dfc00117 	ldw	ra,4(sp)
    3ee8:	df000017 	ldw	fp,0(sp)
    3eec:	dec00204 	addi	sp,sp,8
    3ef0:	f800283a 	ret

00003ef4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    3ef4:	defff204 	addi	sp,sp,-56
    3ef8:	dfc00d15 	stw	ra,52(sp)
    3efc:	df000c15 	stw	fp,48(sp)
    3f00:	df000c04 	addi	fp,sp,48
    3f04:	e13ffc15 	stw	r4,-16(fp)
    3f08:	e17ffd15 	stw	r5,-12(fp)
    3f0c:	e1bffe15 	stw	r6,-8(fp)
    3f10:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    3f14:	e0bffe17 	ldw	r2,-8(fp)
    3f18:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	1090000c 	andi	r2,r2,16384
    3f24:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    3f28:	00004006 	br	402c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    3f2c:	e0bffc17 	ldw	r2,-16(fp)
    3f30:	10800517 	ldw	r2,20(r2)
    3f34:	10800044 	addi	r2,r2,1
    3f38:	10800fcc 	andi	r2,r2,63
    3f3c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    3f40:	e0bffc17 	ldw	r2,-16(fp)
    3f44:	10c00417 	ldw	r3,16(r2)
    3f48:	e0bff917 	ldw	r2,-28(fp)
    3f4c:	1880251e 	bne	r3,r2,3fe4 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    3f50:	e0bffa17 	ldw	r2,-24(fp)
    3f54:	1005003a 	cmpeq	r2,r2,zero
    3f58:	1000051e 	bne	r2,zero,3f70 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    3f5c:	00040bc0 	call	40bc <alt_get_errno>
    3f60:	1007883a 	mov	r3,r2
    3f64:	008002c4 	movi	r2,11
    3f68:	18800015 	stw	r2,0(r3)
        break;
    3f6c:	00003206 	br	4038 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f70:	0005303a 	rdctl	r2,status
    3f74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f78:	e0fff717 	ldw	r3,-36(fp)
    3f7c:	00bfff84 	movi	r2,-2
    3f80:	1884703a 	and	r2,r3,r2
    3f84:	1001703a 	wrctl	status,r2
  
  return context;
    3f88:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    3f8c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    3f90:	e0bffc17 	ldw	r2,-16(fp)
    3f94:	10800117 	ldw	r2,4(r2)
    3f98:	10c11014 	ori	r3,r2,1088
    3f9c:	e0bffc17 	ldw	r2,-16(fp)
    3fa0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    3fa4:	e0bffc17 	ldw	r2,-16(fp)
    3fa8:	10800017 	ldw	r2,0(r2)
    3fac:	11000304 	addi	r4,r2,12
    3fb0:	e0bffc17 	ldw	r2,-16(fp)
    3fb4:	10800117 	ldw	r2,4(r2)
    3fb8:	1007883a 	mov	r3,r2
    3fbc:	2005883a 	mov	r2,r4
    3fc0:	10c00035 	stwio	r3,0(r2)
    3fc4:	e0bffb17 	ldw	r2,-20(fp)
    3fc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fcc:	e0bff617 	ldw	r2,-40(fp)
    3fd0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    3fd4:	e0bffc17 	ldw	r2,-16(fp)
    3fd8:	10c00417 	ldw	r3,16(r2)
    3fdc:	e0bff917 	ldw	r2,-28(fp)
    3fe0:	18bffc26 	beq	r3,r2,3fd4 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    3fe4:	e0bff817 	ldw	r2,-32(fp)
    3fe8:	10bfffc4 	addi	r2,r2,-1
    3fec:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    3ff0:	e0bffc17 	ldw	r2,-16(fp)
    3ff4:	10c00517 	ldw	r3,20(r2)
    3ff8:	e0bffd17 	ldw	r2,-12(fp)
    3ffc:	10800003 	ldbu	r2,0(r2)
    4000:	1009883a 	mov	r4,r2
    4004:	e0bffc17 	ldw	r2,-16(fp)
    4008:	1885883a 	add	r2,r3,r2
    400c:	10801704 	addi	r2,r2,92
    4010:	11000005 	stb	r4,0(r2)
    4014:	e0bffd17 	ldw	r2,-12(fp)
    4018:	10800044 	addi	r2,r2,1
    401c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    4020:	e0fffc17 	ldw	r3,-16(fp)
    4024:	e0bff917 	ldw	r2,-28(fp)
    4028:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    402c:	e0bff817 	ldw	r2,-32(fp)
    4030:	1004c03a 	cmpne	r2,r2,zero
    4034:	103fbd1e 	bne	r2,zero,3f2c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4038:	0005303a 	rdctl	r2,status
    403c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4040:	e0fff517 	ldw	r3,-44(fp)
    4044:	00bfff84 	movi	r2,-2
    4048:	1884703a 	and	r2,r3,r2
    404c:	1001703a 	wrctl	status,r2
  
  return context;
    4050:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    4054:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    4058:	e0bffc17 	ldw	r2,-16(fp)
    405c:	10800117 	ldw	r2,4(r2)
    4060:	10c11014 	ori	r3,r2,1088
    4064:	e0bffc17 	ldw	r2,-16(fp)
    4068:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    406c:	e0bffc17 	ldw	r2,-16(fp)
    4070:	10800017 	ldw	r2,0(r2)
    4074:	11000304 	addi	r4,r2,12
    4078:	e0bffc17 	ldw	r2,-16(fp)
    407c:	10800117 	ldw	r2,4(r2)
    4080:	1007883a 	mov	r3,r2
    4084:	2005883a 	mov	r2,r4
    4088:	10c00035 	stwio	r3,0(r2)
    408c:	e0bffb17 	ldw	r2,-20(fp)
    4090:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4094:	e0bff417 	ldw	r2,-48(fp)
    4098:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    409c:	e0fffe17 	ldw	r3,-8(fp)
    40a0:	e0bff817 	ldw	r2,-32(fp)
    40a4:	1885c83a 	sub	r2,r3,r2
}
    40a8:	e037883a 	mov	sp,fp
    40ac:	dfc00117 	ldw	ra,4(sp)
    40b0:	df000017 	ldw	fp,0(sp)
    40b4:	dec00204 	addi	sp,sp,8
    40b8:	f800283a 	ret

000040bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    40bc:	defffd04 	addi	sp,sp,-12
    40c0:	dfc00215 	stw	ra,8(sp)
    40c4:	df000115 	stw	fp,4(sp)
    40c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    40cc:	00800034 	movhi	r2,0
    40d0:	1097b404 	addi	r2,r2,24272
    40d4:	10800017 	ldw	r2,0(r2)
    40d8:	1005003a 	cmpeq	r2,r2,zero
    40dc:	1000061e 	bne	r2,zero,40f8 <alt_get_errno+0x3c>
    40e0:	00800034 	movhi	r2,0
    40e4:	1097b404 	addi	r2,r2,24272
    40e8:	10800017 	ldw	r2,0(r2)
    40ec:	103ee83a 	callr	r2
    40f0:	e0bfff15 	stw	r2,-4(fp)
    40f4:	00000306 	br	4104 <alt_get_errno+0x48>
    40f8:	00800034 	movhi	r2,0
    40fc:	109a6304 	addi	r2,r2,27020
    4100:	e0bfff15 	stw	r2,-4(fp)
    4104:	e0bfff17 	ldw	r2,-4(fp)
}
    4108:	e037883a 	mov	sp,fp
    410c:	dfc00117 	ldw	ra,4(sp)
    4110:	df000017 	ldw	fp,0(sp)
    4114:	dec00204 	addi	sp,sp,8
    4118:	f800283a 	ret

0000411c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    411c:	defffa04 	addi	sp,sp,-24
    4120:	dfc00515 	stw	ra,20(sp)
    4124:	df000415 	stw	fp,16(sp)
    4128:	df000404 	addi	fp,sp,16
    412c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    4130:	008000c4 	movi	r2,3
    4134:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    4138:	e0fffc17 	ldw	r3,-16(fp)
    413c:	008003f4 	movhi	r2,15
    4140:	10909004 	addi	r2,r2,16960
    4144:	188b383a 	mul	r5,r3,r2
    4148:	01017db4 	movhi	r4,1526
    414c:	21384004 	addi	r4,r4,-7936
    4150:	00053840 	call	5384 <__udivsi3>
    4154:	100b883a 	mov	r5,r2
    4158:	01200034 	movhi	r4,32768
    415c:	213fffc4 	addi	r4,r4,-1
    4160:	00053840 	call	5384 <__udivsi3>
    4164:	100b883a 	mov	r5,r2
    4168:	e13fff17 	ldw	r4,-4(fp)
    416c:	00053840 	call	5384 <__udivsi3>
    4170:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4174:	e0bffd17 	ldw	r2,-12(fp)
    4178:	1005003a 	cmpeq	r2,r2,zero
    417c:	1000281e 	bne	r2,zero,4220 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    4180:	e03ffe15 	stw	zero,-8(fp)
    4184:	00001606 	br	41e0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4188:	00a00034 	movhi	r2,32768
    418c:	10bfffc4 	addi	r2,r2,-1
    4190:	10bfffc4 	addi	r2,r2,-1
    4194:	103ffe1e 	bne	r2,zero,4190 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4198:	e0fffc17 	ldw	r3,-16(fp)
    419c:	008003f4 	movhi	r2,15
    41a0:	10909004 	addi	r2,r2,16960
    41a4:	188b383a 	mul	r5,r3,r2
    41a8:	01017db4 	movhi	r4,1526
    41ac:	21384004 	addi	r4,r4,-7936
    41b0:	00053840 	call	5384 <__udivsi3>
    41b4:	100b883a 	mov	r5,r2
    41b8:	01200034 	movhi	r4,32768
    41bc:	213fffc4 	addi	r4,r4,-1
    41c0:	00053840 	call	5384 <__udivsi3>
    41c4:	1007883a 	mov	r3,r2
    41c8:	e0bfff17 	ldw	r2,-4(fp)
    41cc:	10c5c83a 	sub	r2,r2,r3
    41d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    41d4:	e0bffe17 	ldw	r2,-8(fp)
    41d8:	10800044 	addi	r2,r2,1
    41dc:	e0bffe15 	stw	r2,-8(fp)
    41e0:	e0fffe17 	ldw	r3,-8(fp)
    41e4:	e0bffd17 	ldw	r2,-12(fp)
    41e8:	18bfe716 	blt	r3,r2,4188 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    41ec:	e0fffc17 	ldw	r3,-16(fp)
    41f0:	008003f4 	movhi	r2,15
    41f4:	10909004 	addi	r2,r2,16960
    41f8:	188b383a 	mul	r5,r3,r2
    41fc:	01017db4 	movhi	r4,1526
    4200:	21384004 	addi	r4,r4,-7936
    4204:	00053840 	call	5384 <__udivsi3>
    4208:	1007883a 	mov	r3,r2
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	1885383a 	mul	r2,r3,r2
    4214:	10bfffc4 	addi	r2,r2,-1
    4218:	103ffe1e 	bne	r2,zero,4214 <alt_busy_sleep+0xf8>
    421c:	00000c06 	br	4250 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4220:	e0fffc17 	ldw	r3,-16(fp)
    4224:	008003f4 	movhi	r2,15
    4228:	10909004 	addi	r2,r2,16960
    422c:	188b383a 	mul	r5,r3,r2
    4230:	01017db4 	movhi	r4,1526
    4234:	21384004 	addi	r4,r4,-7936
    4238:	00053840 	call	5384 <__udivsi3>
    423c:	1007883a 	mov	r3,r2
    4240:	e0bfff17 	ldw	r2,-4(fp)
    4244:	1885383a 	mul	r2,r3,r2
    4248:	10bfffc4 	addi	r2,r2,-1
    424c:	00bffe16 	blt	zero,r2,4248 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    4250:	0005883a 	mov	r2,zero
}
    4254:	e037883a 	mov	sp,fp
    4258:	dfc00117 	ldw	ra,4(sp)
    425c:	df000017 	ldw	fp,0(sp)
    4260:	dec00204 	addi	sp,sp,8
    4264:	f800283a 	ret

00004268 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4268:	defffe04 	addi	sp,sp,-8
    426c:	df000115 	stw	fp,4(sp)
    4270:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4274:	e03fff15 	stw	zero,-4(fp)
    4278:	00000506 	br	4290 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    427c:	e0bfff17 	ldw	r2,-4(fp)
    4280:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4284:	e0bfff17 	ldw	r2,-4(fp)
    4288:	10800804 	addi	r2,r2,32
    428c:	e0bfff15 	stw	r2,-4(fp)
    4290:	e0bfff17 	ldw	r2,-4(fp)
    4294:	10820030 	cmpltui	r2,r2,2048
    4298:	103ff81e 	bne	r2,zero,427c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    429c:	e037883a 	mov	sp,fp
    42a0:	df000017 	ldw	fp,0(sp)
    42a4:	dec00104 	addi	sp,sp,4
    42a8:	f800283a 	ret

000042ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    42ac:	defff904 	addi	sp,sp,-28
    42b0:	dfc00615 	stw	ra,24(sp)
    42b4:	df000515 	stw	fp,20(sp)
    42b8:	df000504 	addi	fp,sp,20
    42bc:	e13ffd15 	stw	r4,-12(fp)
    42c0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    42c4:	e0bffd17 	ldw	r2,-12(fp)
    42c8:	1005003a 	cmpeq	r2,r2,zero
    42cc:	1000041e 	bne	r2,zero,42e0 <alt_dev_llist_insert+0x34>
    42d0:	e0bffd17 	ldw	r2,-12(fp)
    42d4:	10800217 	ldw	r2,8(r2)
    42d8:	1004c03a 	cmpne	r2,r2,zero
    42dc:	1000071e 	bne	r2,zero,42fc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    42e0:	00043600 	call	4360 <alt_get_errno>
    42e4:	1007883a 	mov	r3,r2
    42e8:	00800584 	movi	r2,22
    42ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    42f0:	00bffa84 	movi	r2,-22
    42f4:	e0bfff15 	stw	r2,-4(fp)
    42f8:	00001306 	br	4348 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    42fc:	e0fffd17 	ldw	r3,-12(fp)
    4300:	e0bffe17 	ldw	r2,-8(fp)
    4304:	e0bffb15 	stw	r2,-20(fp)
    4308:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    430c:	e0fffc17 	ldw	r3,-16(fp)
    4310:	e0bffb17 	ldw	r2,-20(fp)
    4314:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    4318:	e0bffb17 	ldw	r2,-20(fp)
    431c:	10c00017 	ldw	r3,0(r2)
    4320:	e0bffc17 	ldw	r2,-16(fp)
    4324:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4328:	e0bffb17 	ldw	r2,-20(fp)
    432c:	10c00017 	ldw	r3,0(r2)
    4330:	e0bffc17 	ldw	r2,-16(fp)
    4334:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    4338:	e0fffb17 	ldw	r3,-20(fp)
    433c:	e0bffc17 	ldw	r2,-16(fp)
    4340:	18800015 	stw	r2,0(r3)

  return 0;  
    4344:	e03fff15 	stw	zero,-4(fp)
    4348:	e0bfff17 	ldw	r2,-4(fp)
}
    434c:	e037883a 	mov	sp,fp
    4350:	dfc00117 	ldw	ra,4(sp)
    4354:	df000017 	ldw	fp,0(sp)
    4358:	dec00204 	addi	sp,sp,8
    435c:	f800283a 	ret

00004360 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4360:	defffd04 	addi	sp,sp,-12
    4364:	dfc00215 	stw	ra,8(sp)
    4368:	df000115 	stw	fp,4(sp)
    436c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4370:	00800034 	movhi	r2,0
    4374:	1097b404 	addi	r2,r2,24272
    4378:	10800017 	ldw	r2,0(r2)
    437c:	1005003a 	cmpeq	r2,r2,zero
    4380:	1000061e 	bne	r2,zero,439c <alt_get_errno+0x3c>
    4384:	00800034 	movhi	r2,0
    4388:	1097b404 	addi	r2,r2,24272
    438c:	10800017 	ldw	r2,0(r2)
    4390:	103ee83a 	callr	r2
    4394:	e0bfff15 	stw	r2,-4(fp)
    4398:	00000306 	br	43a8 <alt_get_errno+0x48>
    439c:	00800034 	movhi	r2,0
    43a0:	109a6304 	addi	r2,r2,27020
    43a4:	e0bfff15 	stw	r2,-4(fp)
    43a8:	e0bfff17 	ldw	r2,-4(fp)
}
    43ac:	e037883a 	mov	sp,fp
    43b0:	dfc00117 	ldw	ra,4(sp)
    43b4:	df000017 	ldw	fp,0(sp)
    43b8:	dec00204 	addi	sp,sp,8
    43bc:	f800283a 	ret

000043c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    43c0:	defffd04 	addi	sp,sp,-12
    43c4:	dfc00215 	stw	ra,8(sp)
    43c8:	df000115 	stw	fp,4(sp)
    43cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    43d0:	00bfff04 	movi	r2,-4
    43d4:	00c00034 	movhi	r3,0
    43d8:	18d4fe04 	addi	r3,r3,21496
    43dc:	1885883a 	add	r2,r3,r2
    43e0:	e0bfff15 	stw	r2,-4(fp)
    43e4:	00000606 	br	4400 <_do_ctors+0x40>
        (*ctor) (); 
    43e8:	e0bfff17 	ldw	r2,-4(fp)
    43ec:	10800017 	ldw	r2,0(r2)
    43f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10bfff04 	addi	r2,r2,-4
    43fc:	e0bfff15 	stw	r2,-4(fp)
    4400:	e0ffff17 	ldw	r3,-4(fp)
    4404:	00800034 	movhi	r2,0
    4408:	1094fd04 	addi	r2,r2,21492
    440c:	18bff62e 	bgeu	r3,r2,43e8 <_do_ctors+0x28>
        (*ctor) (); 
}
    4410:	e037883a 	mov	sp,fp
    4414:	dfc00117 	ldw	ra,4(sp)
    4418:	df000017 	ldw	fp,0(sp)
    441c:	dec00204 	addi	sp,sp,8
    4420:	f800283a 	ret

00004424 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4424:	defffd04 	addi	sp,sp,-12
    4428:	dfc00215 	stw	ra,8(sp)
    442c:	df000115 	stw	fp,4(sp)
    4430:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4434:	00bfff04 	movi	r2,-4
    4438:	00c00034 	movhi	r3,0
    443c:	18d4fe04 	addi	r3,r3,21496
    4440:	1885883a 	add	r2,r3,r2
    4444:	e0bfff15 	stw	r2,-4(fp)
    4448:	00000606 	br	4464 <_do_dtors+0x40>
        (*dtor) (); 
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10800017 	ldw	r2,0(r2)
    4454:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4458:	e0bfff17 	ldw	r2,-4(fp)
    445c:	10bfff04 	addi	r2,r2,-4
    4460:	e0bfff15 	stw	r2,-4(fp)
    4464:	e0ffff17 	ldw	r3,-4(fp)
    4468:	00800034 	movhi	r2,0
    446c:	1094fe04 	addi	r2,r2,21496
    4470:	18bff62e 	bgeu	r3,r2,444c <_do_dtors+0x28>
        (*dtor) (); 
}
    4474:	e037883a 	mov	sp,fp
    4478:	dfc00117 	ldw	ra,4(sp)
    447c:	df000017 	ldw	fp,0(sp)
    4480:	dec00204 	addi	sp,sp,8
    4484:	f800283a 	ret

00004488 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4488:	defffe04 	addi	sp,sp,-8
    448c:	dfc00115 	stw	ra,4(sp)
    4490:	df000015 	stw	fp,0(sp)
    4494:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    4498:	0009883a 	mov	r4,zero
    449c:	01440004 	movi	r5,4096
    44a0:	0004e100 	call	4e10 <alt_icache_flush>
#endif
}
    44a4:	e037883a 	mov	sp,fp
    44a8:	dfc00117 	ldw	ra,4(sp)
    44ac:	df000017 	ldw	fp,0(sp)
    44b0:	dec00204 	addi	sp,sp,8
    44b4:	f800283a 	ret

000044b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    44b8:	defff904 	addi	sp,sp,-28
    44bc:	dfc00615 	stw	ra,24(sp)
    44c0:	df000515 	stw	fp,20(sp)
    44c4:	df000504 	addi	fp,sp,20
    44c8:	e13ffc15 	stw	r4,-16(fp)
    44cc:	e17ffd15 	stw	r5,-12(fp)
    44d0:	e1bffe15 	stw	r6,-8(fp)
    44d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    44d8:	e0800217 	ldw	r2,8(fp)
    44dc:	d8800015 	stw	r2,0(sp)
    44e0:	e13ffc17 	ldw	r4,-16(fp)
    44e4:	e17ffd17 	ldw	r5,-12(fp)
    44e8:	e1bffe17 	ldw	r6,-8(fp)
    44ec:	e1ffff17 	ldw	r7,-4(fp)
    44f0:	000468c0 	call	468c <alt_iic_isr_register>
}  
    44f4:	e037883a 	mov	sp,fp
    44f8:	dfc00117 	ldw	ra,4(sp)
    44fc:	df000017 	ldw	fp,0(sp)
    4500:	dec00204 	addi	sp,sp,8
    4504:	f800283a 	ret

00004508 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4508:	defff904 	addi	sp,sp,-28
    450c:	df000615 	stw	fp,24(sp)
    4510:	df000604 	addi	fp,sp,24
    4514:	e13ffe15 	stw	r4,-8(fp)
    4518:	e17fff15 	stw	r5,-4(fp)
    451c:	e0bfff17 	ldw	r2,-4(fp)
    4520:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4524:	0005303a 	rdctl	r2,status
    4528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    452c:	e0fffb17 	ldw	r3,-20(fp)
    4530:	00bfff84 	movi	r2,-2
    4534:	1884703a 	and	r2,r3,r2
    4538:	1001703a 	wrctl	status,r2
  
  return context;
    453c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4540:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    4544:	e0fffc17 	ldw	r3,-16(fp)
    4548:	00800044 	movi	r2,1
    454c:	10c4983a 	sll	r2,r2,r3
    4550:	1007883a 	mov	r3,r2
    4554:	00800034 	movhi	r2,0
    4558:	109a6704 	addi	r2,r2,27036
    455c:	10800017 	ldw	r2,0(r2)
    4560:	1886b03a 	or	r3,r3,r2
    4564:	00800034 	movhi	r2,0
    4568:	109a6704 	addi	r2,r2,27036
    456c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4570:	00800034 	movhi	r2,0
    4574:	109a6704 	addi	r2,r2,27036
    4578:	10800017 	ldw	r2,0(r2)
    457c:	100170fa 	wrctl	ienable,r2
    4580:	e0bffd17 	ldw	r2,-12(fp)
    4584:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4588:	e0bffa17 	ldw	r2,-24(fp)
    458c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4590:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    4594:	e037883a 	mov	sp,fp
    4598:	df000017 	ldw	fp,0(sp)
    459c:	dec00104 	addi	sp,sp,4
    45a0:	f800283a 	ret

000045a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    45a4:	defff904 	addi	sp,sp,-28
    45a8:	df000615 	stw	fp,24(sp)
    45ac:	df000604 	addi	fp,sp,24
    45b0:	e13ffe15 	stw	r4,-8(fp)
    45b4:	e17fff15 	stw	r5,-4(fp)
    45b8:	e0bfff17 	ldw	r2,-4(fp)
    45bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    45c0:	0005303a 	rdctl	r2,status
    45c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    45c8:	e0fffb17 	ldw	r3,-20(fp)
    45cc:	00bfff84 	movi	r2,-2
    45d0:	1884703a 	and	r2,r3,r2
    45d4:	1001703a 	wrctl	status,r2
  
  return context;
    45d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    45dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    45e0:	e0fffc17 	ldw	r3,-16(fp)
    45e4:	00800044 	movi	r2,1
    45e8:	10c4983a 	sll	r2,r2,r3
    45ec:	0084303a 	nor	r2,zero,r2
    45f0:	1007883a 	mov	r3,r2
    45f4:	00800034 	movhi	r2,0
    45f8:	109a6704 	addi	r2,r2,27036
    45fc:	10800017 	ldw	r2,0(r2)
    4600:	1886703a 	and	r3,r3,r2
    4604:	00800034 	movhi	r2,0
    4608:	109a6704 	addi	r2,r2,27036
    460c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4610:	00800034 	movhi	r2,0
    4614:	109a6704 	addi	r2,r2,27036
    4618:	10800017 	ldw	r2,0(r2)
    461c:	100170fa 	wrctl	ienable,r2
    4620:	e0bffd17 	ldw	r2,-12(fp)
    4624:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4628:	e0bffa17 	ldw	r2,-24(fp)
    462c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4630:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    4634:	e037883a 	mov	sp,fp
    4638:	df000017 	ldw	fp,0(sp)
    463c:	dec00104 	addi	sp,sp,4
    4640:	f800283a 	ret

00004644 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4644:	defffc04 	addi	sp,sp,-16
    4648:	df000315 	stw	fp,12(sp)
    464c:	df000304 	addi	fp,sp,12
    4650:	e13ffe15 	stw	r4,-8(fp)
    4654:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4658:	000530fa 	rdctl	r2,ienable
    465c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4660:	e0ffff17 	ldw	r3,-4(fp)
    4664:	00800044 	movi	r2,1
    4668:	10c4983a 	sll	r2,r2,r3
    466c:	1007883a 	mov	r3,r2
    4670:	e0bffd17 	ldw	r2,-12(fp)
    4674:	1884703a 	and	r2,r3,r2
    4678:	1004c03a 	cmpne	r2,r2,zero
}
    467c:	e037883a 	mov	sp,fp
    4680:	df000017 	ldw	fp,0(sp)
    4684:	dec00104 	addi	sp,sp,4
    4688:	f800283a 	ret

0000468c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    468c:	defff404 	addi	sp,sp,-48
    4690:	dfc00b15 	stw	ra,44(sp)
    4694:	df000a15 	stw	fp,40(sp)
    4698:	df000a04 	addi	fp,sp,40
    469c:	e13ffb15 	stw	r4,-20(fp)
    46a0:	e17ffc15 	stw	r5,-16(fp)
    46a4:	e1bffd15 	stw	r6,-12(fp)
    46a8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    46ac:	00bffa84 	movi	r2,-22
    46b0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    46b4:	e0bffc17 	ldw	r2,-16(fp)
    46b8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    46bc:	e0bff917 	ldw	r2,-28(fp)
    46c0:	10800808 	cmpgei	r2,r2,32
    46c4:	1000291e 	bne	r2,zero,476c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46c8:	0005303a 	rdctl	r2,status
    46cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46d0:	e0fff717 	ldw	r3,-36(fp)
    46d4:	00bfff84 	movi	r2,-2
    46d8:	1884703a 	and	r2,r3,r2
    46dc:	1001703a 	wrctl	status,r2
  
  return context;
    46e0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    46e4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    46e8:	e0bff917 	ldw	r2,-28(fp)
    46ec:	00c00034 	movhi	r3,0
    46f0:	18da7204 	addi	r3,r3,27080
    46f4:	100490fa 	slli	r2,r2,3
    46f8:	10c7883a 	add	r3,r2,r3
    46fc:	e0bffd17 	ldw	r2,-12(fp)
    4700:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    4704:	e0bff917 	ldw	r2,-28(fp)
    4708:	00c00034 	movhi	r3,0
    470c:	18da7204 	addi	r3,r3,27080
    4710:	100490fa 	slli	r2,r2,3
    4714:	10c5883a 	add	r2,r2,r3
    4718:	10c00104 	addi	r3,r2,4
    471c:	e0bffe17 	ldw	r2,-8(fp)
    4720:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4724:	e0bffd17 	ldw	r2,-12(fp)
    4728:	1005003a 	cmpeq	r2,r2,zero
    472c:	1000051e 	bne	r2,zero,4744 <alt_iic_isr_register+0xb8>
    4730:	e17ff917 	ldw	r5,-28(fp)
    4734:	e13ffb17 	ldw	r4,-20(fp)
    4738:	00045080 	call	4508 <alt_ic_irq_enable>
    473c:	e0bfff15 	stw	r2,-4(fp)
    4740:	00000406 	br	4754 <alt_iic_isr_register+0xc8>
    4744:	e17ff917 	ldw	r5,-28(fp)
    4748:	e13ffb17 	ldw	r4,-20(fp)
    474c:	00045a40 	call	45a4 <alt_ic_irq_disable>
    4750:	e0bfff15 	stw	r2,-4(fp)
    4754:	e0bfff17 	ldw	r2,-4(fp)
    4758:	e0bffa15 	stw	r2,-24(fp)
    475c:	e0bff817 	ldw	r2,-32(fp)
    4760:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4764:	e0bff617 	ldw	r2,-40(fp)
    4768:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    476c:	e0bffa17 	ldw	r2,-24(fp)
}
    4770:	e037883a 	mov	sp,fp
    4774:	dfc00117 	ldw	ra,4(sp)
    4778:	df000017 	ldw	fp,0(sp)
    477c:	dec00204 	addi	sp,sp,8
    4780:	f800283a 	ret

00004784 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4784:	defff904 	addi	sp,sp,-28
    4788:	dfc00615 	stw	ra,24(sp)
    478c:	df000515 	stw	fp,20(sp)
    4790:	df000504 	addi	fp,sp,20
    4794:	e13ffc15 	stw	r4,-16(fp)
    4798:	e17ffd15 	stw	r5,-12(fp)
    479c:	e1bffe15 	stw	r6,-8(fp)
    47a0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    47a4:	e13ffd17 	ldw	r4,-12(fp)
    47a8:	e17ffe17 	ldw	r5,-8(fp)
    47ac:	e1bfff17 	ldw	r6,-4(fp)
    47b0:	000499c0 	call	499c <open>
    47b4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    47b8:	e0bffb17 	ldw	r2,-20(fp)
    47bc:	1004803a 	cmplt	r2,r2,zero
    47c0:	10001c1e 	bne	r2,zero,4834 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    47c4:	e0bffb17 	ldw	r2,-20(fp)
    47c8:	00c00034 	movhi	r3,0
    47cc:	18d71a04 	addi	r3,r3,23656
    47d0:	10800324 	muli	r2,r2,12
    47d4:	10c5883a 	add	r2,r2,r3
    47d8:	10c00017 	ldw	r3,0(r2)
    47dc:	e0bffc17 	ldw	r2,-16(fp)
    47e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    47e4:	e0bffb17 	ldw	r2,-20(fp)
    47e8:	00c00034 	movhi	r3,0
    47ec:	18d71a04 	addi	r3,r3,23656
    47f0:	10800324 	muli	r2,r2,12
    47f4:	10c5883a 	add	r2,r2,r3
    47f8:	10800104 	addi	r2,r2,4
    47fc:	10c00017 	ldw	r3,0(r2)
    4800:	e0bffc17 	ldw	r2,-16(fp)
    4804:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4808:	e0bffb17 	ldw	r2,-20(fp)
    480c:	00c00034 	movhi	r3,0
    4810:	18d71a04 	addi	r3,r3,23656
    4814:	10800324 	muli	r2,r2,12
    4818:	10c5883a 	add	r2,r2,r3
    481c:	10800204 	addi	r2,r2,8
    4820:	10c00017 	ldw	r3,0(r2)
    4824:	e0bffc17 	ldw	r2,-16(fp)
    4828:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    482c:	e13ffb17 	ldw	r4,-20(fp)
    4830:	00033f00 	call	33f0 <alt_release_fd>
  }
} 
    4834:	e037883a 	mov	sp,fp
    4838:	dfc00117 	ldw	ra,4(sp)
    483c:	df000017 	ldw	fp,0(sp)
    4840:	dec00204 	addi	sp,sp,8
    4844:	f800283a 	ret

00004848 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4848:	defffb04 	addi	sp,sp,-20
    484c:	dfc00415 	stw	ra,16(sp)
    4850:	df000315 	stw	fp,12(sp)
    4854:	df000304 	addi	fp,sp,12
    4858:	e13ffd15 	stw	r4,-12(fp)
    485c:	e17ffe15 	stw	r5,-8(fp)
    4860:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4864:	01000034 	movhi	r4,0
    4868:	21171d04 	addi	r4,r4,23668
    486c:	e17ffd17 	ldw	r5,-12(fp)
    4870:	01800044 	movi	r6,1
    4874:	01c07fc4 	movi	r7,511
    4878:	00047840 	call	4784 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    487c:	01000034 	movhi	r4,0
    4880:	21171a04 	addi	r4,r4,23656
    4884:	e17ffe17 	ldw	r5,-8(fp)
    4888:	000d883a 	mov	r6,zero
    488c:	01c07fc4 	movi	r7,511
    4890:	00047840 	call	4784 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4894:	01000034 	movhi	r4,0
    4898:	21172004 	addi	r4,r4,23680
    489c:	e17fff17 	ldw	r5,-4(fp)
    48a0:	01800044 	movi	r6,1
    48a4:	01c07fc4 	movi	r7,511
    48a8:	00047840 	call	4784 <alt_open_fd>
}  
    48ac:	e037883a 	mov	sp,fp
    48b0:	dfc00117 	ldw	ra,4(sp)
    48b4:	df000017 	ldw	fp,0(sp)
    48b8:	dec00204 	addi	sp,sp,8
    48bc:	f800283a 	ret

000048c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    48c0:	defffc04 	addi	sp,sp,-16
    48c4:	df000315 	stw	fp,12(sp)
    48c8:	df000304 	addi	fp,sp,12
    48cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    48d0:	e0bffe17 	ldw	r2,-8(fp)
    48d4:	10800217 	ldw	r2,8(r2)
    48d8:	10d00034 	orhi	r3,r2,16384
    48dc:	e0bffe17 	ldw	r2,-8(fp)
    48e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    48e4:	e03ffd15 	stw	zero,-12(fp)
    48e8:	00002006 	br	496c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    48ec:	e0bffd17 	ldw	r2,-12(fp)
    48f0:	00c00034 	movhi	r3,0
    48f4:	18d71a04 	addi	r3,r3,23656
    48f8:	10800324 	muli	r2,r2,12
    48fc:	10c5883a 	add	r2,r2,r3
    4900:	10c00017 	ldw	r3,0(r2)
    4904:	e0bffe17 	ldw	r2,-8(fp)
    4908:	10800017 	ldw	r2,0(r2)
    490c:	1880141e 	bne	r3,r2,4960 <alt_file_locked+0xa0>
    4910:	e0bffd17 	ldw	r2,-12(fp)
    4914:	00c00034 	movhi	r3,0
    4918:	18d71a04 	addi	r3,r3,23656
    491c:	10800324 	muli	r2,r2,12
    4920:	10c5883a 	add	r2,r2,r3
    4924:	10800204 	addi	r2,r2,8
    4928:	10800017 	ldw	r2,0(r2)
    492c:	1004403a 	cmpge	r2,r2,zero
    4930:	10000b1e 	bne	r2,zero,4960 <alt_file_locked+0xa0>
    4934:	e0bffd17 	ldw	r2,-12(fp)
    4938:	10800324 	muli	r2,r2,12
    493c:	1007883a 	mov	r3,r2
    4940:	00800034 	movhi	r2,0
    4944:	10971a04 	addi	r2,r2,23656
    4948:	1887883a 	add	r3,r3,r2
    494c:	e0bffe17 	ldw	r2,-8(fp)
    4950:	18800326 	beq	r3,r2,4960 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4954:	00bffcc4 	movi	r2,-13
    4958:	e0bfff15 	stw	r2,-4(fp)
    495c:	00000a06 	br	4988 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4960:	e0bffd17 	ldw	r2,-12(fp)
    4964:	10800044 	addi	r2,r2,1
    4968:	e0bffd15 	stw	r2,-12(fp)
    496c:	00800034 	movhi	r2,0
    4970:	1097b304 	addi	r2,r2,24268
    4974:	10800017 	ldw	r2,0(r2)
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffd17 	ldw	r2,-12(fp)
    4980:	18bfda2e 	bgeu	r3,r2,48ec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4984:	e03fff15 	stw	zero,-4(fp)
    4988:	e0bfff17 	ldw	r2,-4(fp)
}
    498c:	e037883a 	mov	sp,fp
    4990:	df000017 	ldw	fp,0(sp)
    4994:	dec00104 	addi	sp,sp,4
    4998:	f800283a 	ret

0000499c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    499c:	defff404 	addi	sp,sp,-48
    49a0:	dfc00b15 	stw	ra,44(sp)
    49a4:	df000a15 	stw	fp,40(sp)
    49a8:	df000a04 	addi	fp,sp,40
    49ac:	e13ffb15 	stw	r4,-20(fp)
    49b0:	e17ffc15 	stw	r5,-16(fp)
    49b4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    49b8:	00bfffc4 	movi	r2,-1
    49bc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    49c0:	00bffb44 	movi	r2,-19
    49c4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    49c8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    49cc:	e13ffb17 	ldw	r4,-20(fp)
    49d0:	01400034 	movhi	r5,0
    49d4:	2957b104 	addi	r5,r5,24260
    49d8:	0004ba40 	call	4ba4 <alt_find_dev>
    49dc:	e0bffa15 	stw	r2,-24(fp)
    49e0:	e0bffa17 	ldw	r2,-24(fp)
    49e4:	1004c03a 	cmpne	r2,r2,zero
    49e8:	1000051e 	bne	r2,zero,4a00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    49ec:	e13ffb17 	ldw	r4,-20(fp)
    49f0:	0004c380 	call	4c38 <alt_find_file>
    49f4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    49f8:	00800044 	movi	r2,1
    49fc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4a00:	e0bffa17 	ldw	r2,-24(fp)
    4a04:	1005003a 	cmpeq	r2,r2,zero
    4a08:	1000301e 	bne	r2,zero,4acc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4a0c:	e13ffa17 	ldw	r4,-24(fp)
    4a10:	0004d580 	call	4d58 <alt_get_fd>
    4a14:	e0bff815 	stw	r2,-32(fp)
    4a18:	e0bff817 	ldw	r2,-32(fp)
    4a1c:	1004403a 	cmpge	r2,r2,zero
    4a20:	1000031e 	bne	r2,zero,4a30 <open+0x94>
    {
      status = index;
    4a24:	e0bff817 	ldw	r2,-32(fp)
    4a28:	e0bff715 	stw	r2,-36(fp)
    4a2c:	00002906 	br	4ad4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    4a30:	e0bff817 	ldw	r2,-32(fp)
    4a34:	10800324 	muli	r2,r2,12
    4a38:	1007883a 	mov	r3,r2
    4a3c:	00800034 	movhi	r2,0
    4a40:	10971a04 	addi	r2,r2,23656
    4a44:	1885883a 	add	r2,r3,r2
    4a48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4a4c:	e0fffc17 	ldw	r3,-16(fp)
    4a50:	00900034 	movhi	r2,16384
    4a54:	10bfffc4 	addi	r2,r2,-1
    4a58:	1886703a 	and	r3,r3,r2
    4a5c:	e0bff917 	ldw	r2,-28(fp)
    4a60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4a64:	e0bff617 	ldw	r2,-40(fp)
    4a68:	1004c03a 	cmpne	r2,r2,zero
    4a6c:	1000061e 	bne	r2,zero,4a88 <open+0xec>
    4a70:	e13ff917 	ldw	r4,-28(fp)
    4a74:	00048c00 	call	48c0 <alt_file_locked>
    4a78:	e0bff715 	stw	r2,-36(fp)
    4a7c:	e0bff717 	ldw	r2,-36(fp)
    4a80:	1004803a 	cmplt	r2,r2,zero
    4a84:	1000131e 	bne	r2,zero,4ad4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4a88:	e0bffa17 	ldw	r2,-24(fp)
    4a8c:	10800317 	ldw	r2,12(r2)
    4a90:	1005003a 	cmpeq	r2,r2,zero
    4a94:	1000091e 	bne	r2,zero,4abc <open+0x120>
    4a98:	e0bffa17 	ldw	r2,-24(fp)
    4a9c:	10800317 	ldw	r2,12(r2)
    4aa0:	e13ff917 	ldw	r4,-28(fp)
    4aa4:	e17ffb17 	ldw	r5,-20(fp)
    4aa8:	e1bffc17 	ldw	r6,-16(fp)
    4aac:	e1fffd17 	ldw	r7,-12(fp)
    4ab0:	103ee83a 	callr	r2
    4ab4:	e0bfff15 	stw	r2,-4(fp)
    4ab8:	00000106 	br	4ac0 <open+0x124>
    4abc:	e03fff15 	stw	zero,-4(fp)
    4ac0:	e0bfff17 	ldw	r2,-4(fp)
    4ac4:	e0bff715 	stw	r2,-36(fp)
    4ac8:	00000206 	br	4ad4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4acc:	00bffb44 	movi	r2,-19
    4ad0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4ad4:	e0bff717 	ldw	r2,-36(fp)
    4ad8:	1004403a 	cmpge	r2,r2,zero
    4adc:	1000091e 	bne	r2,zero,4b04 <open+0x168>
  {
    alt_release_fd (index);  
    4ae0:	e13ff817 	ldw	r4,-32(fp)
    4ae4:	00033f00 	call	33f0 <alt_release_fd>
    ALT_ERRNO = -status;
    4ae8:	0004b240 	call	4b24 <alt_get_errno>
    4aec:	e0fff717 	ldw	r3,-36(fp)
    4af0:	00c7c83a 	sub	r3,zero,r3
    4af4:	10c00015 	stw	r3,0(r2)
    return -1;
    4af8:	00bfffc4 	movi	r2,-1
    4afc:	e0bffe15 	stw	r2,-8(fp)
    4b00:	00000206 	br	4b0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    4b04:	e0bff817 	ldw	r2,-32(fp)
    4b08:	e0bffe15 	stw	r2,-8(fp)
    4b0c:	e0bffe17 	ldw	r2,-8(fp)
}
    4b10:	e037883a 	mov	sp,fp
    4b14:	dfc00117 	ldw	ra,4(sp)
    4b18:	df000017 	ldw	fp,0(sp)
    4b1c:	dec00204 	addi	sp,sp,8
    4b20:	f800283a 	ret

00004b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4b24:	defffd04 	addi	sp,sp,-12
    4b28:	dfc00215 	stw	ra,8(sp)
    4b2c:	df000115 	stw	fp,4(sp)
    4b30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4b34:	00800034 	movhi	r2,0
    4b38:	1097b404 	addi	r2,r2,24272
    4b3c:	10800017 	ldw	r2,0(r2)
    4b40:	1005003a 	cmpeq	r2,r2,zero
    4b44:	1000061e 	bne	r2,zero,4b60 <alt_get_errno+0x3c>
    4b48:	00800034 	movhi	r2,0
    4b4c:	1097b404 	addi	r2,r2,24272
    4b50:	10800017 	ldw	r2,0(r2)
    4b54:	103ee83a 	callr	r2
    4b58:	e0bfff15 	stw	r2,-4(fp)
    4b5c:	00000306 	br	4b6c <alt_get_errno+0x48>
    4b60:	00800034 	movhi	r2,0
    4b64:	109a6304 	addi	r2,r2,27020
    4b68:	e0bfff15 	stw	r2,-4(fp)
    4b6c:	e0bfff17 	ldw	r2,-4(fp)
}
    4b70:	e037883a 	mov	sp,fp
    4b74:	dfc00117 	ldw	ra,4(sp)
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00204 	addi	sp,sp,8
    4b80:	f800283a 	ret

00004b84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    4b84:	deffff04 	addi	sp,sp,-4
    4b88:	df000015 	stw	fp,0(sp)
    4b8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4b90:	000170fa 	wrctl	ienable,zero
}
    4b94:	e037883a 	mov	sp,fp
    4b98:	df000017 	ldw	fp,0(sp)
    4b9c:	dec00104 	addi	sp,sp,4
    4ba0:	f800283a 	ret

00004ba4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4ba4:	defff904 	addi	sp,sp,-28
    4ba8:	dfc00615 	stw	ra,24(sp)
    4bac:	df000515 	stw	fp,20(sp)
    4bb0:	df000504 	addi	fp,sp,20
    4bb4:	e13ffd15 	stw	r4,-12(fp)
    4bb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4bbc:	e0bffe17 	ldw	r2,-8(fp)
    4bc0:	10800017 	ldw	r2,0(r2)
    4bc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4bc8:	e13ffd17 	ldw	r4,-12(fp)
    4bcc:	00003500 	call	350 <strlen>
    4bd0:	10800044 	addi	r2,r2,1
    4bd4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4bd8:	00000d06 	br	4c10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4bdc:	e0bffc17 	ldw	r2,-16(fp)
    4be0:	11000217 	ldw	r4,8(r2)
    4be4:	e1bffb17 	ldw	r6,-20(fp)
    4be8:	e17ffd17 	ldw	r5,-12(fp)
    4bec:	0004eec0 	call	4eec <memcmp>
    4bf0:	1004c03a 	cmpne	r2,r2,zero
    4bf4:	1000031e 	bne	r2,zero,4c04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4bf8:	e0bffc17 	ldw	r2,-16(fp)
    4bfc:	e0bfff15 	stw	r2,-4(fp)
    4c00:	00000706 	br	4c20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4c04:	e0bffc17 	ldw	r2,-16(fp)
    4c08:	10800017 	ldw	r2,0(r2)
    4c0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4c10:	e0fffe17 	ldw	r3,-8(fp)
    4c14:	e0bffc17 	ldw	r2,-16(fp)
    4c18:	10fff01e 	bne	r2,r3,4bdc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4c1c:	e03fff15 	stw	zero,-4(fp)
    4c20:	e0bfff17 	ldw	r2,-4(fp)
}
    4c24:	e037883a 	mov	sp,fp
    4c28:	dfc00117 	ldw	ra,4(sp)
    4c2c:	df000017 	ldw	fp,0(sp)
    4c30:	dec00204 	addi	sp,sp,8
    4c34:	f800283a 	ret

00004c38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4c38:	defffa04 	addi	sp,sp,-24
    4c3c:	dfc00515 	stw	ra,20(sp)
    4c40:	df000415 	stw	fp,16(sp)
    4c44:	df000404 	addi	fp,sp,16
    4c48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4c4c:	00800034 	movhi	r2,0
    4c50:	1097af04 	addi	r2,r2,24252
    4c54:	10800017 	ldw	r2,0(r2)
    4c58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4c5c:	00003306 	br	4d2c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    4c60:	e0bffd17 	ldw	r2,-12(fp)
    4c64:	11000217 	ldw	r4,8(r2)
    4c68:	00003500 	call	350 <strlen>
    4c6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    4c70:	e0bffd17 	ldw	r2,-12(fp)
    4c74:	10c00217 	ldw	r3,8(r2)
    4c78:	e0bffc17 	ldw	r2,-16(fp)
    4c7c:	1885883a 	add	r2,r3,r2
    4c80:	10bfffc4 	addi	r2,r2,-1
    4c84:	10800003 	ldbu	r2,0(r2)
    4c88:	10803fcc 	andi	r2,r2,255
    4c8c:	1080201c 	xori	r2,r2,128
    4c90:	10bfe004 	addi	r2,r2,-128
    4c94:	10800bd8 	cmpnei	r2,r2,47
    4c98:	1000031e 	bne	r2,zero,4ca8 <alt_find_file+0x70>
    {
      len -= 1;
    4c9c:	e0bffc17 	ldw	r2,-16(fp)
    4ca0:	10bfffc4 	addi	r2,r2,-1
    4ca4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4ca8:	e0bffc17 	ldw	r2,-16(fp)
    4cac:	1007883a 	mov	r3,r2
    4cb0:	e0bffe17 	ldw	r2,-8(fp)
    4cb4:	1885883a 	add	r2,r3,r2
    4cb8:	10800003 	ldbu	r2,0(r2)
    4cbc:	10803fcc 	andi	r2,r2,255
    4cc0:	1080201c 	xori	r2,r2,128
    4cc4:	10bfe004 	addi	r2,r2,-128
    4cc8:	10800be0 	cmpeqi	r2,r2,47
    4ccc:	10000a1e 	bne	r2,zero,4cf8 <alt_find_file+0xc0>
    4cd0:	e0bffc17 	ldw	r2,-16(fp)
    4cd4:	1007883a 	mov	r3,r2
    4cd8:	e0bffe17 	ldw	r2,-8(fp)
    4cdc:	1885883a 	add	r2,r3,r2
    4ce0:	10800003 	ldbu	r2,0(r2)
    4ce4:	10803fcc 	andi	r2,r2,255
    4ce8:	1080201c 	xori	r2,r2,128
    4cec:	10bfe004 	addi	r2,r2,-128
    4cf0:	1004c03a 	cmpne	r2,r2,zero
    4cf4:	10000a1e 	bne	r2,zero,4d20 <alt_find_file+0xe8>
    4cf8:	e0bffd17 	ldw	r2,-12(fp)
    4cfc:	11000217 	ldw	r4,8(r2)
    4d00:	e1bffc17 	ldw	r6,-16(fp)
    4d04:	e17ffe17 	ldw	r5,-8(fp)
    4d08:	0004eec0 	call	4eec <memcmp>
    4d0c:	1004c03a 	cmpne	r2,r2,zero
    4d10:	1000031e 	bne	r2,zero,4d20 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4d14:	e0bffd17 	ldw	r2,-12(fp)
    4d18:	e0bfff15 	stw	r2,-4(fp)
    4d1c:	00000806 	br	4d40 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    4d20:	e0bffd17 	ldw	r2,-12(fp)
    4d24:	10800017 	ldw	r2,0(r2)
    4d28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4d2c:	00c00034 	movhi	r3,0
    4d30:	18d7af04 	addi	r3,r3,24252
    4d34:	e0bffd17 	ldw	r2,-12(fp)
    4d38:	10ffc91e 	bne	r2,r3,4c60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4d3c:	e03fff15 	stw	zero,-4(fp)
    4d40:	e0bfff17 	ldw	r2,-4(fp)
}
    4d44:	e037883a 	mov	sp,fp
    4d48:	dfc00117 	ldw	ra,4(sp)
    4d4c:	df000017 	ldw	fp,0(sp)
    4d50:	dec00204 	addi	sp,sp,8
    4d54:	f800283a 	ret

00004d58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4d58:	defffc04 	addi	sp,sp,-16
    4d5c:	df000315 	stw	fp,12(sp)
    4d60:	df000304 	addi	fp,sp,12
    4d64:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    4d68:	00bffa04 	movi	r2,-24
    4d6c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4d70:	e03ffe15 	stw	zero,-8(fp)
    4d74:	00001e06 	br	4df0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    4d78:	e0bffe17 	ldw	r2,-8(fp)
    4d7c:	00c00034 	movhi	r3,0
    4d80:	18d71a04 	addi	r3,r3,23656
    4d84:	10800324 	muli	r2,r2,12
    4d88:	10c5883a 	add	r2,r2,r3
    4d8c:	10800017 	ldw	r2,0(r2)
    4d90:	1004c03a 	cmpne	r2,r2,zero
    4d94:	1000131e 	bne	r2,zero,4de4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    4d98:	e0bffe17 	ldw	r2,-8(fp)
    4d9c:	00c00034 	movhi	r3,0
    4da0:	18d71a04 	addi	r3,r3,23656
    4da4:	10800324 	muli	r2,r2,12
    4da8:	10c7883a 	add	r3,r2,r3
    4dac:	e0bfff17 	ldw	r2,-4(fp)
    4db0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    4db4:	00800034 	movhi	r2,0
    4db8:	1097b304 	addi	r2,r2,24268
    4dbc:	10c00017 	ldw	r3,0(r2)
    4dc0:	e0bffe17 	ldw	r2,-8(fp)
    4dc4:	1880040e 	bge	r3,r2,4dd8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    4dc8:	00c00034 	movhi	r3,0
    4dcc:	18d7b304 	addi	r3,r3,24268
    4dd0:	e0bffe17 	ldw	r2,-8(fp)
    4dd4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    4dd8:	e0bffe17 	ldw	r2,-8(fp)
    4ddc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4de0:	00000606 	br	4dfc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4de4:	e0bffe17 	ldw	r2,-8(fp)
    4de8:	10800044 	addi	r2,r2,1
    4dec:	e0bffe15 	stw	r2,-8(fp)
    4df0:	e0bffe17 	ldw	r2,-8(fp)
    4df4:	10800810 	cmplti	r2,r2,32
    4df8:	103fdf1e 	bne	r2,zero,4d78 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4dfc:	e0bffd17 	ldw	r2,-12(fp)
}
    4e00:	e037883a 	mov	sp,fp
    4e04:	df000017 	ldw	fp,0(sp)
    4e08:	dec00104 	addi	sp,sp,4
    4e0c:	f800283a 	ret

00004e10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    4e10:	defffb04 	addi	sp,sp,-20
    4e14:	df000415 	stw	fp,16(sp)
    4e18:	df000404 	addi	fp,sp,16
    4e1c:	e13ffe15 	stw	r4,-8(fp)
    4e20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    4e24:	e0bfff17 	ldw	r2,-4(fp)
    4e28:	10840070 	cmpltui	r2,r2,4097
    4e2c:	1000021e 	bne	r2,zero,4e38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    4e30:	00840004 	movi	r2,4096
    4e34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    4e38:	e0fffe17 	ldw	r3,-8(fp)
    4e3c:	e0bfff17 	ldw	r2,-4(fp)
    4e40:	1885883a 	add	r2,r3,r2
    4e44:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4e48:	e0bffe17 	ldw	r2,-8(fp)
    4e4c:	e0bffd15 	stw	r2,-12(fp)
    4e50:	00000506 	br	4e68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4e54:	e0bffd17 	ldw	r2,-12(fp)
    4e58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4e5c:	e0bffd17 	ldw	r2,-12(fp)
    4e60:	10800804 	addi	r2,r2,32
    4e64:	e0bffd15 	stw	r2,-12(fp)
    4e68:	e0fffd17 	ldw	r3,-12(fp)
    4e6c:	e0bffc17 	ldw	r2,-16(fp)
    4e70:	18bff836 	bltu	r3,r2,4e54 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4e74:	e0bffe17 	ldw	r2,-8(fp)
    4e78:	108007cc 	andi	r2,r2,31
    4e7c:	1005003a 	cmpeq	r2,r2,zero
    4e80:	1000021e 	bne	r2,zero,4e8c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    4e84:	e0bffd17 	ldw	r2,-12(fp)
    4e88:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    4e8c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    4e90:	e037883a 	mov	sp,fp
    4e94:	df000017 	ldw	fp,0(sp)
    4e98:	dec00104 	addi	sp,sp,4
    4e9c:	f800283a 	ret

00004ea0 <atexit>:
    4ea0:	200b883a 	mov	r5,r4
    4ea4:	000d883a 	mov	r6,zero
    4ea8:	0009883a 	mov	r4,zero
    4eac:	000f883a 	mov	r7,zero
    4eb0:	0004f601 	jmpi	4f60 <__register_exitproc>

00004eb4 <exit>:
    4eb4:	defffe04 	addi	sp,sp,-8
    4eb8:	000b883a 	mov	r5,zero
    4ebc:	dc000015 	stw	r16,0(sp)
    4ec0:	dfc00115 	stw	ra,4(sp)
    4ec4:	2021883a 	mov	r16,r4
    4ec8:	00050980 	call	5098 <__call_exitprocs>
    4ecc:	00800034 	movhi	r2,0
    4ed0:	1097ac04 	addi	r2,r2,24240
    4ed4:	11000017 	ldw	r4,0(r2)
    4ed8:	20800f17 	ldw	r2,60(r4)
    4edc:	10000126 	beq	r2,zero,4ee4 <exit+0x30>
    4ee0:	103ee83a 	callr	r2
    4ee4:	8009883a 	mov	r4,r16
    4ee8:	00053d40 	call	53d4 <_exit>

00004eec <memcmp>:
    4eec:	00c000c4 	movi	r3,3
    4ef0:	1980032e 	bgeu	r3,r6,4f00 <memcmp+0x14>
    4ef4:	2144b03a 	or	r2,r4,r5
    4ef8:	10c4703a 	and	r2,r2,r3
    4efc:	10000f26 	beq	r2,zero,4f3c <memcmp+0x50>
    4f00:	31ffffc4 	addi	r7,r6,-1
    4f04:	3000061e 	bne	r6,zero,4f20 <memcmp+0x34>
    4f08:	00000a06 	br	4f34 <memcmp+0x48>
    4f0c:	39ffffc4 	addi	r7,r7,-1
    4f10:	00bfffc4 	movi	r2,-1
    4f14:	21000044 	addi	r4,r4,1
    4f18:	29400044 	addi	r5,r5,1
    4f1c:	38800526 	beq	r7,r2,4f34 <memcmp+0x48>
    4f20:	20c00003 	ldbu	r3,0(r4)
    4f24:	28800003 	ldbu	r2,0(r5)
    4f28:	18bff826 	beq	r3,r2,4f0c <memcmp+0x20>
    4f2c:	1885c83a 	sub	r2,r3,r2
    4f30:	f800283a 	ret
    4f34:	0005883a 	mov	r2,zero
    4f38:	f800283a 	ret
    4f3c:	180f883a 	mov	r7,r3
    4f40:	20c00017 	ldw	r3,0(r4)
    4f44:	28800017 	ldw	r2,0(r5)
    4f48:	18bfed1e 	bne	r3,r2,4f00 <memcmp+0x14>
    4f4c:	31bfff04 	addi	r6,r6,-4
    4f50:	21000104 	addi	r4,r4,4
    4f54:	29400104 	addi	r5,r5,4
    4f58:	39bff936 	bltu	r7,r6,4f40 <memcmp+0x54>
    4f5c:	003fe806 	br	4f00 <memcmp+0x14>

00004f60 <__register_exitproc>:
    4f60:	defffa04 	addi	sp,sp,-24
    4f64:	00800034 	movhi	r2,0
    4f68:	1097ac04 	addi	r2,r2,24240
    4f6c:	dc000015 	stw	r16,0(sp)
    4f70:	14000017 	ldw	r16,0(r2)
    4f74:	dd000415 	stw	r20,16(sp)
    4f78:	2829883a 	mov	r20,r5
    4f7c:	81405217 	ldw	r5,328(r16)
    4f80:	dcc00315 	stw	r19,12(sp)
    4f84:	dc800215 	stw	r18,8(sp)
    4f88:	dc400115 	stw	r17,4(sp)
    4f8c:	dfc00515 	stw	ra,20(sp)
    4f90:	2023883a 	mov	r17,r4
    4f94:	3027883a 	mov	r19,r6
    4f98:	3825883a 	mov	r18,r7
    4f9c:	28002526 	beq	r5,zero,5034 <__register_exitproc+0xd4>
    4fa0:	29000117 	ldw	r4,4(r5)
    4fa4:	008007c4 	movi	r2,31
    4fa8:	11002716 	blt	r2,r4,5048 <__register_exitproc+0xe8>
    4fac:	8800101e 	bne	r17,zero,4ff0 <__register_exitproc+0x90>
    4fb0:	2105883a 	add	r2,r4,r4
    4fb4:	1085883a 	add	r2,r2,r2
    4fb8:	20c00044 	addi	r3,r4,1
    4fbc:	1145883a 	add	r2,r2,r5
    4fc0:	0009883a 	mov	r4,zero
    4fc4:	15000215 	stw	r20,8(r2)
    4fc8:	28c00115 	stw	r3,4(r5)
    4fcc:	2005883a 	mov	r2,r4
    4fd0:	dfc00517 	ldw	ra,20(sp)
    4fd4:	dd000417 	ldw	r20,16(sp)
    4fd8:	dcc00317 	ldw	r19,12(sp)
    4fdc:	dc800217 	ldw	r18,8(sp)
    4fe0:	dc400117 	ldw	r17,4(sp)
    4fe4:	dc000017 	ldw	r16,0(sp)
    4fe8:	dec00604 	addi	sp,sp,24
    4fec:	f800283a 	ret
    4ff0:	29802204 	addi	r6,r5,136
    4ff4:	00800044 	movi	r2,1
    4ff8:	110e983a 	sll	r7,r2,r4
    4ffc:	30c04017 	ldw	r3,256(r6)
    5000:	2105883a 	add	r2,r4,r4
    5004:	1085883a 	add	r2,r2,r2
    5008:	1185883a 	add	r2,r2,r6
    500c:	19c6b03a 	or	r3,r3,r7
    5010:	14802015 	stw	r18,128(r2)
    5014:	14c00015 	stw	r19,0(r2)
    5018:	00800084 	movi	r2,2
    501c:	30c04015 	stw	r3,256(r6)
    5020:	88bfe31e 	bne	r17,r2,4fb0 <__register_exitproc+0x50>
    5024:	30804117 	ldw	r2,260(r6)
    5028:	11c4b03a 	or	r2,r2,r7
    502c:	30804115 	stw	r2,260(r6)
    5030:	003fdf06 	br	4fb0 <__register_exitproc+0x50>
    5034:	00800034 	movhi	r2,0
    5038:	109ab204 	addi	r2,r2,27336
    503c:	100b883a 	mov	r5,r2
    5040:	80805215 	stw	r2,328(r16)
    5044:	003fd606 	br	4fa0 <__register_exitproc+0x40>
    5048:	00800034 	movhi	r2,0
    504c:	10800004 	addi	r2,r2,0
    5050:	1000021e 	bne	r2,zero,505c <__register_exitproc+0xfc>
    5054:	013fffc4 	movi	r4,-1
    5058:	003fdc06 	br	4fcc <__register_exitproc+0x6c>
    505c:	01006404 	movi	r4,400
    5060:	103ee83a 	callr	r2
    5064:	1007883a 	mov	r3,r2
    5068:	103ffa26 	beq	r2,zero,5054 <__register_exitproc+0xf4>
    506c:	80805217 	ldw	r2,328(r16)
    5070:	180b883a 	mov	r5,r3
    5074:	18000115 	stw	zero,4(r3)
    5078:	18800015 	stw	r2,0(r3)
    507c:	80c05215 	stw	r3,328(r16)
    5080:	18006215 	stw	zero,392(r3)
    5084:	18006315 	stw	zero,396(r3)
    5088:	0009883a 	mov	r4,zero
    508c:	883fc826 	beq	r17,zero,4fb0 <__register_exitproc+0x50>
    5090:	003fd706 	br	4ff0 <__register_exitproc+0x90>

00005094 <register_fini>:
    5094:	f800283a 	ret

00005098 <__call_exitprocs>:
    5098:	00800034 	movhi	r2,0
    509c:	1097ac04 	addi	r2,r2,24240
    50a0:	10800017 	ldw	r2,0(r2)
    50a4:	defff304 	addi	sp,sp,-52
    50a8:	df000b15 	stw	fp,44(sp)
    50ac:	d8800115 	stw	r2,4(sp)
    50b0:	00800034 	movhi	r2,0
    50b4:	10800004 	addi	r2,r2,0
    50b8:	1005003a 	cmpeq	r2,r2,zero
    50bc:	d8800215 	stw	r2,8(sp)
    50c0:	d8800117 	ldw	r2,4(sp)
    50c4:	dd400815 	stw	r21,32(sp)
    50c8:	dd000715 	stw	r20,28(sp)
    50cc:	10805204 	addi	r2,r2,328
    50d0:	dfc00c15 	stw	ra,48(sp)
    50d4:	ddc00a15 	stw	r23,40(sp)
    50d8:	dd800915 	stw	r22,36(sp)
    50dc:	dcc00615 	stw	r19,24(sp)
    50e0:	dc800515 	stw	r18,20(sp)
    50e4:	dc400415 	stw	r17,16(sp)
    50e8:	dc000315 	stw	r16,12(sp)
    50ec:	282b883a 	mov	r21,r5
    50f0:	2039883a 	mov	fp,r4
    50f4:	d8800015 	stw	r2,0(sp)
    50f8:	2829003a 	cmpeq	r20,r5,zero
    50fc:	d8800117 	ldw	r2,4(sp)
    5100:	14405217 	ldw	r17,328(r2)
    5104:	88001026 	beq	r17,zero,5148 <__call_exitprocs+0xb0>
    5108:	ddc00017 	ldw	r23,0(sp)
    510c:	88800117 	ldw	r2,4(r17)
    5110:	8c802204 	addi	r18,r17,136
    5114:	143fffc4 	addi	r16,r2,-1
    5118:	80000916 	blt	r16,zero,5140 <__call_exitprocs+0xa8>
    511c:	05bfffc4 	movi	r22,-1
    5120:	a000151e 	bne	r20,zero,5178 <__call_exitprocs+0xe0>
    5124:	8409883a 	add	r4,r16,r16
    5128:	2105883a 	add	r2,r4,r4
    512c:	1485883a 	add	r2,r2,r18
    5130:	10c02017 	ldw	r3,128(r2)
    5134:	a8c01126 	beq	r21,r3,517c <__call_exitprocs+0xe4>
    5138:	843fffc4 	addi	r16,r16,-1
    513c:	85bff81e 	bne	r16,r22,5120 <__call_exitprocs+0x88>
    5140:	d8800217 	ldw	r2,8(sp)
    5144:	10003126 	beq	r2,zero,520c <__call_exitprocs+0x174>
    5148:	dfc00c17 	ldw	ra,48(sp)
    514c:	df000b17 	ldw	fp,44(sp)
    5150:	ddc00a17 	ldw	r23,40(sp)
    5154:	dd800917 	ldw	r22,36(sp)
    5158:	dd400817 	ldw	r21,32(sp)
    515c:	dd000717 	ldw	r20,28(sp)
    5160:	dcc00617 	ldw	r19,24(sp)
    5164:	dc800517 	ldw	r18,20(sp)
    5168:	dc400417 	ldw	r17,16(sp)
    516c:	dc000317 	ldw	r16,12(sp)
    5170:	dec00d04 	addi	sp,sp,52
    5174:	f800283a 	ret
    5178:	8409883a 	add	r4,r16,r16
    517c:	88c00117 	ldw	r3,4(r17)
    5180:	2105883a 	add	r2,r4,r4
    5184:	1445883a 	add	r2,r2,r17
    5188:	18ffffc4 	addi	r3,r3,-1
    518c:	11800217 	ldw	r6,8(r2)
    5190:	1c001526 	beq	r3,r16,51e8 <__call_exitprocs+0x150>
    5194:	10000215 	stw	zero,8(r2)
    5198:	303fe726 	beq	r6,zero,5138 <__call_exitprocs+0xa0>
    519c:	00c00044 	movi	r3,1
    51a0:	1c06983a 	sll	r3,r3,r16
    51a4:	90804017 	ldw	r2,256(r18)
    51a8:	8cc00117 	ldw	r19,4(r17)
    51ac:	1884703a 	and	r2,r3,r2
    51b0:	10001426 	beq	r2,zero,5204 <__call_exitprocs+0x16c>
    51b4:	90804117 	ldw	r2,260(r18)
    51b8:	1884703a 	and	r2,r3,r2
    51bc:	10000c1e 	bne	r2,zero,51f0 <__call_exitprocs+0x158>
    51c0:	2105883a 	add	r2,r4,r4
    51c4:	1485883a 	add	r2,r2,r18
    51c8:	11400017 	ldw	r5,0(r2)
    51cc:	e009883a 	mov	r4,fp
    51d0:	303ee83a 	callr	r6
    51d4:	88800117 	ldw	r2,4(r17)
    51d8:	98bfc81e 	bne	r19,r2,50fc <__call_exitprocs+0x64>
    51dc:	b8800017 	ldw	r2,0(r23)
    51e0:	147fd526 	beq	r2,r17,5138 <__call_exitprocs+0xa0>
    51e4:	003fc506 	br	50fc <__call_exitprocs+0x64>
    51e8:	8c000115 	stw	r16,4(r17)
    51ec:	003fea06 	br	5198 <__call_exitprocs+0x100>
    51f0:	2105883a 	add	r2,r4,r4
    51f4:	1485883a 	add	r2,r2,r18
    51f8:	11000017 	ldw	r4,0(r2)
    51fc:	303ee83a 	callr	r6
    5200:	003ff406 	br	51d4 <__call_exitprocs+0x13c>
    5204:	303ee83a 	callr	r6
    5208:	003ff206 	br	51d4 <__call_exitprocs+0x13c>
    520c:	88800117 	ldw	r2,4(r17)
    5210:	1000081e 	bne	r2,zero,5234 <__call_exitprocs+0x19c>
    5214:	89000017 	ldw	r4,0(r17)
    5218:	20000726 	beq	r4,zero,5238 <__call_exitprocs+0x1a0>
    521c:	b9000015 	stw	r4,0(r23)
    5220:	8809883a 	mov	r4,r17
    5224:	00000000 	call	0 <__reset>
    5228:	bc400017 	ldw	r17,0(r23)
    522c:	883fb71e 	bne	r17,zero,510c <__call_exitprocs+0x74>
    5230:	003fc506 	br	5148 <__call_exitprocs+0xb0>
    5234:	89000017 	ldw	r4,0(r17)
    5238:	882f883a 	mov	r23,r17
    523c:	2023883a 	mov	r17,r4
    5240:	883fb21e 	bne	r17,zero,510c <__call_exitprocs+0x74>
    5244:	003fc006 	br	5148 <__call_exitprocs+0xb0>

00005248 <udivmodsi4>:
    5248:	29001b2e 	bgeu	r5,r4,52b8 <udivmodsi4+0x70>
    524c:	28001a16 	blt	r5,zero,52b8 <udivmodsi4+0x70>
    5250:	00800044 	movi	r2,1
    5254:	0007883a 	mov	r3,zero
    5258:	01c007c4 	movi	r7,31
    525c:	00000306 	br	526c <udivmodsi4+0x24>
    5260:	19c01326 	beq	r3,r7,52b0 <udivmodsi4+0x68>
    5264:	18c00044 	addi	r3,r3,1
    5268:	28000416 	blt	r5,zero,527c <udivmodsi4+0x34>
    526c:	294b883a 	add	r5,r5,r5
    5270:	1085883a 	add	r2,r2,r2
    5274:	293ffa36 	bltu	r5,r4,5260 <udivmodsi4+0x18>
    5278:	10000d26 	beq	r2,zero,52b0 <udivmodsi4+0x68>
    527c:	0007883a 	mov	r3,zero
    5280:	21400236 	bltu	r4,r5,528c <udivmodsi4+0x44>
    5284:	2149c83a 	sub	r4,r4,r5
    5288:	1886b03a 	or	r3,r3,r2
    528c:	1004d07a 	srli	r2,r2,1
    5290:	280ad07a 	srli	r5,r5,1
    5294:	103ffa1e 	bne	r2,zero,5280 <udivmodsi4+0x38>
    5298:	30000226 	beq	r6,zero,52a4 <udivmodsi4+0x5c>
    529c:	2005883a 	mov	r2,r4
    52a0:	f800283a 	ret
    52a4:	1809883a 	mov	r4,r3
    52a8:	2005883a 	mov	r2,r4
    52ac:	f800283a 	ret
    52b0:	0007883a 	mov	r3,zero
    52b4:	003ff806 	br	5298 <udivmodsi4+0x50>
    52b8:	00800044 	movi	r2,1
    52bc:	0007883a 	mov	r3,zero
    52c0:	003fef06 	br	5280 <udivmodsi4+0x38>

000052c4 <__divsi3>:
    52c4:	defffe04 	addi	sp,sp,-8
    52c8:	dc000015 	stw	r16,0(sp)
    52cc:	dfc00115 	stw	ra,4(sp)
    52d0:	0021883a 	mov	r16,zero
    52d4:	20000c16 	blt	r4,zero,5308 <__divsi3+0x44>
    52d8:	000d883a 	mov	r6,zero
    52dc:	28000e16 	blt	r5,zero,5318 <__divsi3+0x54>
    52e0:	00052480 	call	5248 <udivmodsi4>
    52e4:	1007883a 	mov	r3,r2
    52e8:	8005003a 	cmpeq	r2,r16,zero
    52ec:	1000011e 	bne	r2,zero,52f4 <__divsi3+0x30>
    52f0:	00c7c83a 	sub	r3,zero,r3
    52f4:	1805883a 	mov	r2,r3
    52f8:	dfc00117 	ldw	ra,4(sp)
    52fc:	dc000017 	ldw	r16,0(sp)
    5300:	dec00204 	addi	sp,sp,8
    5304:	f800283a 	ret
    5308:	0109c83a 	sub	r4,zero,r4
    530c:	04000044 	movi	r16,1
    5310:	000d883a 	mov	r6,zero
    5314:	283ff20e 	bge	r5,zero,52e0 <__divsi3+0x1c>
    5318:	014bc83a 	sub	r5,zero,r5
    531c:	8021003a 	cmpeq	r16,r16,zero
    5320:	003fef06 	br	52e0 <__divsi3+0x1c>

00005324 <__modsi3>:
    5324:	deffff04 	addi	sp,sp,-4
    5328:	dfc00015 	stw	ra,0(sp)
    532c:	01800044 	movi	r6,1
    5330:	2807883a 	mov	r3,r5
    5334:	20000416 	blt	r4,zero,5348 <__modsi3+0x24>
    5338:	28000c16 	blt	r5,zero,536c <__modsi3+0x48>
    533c:	dfc00017 	ldw	ra,0(sp)
    5340:	dec00104 	addi	sp,sp,4
    5344:	00052481 	jmpi	5248 <udivmodsi4>
    5348:	0109c83a 	sub	r4,zero,r4
    534c:	28000b16 	blt	r5,zero,537c <__modsi3+0x58>
    5350:	180b883a 	mov	r5,r3
    5354:	01800044 	movi	r6,1
    5358:	00052480 	call	5248 <udivmodsi4>
    535c:	0085c83a 	sub	r2,zero,r2
    5360:	dfc00017 	ldw	ra,0(sp)
    5364:	dec00104 	addi	sp,sp,4
    5368:	f800283a 	ret
    536c:	014bc83a 	sub	r5,zero,r5
    5370:	dfc00017 	ldw	ra,0(sp)
    5374:	dec00104 	addi	sp,sp,4
    5378:	00052481 	jmpi	5248 <udivmodsi4>
    537c:	0147c83a 	sub	r3,zero,r5
    5380:	003ff306 	br	5350 <__modsi3+0x2c>

00005384 <__udivsi3>:
    5384:	000d883a 	mov	r6,zero
    5388:	00052481 	jmpi	5248 <udivmodsi4>

0000538c <__umodsi3>:
    538c:	01800044 	movi	r6,1
    5390:	00052481 	jmpi	5248 <udivmodsi4>

00005394 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    5394:	defffd04 	addi	sp,sp,-12
    5398:	df000215 	stw	fp,8(sp)
    539c:	df000204 	addi	fp,sp,8
    53a0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    53a4:	e0bfff17 	ldw	r2,-4(fp)
    53a8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    53ac:	e0bffe17 	ldw	r2,-8(fp)
    53b0:	1005003a 	cmpeq	r2,r2,zero
    53b4:	1000021e 	bne	r2,zero,53c0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    53b8:	002af070 	cmpltui	zero,zero,43969
    53bc:	00000106 	br	53c4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    53c0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    53c4:	e037883a 	mov	sp,fp
    53c8:	df000017 	ldw	fp,0(sp)
    53cc:	dec00104 	addi	sp,sp,4
    53d0:	f800283a 	ret

000053d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    53d4:	defffd04 	addi	sp,sp,-12
    53d8:	dfc00215 	stw	ra,8(sp)
    53dc:	df000115 	stw	fp,4(sp)
    53e0:	df000104 	addi	fp,sp,4
    53e4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    53e8:	e13fff17 	ldw	r4,-4(fp)
    53ec:	00053940 	call	5394 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    53f0:	003fff06 	br	53f0 <_exit+0x1c>
    53f4:	00005094 	movui	zero,322
